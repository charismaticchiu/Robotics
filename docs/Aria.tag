<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>ARIA Overview</title>
    <filename>main</filename>
    <docanchor file="main">connrw</docanchor>
    <docanchor file="main">noneverydayC</docanchor>
    <docanchor file="main">sockets</docanchor>
    <docanchor file="main">tocDevHelp</docanchor>
    <docanchor file="main">commands</docanchor>
    <docanchor file="main">openDevice</docanchor>
    <docanchor file="main">hardConnectRobot</docanchor>
    <docanchor file="main">arCliServ</docanchor>
    <docanchor file="main">toc</docanchor>
    <docanchor file="main">emacs</docanchor>
    <docanchor file="main">ArNetworking</docanchor>
    <docanchor file="main">ClientCommands</docanchor>
    <docanchor file="main">devConnect</docanchor>
    <docanchor file="main">charsAndStrings</docanchor>
    <docanchor file="main">constructorChaining</docanchor>
    <docanchor file="main">rangeDevices</docanchor>
    <docanchor file="main">robot</docanchor>
    <docanchor file="main">stl</docanchor>
    <docanchor file="main">syncRobot</docanchor>
    <docanchor file="main">functors</docanchor>
    <docanchor file="main">CommandPackets</docanchor>
    <docanchor file="main">intro</docanchor>
    <docanchor file="main">arexport</docanchor>
    <docanchor file="main">defaultArgs</docanchor>
    <docanchor file="main">packetHandlers</docanchor>
    <docanchor file="main">tocToolbox</docanchor>
    <docanchor file="main">Advanced</docanchor>
    <docanchor file="main">maps</docanchor>
    <docanchor file="main">robotDirectCommands</docanchor>
    <docanchor file="main">sound</docanchor>
    <docanchor file="main">aria</docanchor>
    <docanchor file="main">syncObject</docanchor>
    <docanchor file="main">actionInteractions</docanchor>
    <docanchor file="main">HardwareConfiguration</docanchor>
    <docanchor file="main">javapython</docanchor>
    <docanchor file="main">arconfig</docanchor>
    <docanchor file="main">asynctasks</docanchor>
    <docanchor file="main">threading</docanchor>
    <docanchor file="main">robotMotionCommands</docanchor>
    <docanchor file="main">arpack</docanchor>
    <docanchor file="main">whouses</docanchor>
    <docanchor file="main">callback</docanchor>
    <docanchor file="main">connectRobot</docanchor>
    <docanchor file="main">arinfogroup</docanchor>
    <docanchor file="main">utility</docanchor>
    <docanchor file="main">predefinedActions</docanchor>
    <docanchor file="main">arpackother</docanchor>
    <docanchor file="main">userInput</docanchor>
    <docanchor file="main">actionDesired</docanchor>
    <docanchor file="main">RuntimeOptions</docanchor>
    <docanchor file="main">tocAdv</docanchor>
    <docanchor file="main">pieceMealUse</docanchor>
    <docanchor file="main">devices</docanchor>
    <docanchor file="main">actions</docanchor>
    <docanchor file="main">stateReflection</docanchor>
    <docanchor file="main">resolvers</docanchor>
    <docanchor file="main">codingConventions</docanchor>
    <docanchor file="main">AriaPackage</docanchor>
    <docanchor file="main">licensing</docanchor>
    <docanchor file="main">exceptions</docanchor>
    <docanchor file="main">actionGroups</docanchor>
    <docanchor file="main">RobotParameterFiles</docanchor>
    <docanchor file="main">commClasses</docanchor>
  </compound>
  <compound kind="file">
    <name>ArMap.h</name>
    <path>/root/Aria.aria_2_7/include/</path>
    <filename>ArMap_8h</filename>
    <includes id="ArMapComponents_8h" name="ArMapComponents.h" local="yes" imported="no">ArMapComponents.h</includes>
    <includes id="ArMapInterface_8h" name="ArMapInterface.h" local="yes" imported="no">ArMapInterface.h</includes>
  </compound>
  <compound kind="file">
    <name>ArMapComponents.h</name>
    <path>/root/Aria.aria_2_7/include/</path>
    <filename>ArMapComponents_8h</filename>
    <includes id="ArMapInterface_8h" name="ArMapInterface.h" local="yes" imported="no">ArMapInterface.h</includes>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string, ArDataTagCaseCmpOp &gt;</type>
      <name>ArDataTagToScanTypeMap</name>
      <anchorfile>ArMapComponents_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ArMapScan *, ArStrCaseCmpOp &gt;</type>
      <name>ArTypeToScanMap</name>
      <anchorfile>ArMapComponents_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArMapInterface.h</name>
    <path>/root/Aria.aria_2_7/include/</path>
    <filename>ArMapInterface_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ARMAP_DEFAULT_SCAN_TYPE</name>
      <anchorfile>ArMapInterface_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARMAP_SUMMARY_SCAN_TYPE</name>
      <anchorfile>ArMapInterface_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArMD5Calculator.h</name>
    <path>/root/Aria.aria_2_7/include/</path>
    <filename>ArMD5Calculator_8h</filename>
  </compound>
  <compound kind="class">
    <name>Ar3DPoint</name>
    <filename>classAr3DPoint.html</filename>
    <member kind="function">
      <type></type>
      <name>Ar3DPoint</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>Ar3DPoint</type>
      <name>cross</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Ar3DPoint c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(Ar3DPoint c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ar3DPoint</type>
      <name>operator *</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>Ar3DPoint</type>
      <name>operator+</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(Ar3DPoint c)</arglist>
    </member>
    <member kind="function">
      <type>Ar3DPoint</type>
      <name>operator-</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(Ar3DPoint c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *head=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ar3DPoint</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myX</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myY</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myZ</name>
      <anchorfile>classAr3DPoint.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArAction</name>
    <filename>classArAction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArAction</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArActionDesired currentDesired)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArArg *</type>
      <name>getArg</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int number)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArArg *</type>
      <name>getArg</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDescription</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumArgs</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(bool verbose=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArAction</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getDefaultActivationState</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultActivationState</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(bool defaultActivationState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNextArgument</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArArg const &amp;arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArArg &gt;</type>
      <name>myArgumentMap</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDescription</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsActive</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumArgs</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourDefaultActivationState</name>
      <anchorfile>classArAction.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionAvoidFront</name>
    <filename>classArActionAvoidFront.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionAvoidFront</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;avoid front obstacles&quot;, double obstacleDistance=450, double avoidVelocity=200, double turnAmount=15, bool useTableIRIfAvail=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionAvoidFront</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAvoidVel</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionAvoidFront &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myObsDist</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSectors</type>
      <name>myQuadrants</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmount</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmountParam</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTurning</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseTableIRIfAvail</name>
      <anchorfile>classArActionAvoidFront.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionAvoidSide</name>
    <filename>classArActionAvoidSide.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionAvoidSide</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;Avoid side&quot;, double obstacleDistance=300, double turnAmount=5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionAvoidSide</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myObsDist</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmount</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTurning</name>
      <anchorfile>classArActionAvoidSide.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionBumpers</name>
    <filename>classArActionBumpers.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionBumpers</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;bumpers&quot;, double backOffSpeed=100, int backOffTime=3000, int turnTime=3000, bool setMaximums=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findDegreesToTurn</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int bumpValue, int whichBumper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionBumpers</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBackOffSpeed</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBackOffTime</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBumpMask</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFiring</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeading</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySetMaximums</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStartBack</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTurnTime</name>
      <anchorfile>classArActionBumpers.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionColorFollow</name>
    <filename>classArActionColorFollow.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionColorFollow</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name, ArACTS_1_2 *acts, ArPTZ *camera, double speed=200, int width=160, int height=120)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAcquire</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBlob</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannel</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMovement</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcquire</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(bool acquire)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArPTZ *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setChannel</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMovement</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMovement</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>killMovement</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAcquire</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArACTS_1_2 *</type>
      <name>myActs</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPTZ *</type>
      <name>myCamera</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myChannel</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myHeight</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastSeen</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocationState</type>
      <name>myLocation</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxTime</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MoveState</type>
      <name>myMove</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TargetState</type>
      <name>myState</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myWidth</name>
      <anchorfile>classArActionColorFollow.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionConstantVelocity</name>
    <filename>classArActionConstantVelocity.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionConstantVelocity</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;Constant Velocity&quot;, double velocity=400)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionConstantVelocity</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVelocity</name>
      <anchorfile>classArActionConstantVelocity.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionDeceleratingLimiter</name>
    <filename>classArActionDeceleratingLimiter.html</filename>
    <base>ArAction</base>
    <member kind="enumeration">
      <name>LimiterType</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORWARDS</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKWARDS</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATERAL_LEFT</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATERAL_RIGHT</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section, const char *prefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionDeceleratingLimiter</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;limitAndDecel&quot;, LimiterType type=FORWARDS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>LimiterType</type>
      <name>getType</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLocationDependentDevices</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double clearance=100, double sideClearanceAtSlowSpeed=50, double paddingAtSlowSpeed=50, double slowSpeed=200, double sideClearanceAtFastSpeed=400, double paddingAtFastSpeed=300, double fastSpeed=1000, double preferredDecel=600, bool useEStop=false, double maxEmergencyDecel=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(LimiterType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseLocationDependentDevices</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(bool useLocationDependentDevices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionDeceleratingLimiter</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myClearance</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFastSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastStopped</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxEmergencyDecel</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPaddingAtFastSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPaddingAtSlowSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPreferredDecel</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySideClearanceAtFastSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySideClearanceAtSlowSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySlowSpeed</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LimiterType</type>
      <name>myType</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseEStop</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseLocationDependentDevices</name>
      <anchorfile>classArActionDeceleratingLimiter.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionDesired</name>
    <filename>classArActionDesired.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accountForRobotHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double robotHeading)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addAverage</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired *actDesired)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionDesired</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endAverage</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDeltaHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDeltaHeadingStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHeadingStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatAccelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatAccelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatDecelFastestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatDecelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLatVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxLeftLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxLeftLatVelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxLeftLatVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegVelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRightLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRightLatVelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRightLatVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRotVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRotVelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxRotVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxVelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotAccelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotAccelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotDecelFastestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotDecelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRotVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransAccelSlowestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransAccelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransDecelFastestUsed</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTransDecelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVelStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAnythingDesired</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(ArActionDesired *actDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeltaHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(double deltaHeading, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(double heading, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLatAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(double latAccel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLatDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(double latDecel, double strength=MAX_STRENGTH, bool useFastest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeftLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(double latVel, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxLeftLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(double maxVel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxNegVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(double maxVel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxRightLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(double maxVel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxRotVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(double maxVel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(double maxVel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRightLatVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(double latVel, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRotAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(double rotAccel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRotDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(double rotDecel, double strength=MAX_STRENGTH, bool useFastest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRotVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(double rotVel, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransAccel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(double transAccel, double strength=MAX_STRENGTH, bool useSlowest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransDecel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(double transDecel, double strength=MAX_STRENGTH, bool useFastestDecel=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVel</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(double vel, double strength=MAX_STRENGTH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startAverage</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionDesired</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAX_STRENGTH</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MIN_STRENGTH</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>NO_STRENGTH</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myDeltaHeadingDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeading</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHeadingSet</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeadingStrength</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myLatAccelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myLatDecelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myLatVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myMaxLeftLatVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myMaxNegVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myMaxRightLatVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myMaxRotVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myMaxVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myRotAccelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myRotDecelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myRotVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myTransAccelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myTransDecelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesiredChannel</type>
      <name>myVelDes</name>
      <anchorfile>classArActionDesired.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionDesiredChannel</name>
    <filename>classArActionDesiredChannel.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addAverage</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArActionDesiredChannel *desiredChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endAverage</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAllowOverride</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDesired</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStrength</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArActionDesiredChannel *desiredChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDesired</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double desired, double desiredStrength, bool allowOverride=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverrideDoesLessThan</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(bool overrideDoesLessThan)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startAverage</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAX_STRENGTH</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MIN_STRENGTH</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>NO_STRENGTH</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAllowOverride</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDesired</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDesiredTotal</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOverrideDoesLessThan</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStrength</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStrengthTotal</name>
      <anchorfile>classArActionDesiredChannel.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionDriveDistance</name>
    <filename>classArActionDriveDistance.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionDriveDistance</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;driveDistance&quot;, double speed=400, double deceleration=200)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelDistance</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDeceleration</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAchievedDistance</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeceleration</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double deceleration=200)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistance</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double distance, bool useEncoders=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrinting</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(bool printing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double speed=400)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingEncoders</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDeceleration</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistance</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistTravelled</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLastPose</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastVel</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseEncoders</name>
      <anchorfile>classArActionDriveDistance.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGoto</name>
    <filename>classArActionGoto.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionGoto</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;goto&quot;, ArPose goal=ArPose(0.0, 0.0, 0.0), double closeDist=100, double speed=400, double speedToTurnAt=150, double turnAmount=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCloseDist</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAchievedGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloseDist</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double closeDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArPose goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCloseDist</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCurTurnDir</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDirectionToTurn</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myOldGoal</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeedToTurnAt</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmount</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTurnedBack</name>
      <anchorfile>classArActionGoto.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGotoStraight</name>
    <filename>classArActionGotoStraight.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionGotoStraight</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;goto&quot;, double speed=400)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBacking</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCloseDist</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEncoderGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAchievedGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloseDist</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double closeDist=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArPose encoderGoal, bool backwards=false, bool justDistance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderGoalRel</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(double dist, double deltaHeading, bool backwards=false, bool justDistance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArPose goal, bool backwards=false, bool justDistance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalRel</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(double dist, double deltaHeading, bool backwards=false, bool justDistance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingEncoderGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBacking</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCloseDist</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDist</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistTravelled</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myEncoderGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myJustDist</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLastPose</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseEncoderGoal</name>
      <anchorfile>classArActionGotoStraight.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroup</name>
    <filename>classArActionGroup.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activateExclusive</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addAction</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArAction *action, int priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionGroup</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteActions</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArAction * &gt; *</type>
      <name>getActionList</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remAction</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeActions</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionGroup</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArAction * &gt;</type>
      <name>myActions</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArActionGroup.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupColorFollow</name>
    <filename>classArActionGroupColorFollow.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupColorFollow</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, ArACTS_1_2 *acts, ArPTZ *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAcquire</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBlob</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannel</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMovement</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcquire</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(bool acquire)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArPTZ *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMovement</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMovement</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionColorFollow *</type>
      <name>myColorFollow</name>
      <anchorfile>classArActionGroupColorFollow.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupInput</name>
    <filename>classArActionGroupInput.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupInput</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deltaHeadingFromCurrent</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>ArActionInput *</type>
      <name>getActionInput</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeading</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double heading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotVel</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(double rotVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVel</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double vel)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionInput *</type>
      <name>myInput</name>
      <anchorfile>classArActionGroupInput.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupRatioDrive</name>
    <filename>classArActionGroupRatioDrive.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionGroupRatioDrive</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>ArActionRatioInput *</type>
      <name>getActionRatioInput</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDeceleratingLimiter *</type>
      <name>myDeceleratingLimiterBackward</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDeceleratingLimiter *</type>
      <name>myDeceleratingLimiterForward</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDeceleratingLimiter *</type>
      <name>myDeceleratingLimiterLateralLeft</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDeceleratingLimiter *</type>
      <name>myDeceleratingLimiterLateralRight</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionRatioInput *</type>
      <name>myInput</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputJoydrive *</type>
      <name>myJoydrive</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputKeydrive *</type>
      <name>myKeydrive</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputRobotJoydrive *</type>
      <name>myRobotJoydrive</name>
      <anchorfile>classArActionGroupRatioDrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupRatioDriveUnsafe</name>
    <filename>classArActionGroupRatioDriveUnsafe.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionGroupRatioDriveUnsafe</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>ArActionRatioInput *</type>
      <name>getActionRatioInput</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionRatioInput *</type>
      <name>myInput</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputJoydrive *</type>
      <name>myJoydrive</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputKeydrive *</type>
      <name>myKeydrive</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRatioInputRobotJoydrive *</type>
      <name>myRobotJoydrive</name>
      <anchorfile>classArActionGroupRatioDriveUnsafe.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupStop</name>
    <filename>classArActionGroupStop.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupStop</name>
      <anchorfile>classArActionGroupStop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupTeleop</name>
    <filename>classArActionGroupTeleop.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupTeleop</name>
      <anchorfile>classArActionGroupTeleop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThrottleParams</name>
      <anchorfile>classArActionGroupTeleop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int lowSpeed, int highSpeed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionJoydrive *</type>
      <name>myJoydrive</name>
      <anchorfile>classArActionGroupTeleop.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupUnguardedTeleop</name>
    <filename>classArActionGroupUnguardedTeleop.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupUnguardedTeleop</name>
      <anchorfile>classArActionGroupUnguardedTeleop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThrottleParams</name>
      <anchorfile>classArActionGroupUnguardedTeleop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int lowSpeed, int highSpeed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionJoydrive *</type>
      <name>myJoydrive</name>
      <anchorfile>classArActionGroupUnguardedTeleop.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionGroupWander</name>
    <filename>classArActionGroupWander.html</filename>
    <base>ArActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ArActionGroupWander</name>
      <anchorfile>classArActionGroupWander.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, int forwardVel=400, int avoidFrontDist=450, int avoidVel=200, int avoidTurnAmt=15)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionInput</name>
    <filename>classArActionInput.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionInput</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;Input&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deltaHeadingFromCurrent</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeading</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double heading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotVel</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double rotVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVel</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double vel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionInput</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotRegime</type>
      <name>myRotRegime</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotVal</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingVel</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVelSet</name>
      <anchorfile>classArActionInput.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionIRs</name>
    <filename>classArActionIRs.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionIRs</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;IRs&quot;, double backOffSpeed=100, int backOffTime=5000, int turnTime=3000, bool setMaximums=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionIRs</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>cycleCounters</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBackOffSpeed</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBackOffTime</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFiring</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeading</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotParams</type>
      <name>myParams</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySetMaximums</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStartBack</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStopTime</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTurnTime</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>stoppedSince</name>
      <anchorfile>classArActionIRs.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionJoydrive</name>
    <filename>classArActionJoydrive.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionJoydrive</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;joydrive&quot;, double transVelMax=400, double turnAmountMax=15, bool stopIfNoButtonPressed=true, bool useOSCalForJoystick=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArJoyHandler *</type>
      <name>getJoyHandler</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStopIfNoButtonPressed</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseOSCal</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>joystickInited</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeeds</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double transVelMax, double turnAmountMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopIfNoButtonPressed</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(bool stopIfNoButtonPressed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThrottleParams</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double lowSpeed, double highSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseOSCal</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(bool useOSCal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionJoydrive</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHighThrottle</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArJoyHandler *</type>
      <name>myJoyHandler</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLowThrottle</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPreviousUseOSCal</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStopIfNoButtonPressed</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVelMax</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmountMax</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseOSCal</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseThrottle</name>
      <anchorfile>classArActionJoydrive.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionKeydrive</name>
    <filename>classArActionKeydrive.html</filename>
    <base>ArAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionKeydrive</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;keydrive&quot;, double transVelMax=400, double turnAmountMax=24, double velIncrement=25, double turnIncrement=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>down</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>giveUpKeys</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncrements</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double velIncrement, double turnIncrement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeeds</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double transVelMax, double turnAmountMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>space</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeKeys</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>up</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionKeydrive</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDeltaVel</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDesiredSpeed</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionKeydrive &gt;</type>
      <name>myDownCB</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionKeydrive &gt;</type>
      <name>myLeftCB</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionKeydrive &gt;</type>
      <name>myRightCB</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionKeydrive &gt;</type>
      <name>mySpaceCB</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySpeedReset</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVelMax</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmount</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmountMax</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnIncrement</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionKeydrive &gt;</type>
      <name>myUpCB</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVelIncrement</name>
      <anchorfile>classArActionKeydrive.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionLimiterBackwards</name>
    <filename>classArActionLimiterBackwards.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionLimiterBackwards</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;speed limiter&quot;, double stopDistance=-250, double slowDistance=-600, double maxBackwardsSpeed=-250, double widthRatio=1.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionLimiterBackwards</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxBackwardsSpeed</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySlowDist</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStopDist</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myWidthRatio</name>
      <anchorfile>classArActionLimiterBackwards.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionLimiterForwards</name>
    <filename>classArActionLimiterForwards.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionLimiterForwards</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;speed limiter&quot;, double stopDistance=250, double slowDistance=1000, double slowSpeed=200, double widthRatio=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double stopDistance=250, double slowDistance=1000, double slowSpeed=200, double widthRatio=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionLimiterForwards</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastStopped</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySlowDist</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySlowSpeed</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStopDist</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myWidthRatio</name>
      <anchorfile>classArActionLimiterForwards.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionLimiterTableSensor</name>
    <filename>classArActionLimiterTableSensor.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionLimiterTableSensor</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;TableSensorLimiter&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionLimiterTableSensor</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionLimiterTableSensor.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionMovementParameters</name>
    <filename>classArActionMovementParameters.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section, const char *prefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionMovementParameters</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;MovementParameters&quot;, bool overrideFaster=true, bool addLatVelIfAvailable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableOnceFromSector</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArMapObject *mapObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double maxVel=0, double maxNegVel=0, double transAccel=0, double transDecel=0, double rotVelMax=0, double rotAccel=0, double rotDecel=0, double latVelMax=0, double latAccel=0, double latDecel=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionMovementParameters</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddLatVelIfAvailable</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myEnabled</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myEnableOnce</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatAccel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatDecel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxLatVel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxNegVel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxRotVel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxVel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOverrideFaster</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotAccel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotDecel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransAccel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransDecel</name>
      <anchorfile>classArActionMovementParameters.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionRatioInput</name>
    <filename>classArActionRatioInput.html</filename>
    <base>ArAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addActivateCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDeactivateCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFireCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int priority, ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArConfig *config, const char *section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionRatioInput</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name=&quot;RatioInput&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRotRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThrottleRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTransRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remActivateCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remDeactivateCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remFireCallback</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(double latRatio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(double fullThrottleForwards, double fullThrottleBackwards, double rotAtFullForwards, double rotAtFullBackwards, double rotAtStopped, double latAtFullForwards=0, double latAtFullBackwards=0, double latAtStopped=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRatios</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(double transRatio, double rotRatio, double throttleRatio, double latRatio=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double rotRatio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThrottleRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double throttleRatio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double transRatio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionRatioInput</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myActivateCallbacks</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myDeactivateCallbacks</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; int, ArFunctor * &gt;</type>
      <name>myFireCallbacks</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFullThrottleBackwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFullThrottleForwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatAtFullBackwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatAtFullForwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatAtStopped</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatDeadZone</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotAtFullBackwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotAtFullForwards</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotAtStopped</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotDeadZone</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myThrottleRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransDeadZone</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransRatio</name>
      <anchorfile>classArActionRatioInput.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionRobotJoydrive</name>
    <filename>classArActionRobotJoydrive.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionRobotJoydrive</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;robotJoyDrive&quot;, bool requireDeadmanPushed=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionRobotJoydrive</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectCallback</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleJoystickPacket</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myButton1</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myButton2</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArActionRobotJoydrive &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDeadZoneLast</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArActionRobotJoydrive, ArRobotPacket * &gt;</type>
      <name>myHandleJoystickPacketCB</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyX</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyY</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myPacketReceivedTime</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequireDeadmanPushed</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myThrottle</name>
      <anchorfile>classArActionRobotJoydrive.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionStallRecover</name>
    <filename>classArActionStallRecover.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *sectionName, int priority=ArPriority::NORMAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionStallRecover</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;stall recover&quot;, double obstacleDistance=225, int cyclesToMove=50, double speed=150, double degreesToTurn=45)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionStallRecover</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addSequence</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int sequence)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doit</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myActionDesired</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCount</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCyclesToMove</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCyclesToTurn</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegreesToTurn</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDesiredHeading</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDoing</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myLastFired</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myObstacleDistance</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArResolver *</type>
      <name>myResolver</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>mySequence</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySequenceNum</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySequencePos</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySideStalled</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myState</name>
      <anchorfile>classArActionStallRecover.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionStop</name>
    <filename>classArActionStop.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionStop</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;stop&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionStop</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionStop.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionTriangleDriveTo</name>
    <filename>classArActionTriangleDriveTo.html</filename>
    <base>ArAction</base>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_INACTIVE</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_ACQUIRE</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SEARCHING</name>
      <anchor>w0w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_GOTO_APPROACH</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_ALIGN_APPROACH</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_GOTO_VERTEX</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_GOTO_FINAL</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_ALIGN_FINAL</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SUCCEEDED</name>
      <anchor>w0w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_FAILED</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArActionTriangleDriveTo</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;triangleDriveTo&quot;, double finalDistFromVertex=400, double approachDistFromVertex=1000, double speed=200, double closeDist=100, double acquireTurnSpeed=30)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAcquire</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdjustVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>getData</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFinalDistFromVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGotoVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIgnoreTriangleDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLineFinder *</type>
      <name>getLineFinder</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSaveData</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseIgnoreInGOtoVertexMode</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVertexUnseenStopMSecs</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcquire</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(bool acquire=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdjustVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(bool adjustVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalDistFromVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGotoVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(bool gotoVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreTriangleDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double dist=250, bool useIgnoreInGotoVertexMode=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineFinder</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(ArLineFinder *lineFinder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLogging</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogging</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(bool logging)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAngleMisalignment</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int maxAngleMisalignment=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistBetweenLinePoints</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int maxDistBetweenLinePoints=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLateralDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int maxLateralDist=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(double finalDistFromVertex=400, double approachDistFromVertex=1000, double speed=200, double closeDist=100, double acquireTurnSpeed=30)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSaveData</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(bool saveData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriangleParams</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(double line1Length=254, double angleBetween=135, double line2Length=254)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexOffset</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(int localXOffset, int localYOffset, double thOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexUnseenStopMSecs</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(int vertexUnseenStopMSecs=4000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionTriangleDriveTo</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArPose</type>
      <name>findPoseFromVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(double distFromVertex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findTriangle</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(bool initial, bool goStraight=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAcquire</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAcquireTurnSpeed</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAdjustVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAngleBetween</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myApproachDistFromVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCloseDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data *</type>
      <name>myData</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFinalDistFromVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myGotLinesCounter</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myGotoVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIgnoreTriangleDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRangeDevice *</type>
      <name>myLaser</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLine1Length</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLine2Length</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLineFinder *</type>
      <name>myLineFinder</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArLineFinderSegment * &gt; *</type>
      <name>myLines</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLocalXOffset</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLocalYOffset</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxAngleMisalignment</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxDistBetweenLinePoints</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxLateralDist</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myOriginalAngle</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnLineFinder</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySaveData</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeed</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myThOffset</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTwoStageApproach</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseIgnoreInGoto</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myVertex</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myVertexSeen</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myVertexSeenLast</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myVertexUnseenStopMSecs</name>
      <anchorfile>classArActionTriangleDriveTo.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ArActionTriangleDriveTo::Data</class>
  </compound>
  <compound kind="class">
    <name>ArActionTriangleDriveTo::Data</name>
    <filename>classArActionTriangleDriveTo_1_1Data.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setApproach</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArPose approach)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinal</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArPose final)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinesAndVertex</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::map&lt; int, ArLineFinderSegment * &gt; *lines, ArPose vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexSeen</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(bool vertexSeen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexSeenThisCycle</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(bool vertexSeenThisCycle)</arglist>
    </member>
    <member kind="variable">
      <type>ArPose</type>
      <name>myApproach</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myApproachSet</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArPose</type>
      <name>myFinal</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myFinalSet</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; ArLineSegment &gt;</type>
      <name>myLines</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myLinesAndVertexSet</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArPose</type>
      <name>myVertex</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myVertexSeen</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myVertexSeenThisCycle</name>
      <anchorfile>classArActionTriangleDriveTo_1_1Data.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArActionTurn</name>
    <filename>classArActionTurn.html</filename>
    <base>ArAction</base>
    <member kind="function">
      <type></type>
      <name>ArActionTurn</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name=&quot;turn&quot;, double speedStartTurn=200, double speedFullTurn=100, double turnAmount=15)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>fire</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArActionDesired currentDesired)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>getDesired</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArActionTurn</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myDesired</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeedFull</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySpeedStart</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurnAmount</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTurning</name>
      <anchorfile>classArActionTurn.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArACTS_1_2</name>
    <filename>classArACTS__1__2.html</filename>
    <member kind="enumeration">
      <name>ActsConstants</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_CHANNELS</name>
      <anchor>w1w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_BLOBS</name>
      <anchor>w1w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTS_BLOB_DATA_SIZE</name>
      <anchor>w1w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_HEADER</name>
      <anchor>w1w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_DATA</name>
      <anchor>w1w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>actsHandler</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArACTS_1_2</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closePort</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBlob</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int channel, int blobNumber, ArACTSBlob *blob)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlobs</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <type>ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int width=160, int height=120)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openPort</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRobot *robot, const char *host=&quot;localhost&quot;, int port=5001)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>receiveBlobInfo</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestPacket</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestQuit</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobot</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArACTS_1_2</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getData</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(char *rawData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>invertX</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(int before)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>invertY</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(int before)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBlobIndex</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>[NUM_CHANNELS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBlobNum</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p1</anchor>
      <arglist>[NUM_CHANNELS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBlobsBad</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTcpConnection</type>
      <name>myConn</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myData</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p4</anchor>
      <arglist>[MAX_DATA]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myHeight</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInverted</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequested</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArACTS_1_2 &gt;</type>
      <name>mySensorTaskCB</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myWidth</name>
      <anchorfile>classArACTS__1__2.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArACTSBlob</name>
    <filename>classArACTSBlob.html</filename>
    <member kind="function">
      <type></type>
      <name>ArACTSBlob</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArea</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBottom</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLeft</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRight</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTop</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getYCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArea</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int left)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int top)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int xcg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int ycg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArACTSBlob</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myArea</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBottom</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLeft</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRight</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTop</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myXCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myYCG</name>
      <anchorfile>classArACTSBlob.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArAMPTU</name>
    <filename>classArAMPTU.html</filename>
    <base>ArPTZ</base>
    <member kind="function">
      <type></type>
      <name>ArAMPTU</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, int unitNumber=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canZoom</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pan</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panRel</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panSlew</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double panDeg, double tiltDeg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(double panDeg, double tiltDeg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>purge</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestStatus</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tiltRel</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltSlew</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArAMPTU</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArAMPTUPacket</type>
      <name>myPacket</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPan</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSlew</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTilt</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSlew</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myUnitNumber</name>
      <anchorfile>classArAMPTU.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArAMPTUCommands</name>
    <filename>classArAMPTUCommands.html</filename>
    <member kind="enumvalue">
      <name>ABSTILT</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELTILTU</name>
      <anchor>w0w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELTILTD</name>
      <anchor>w0w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSPAN</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELPANCW</name>
      <anchor>w0w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELPANCCW</name>
      <anchor>w0w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILT</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILTUCW</name>
      <anchor>w0w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILTDCW</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILTUCCW</name>
      <anchor>w0w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILTDCCW</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOM</name>
      <anchor>w0w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAUSE</name>
      <anchor>w0w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONT</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURGE</name>
      <anchor>w0w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS</name>
      <anchor>w0w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESP</name>
      <anchor>w0w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANSLEW</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILTSLEW</name>
      <anchor>w0w19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArAMPTUPacket</name>
    <filename>classArAMPTUPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArAMPTUPacket</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=30)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTypes::Byte2 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byteToBuf</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArTypes::Byte val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getUnitNumber</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setUnitNumber</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned char unitNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArAMPTUPacket</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myUnitNumber</name>
      <anchorfile>classArAMPTUPacket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArAnalogGyro</name>
    <filename>classArAnalogGyro.html</filename>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateGyroOnly</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArAnalogGyro</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>encoderCorrect</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArPoseWithTime deltaPose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverage</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getAverageTaken</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeading</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPacCount</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScalingFactor</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTemperature</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleGyroPacket</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGyroOnlyMode</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNoInternalData</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveGottenData</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGyroOnlyActive</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilterModel</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(double gyroSigma, double inertialVar, double rotVar, double transVar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogAnomalies</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(bool logAnomalies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScalingFactor</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stabilizingCallback</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>userTaskCallback</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArAnalogGyro</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>GyroType</name>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYRO_NONE</name>
      <anchor>x3x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYRO_ANALOG_COMPUTER</name>
      <anchor>x3x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYRO_ANALOG_CONTROLLER</name>
      <anchor>x3x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAccumulatedDelta</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAverageCount</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myAverageStarted</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAverageTotal</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; double, ArAnalogGyro, ArPoseWithTime &gt;</type>
      <name>myEncoderCorrectCB</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myGyroSigma</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GyroType</type>
      <name>myGyroType</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myGyroWorking</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArAnalogGyro, ArRobotPacket * &gt;</type>
      <name>myHandleGyroPacketCB</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasGyroOnlyMode</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasNoData</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveGottenData</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeading</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myInertialVarianceModel</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsActive</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsGyroOnlyActive</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastAverage</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastAverageTaken</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastHeading</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogAnomalies</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacCount</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacCurrentCount</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myReadingThisCycle</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotVarianceModel</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myScalingFactor</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArAnalogGyro &gt;</type>
      <name>myStabilizingCB</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTemperature</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimeLastPacket</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVarianceModel</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArAnalogGyro &gt;</type>
      <name>myUserTaskCB</name>
      <anchorfile>classArAnalogGyro.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArArg</name>
    <filename>classArArg.html</filename>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchor>w0w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID</name>
      <anchor>w10w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchor>w10w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchor>w10w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchor>w10w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchor>w10w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSE</name>
      <anchor>w10w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FUNCTOR</name>
      <anchor>w10w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCRIPTION_HOLDER</name>
      <anchor>w10w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_TYPE</name>
      <anchor>w10w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArArg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name, ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *setFunctor, ArRetFunctor&lt; const std::list&lt; ArArgumentBuilder * &gt; * &gt; *getFunctor, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *name, char *pointer, const char *description, size_t maxStrLen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *name, ArPose *pointer, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name, bool *pointer, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *name, double *pointer, const char *description=&quot;&quot;, double minDouble=-HUGE_VAL, double maxDouble=HUGE_VAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *name, int *pointer, const char *description=&quot;&quot;, int minInt=INT_MIN, int maxInt=INT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getArgsWithFunctor</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBool</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPriority::Priority</type>
      <name>getConfigPriority</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getConfigPrioritySet</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPose</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArArg &amp;</type>
      <name>operator=</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const ArArg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setArgWithFunctor</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(ArArgumentBuilder *argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBool</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfigPriority</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(ArPriority::Priority priority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPose</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setString</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArArg</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myBoolPointer</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPriority::Priority</type>
      <name>myConfigPriority</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myConfigPrioritySet</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDescription</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>myDoublePointer</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor&lt; const std::list&lt; ArArgumentBuilder * &gt; * &gt; *</type>
      <name>myGetFunctor</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>myIntPointer</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myMaxStrLen</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDouble</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinInt</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose *</type>
      <name>myPosePointer</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *</type>
      <name>mySetFunctor</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>myStringPointer</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArg::Type</type>
      <name>myType</name>
      <anchorfile>classArArg.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArArgumentBuilder</name>
    <filename>classArArgumentBuilder.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlain</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *str, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlainAsIs</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *str, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStrings</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int argc, char **argv, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStrings</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(char **argv, int argc, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStringsAsIs</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int argc, char **argv, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArgumentBuilder</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ArArgumentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArgumentBuilder</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(size_t argvLen=512, char extraSpaceChar= &apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressQuoted</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(bool stripQuotationMarks=false)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getArg</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(size_t whichArg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getArgBool</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(size_t whichArg, bool *ok=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getArgc</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getArgDouble</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(size_t whichArg, bool *ok=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArgInt</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(size_t whichArg, bool *ok=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>getArgv</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtraString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFullString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArgBool</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(size_t whichArg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArgDouble</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(size_t whichArg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArgInt</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(size_t whichArg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeArg</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(size_t which, bool isRebuildFullString=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuiet</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(bool isQuiet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArArgumentBuilder</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getArgvLen</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalAdd</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(const char *str, int position=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalAddAsIs</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *str, int position=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rebuildFullString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myArgc</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>myArgv</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myArgvLen</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myExtraSpace</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myExtraString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstAdd</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFullString</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsQuiet</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myOrigArgc</name>
      <anchorfile>classArArgumentBuilder.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArArgumentParser</name>
    <filename>classArArgumentParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addDefaultArgument</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *argument, int position=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArgumentParser</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArArgumentBuilder *builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArArgumentParser</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int *argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkArgument</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkArgumentVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkHelpAndWarnUnparsed</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned int numArgsOkay=0)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>checkParameterArgument</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *argument, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentBool</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *argument, bool *dest, bool *wasReallySet=NULL, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentBoolVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(bool *wasReallySet, bool *dest, const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentDouble</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *argument, double *dest, bool *wasReallySet=NULL, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentDoubleVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(bool *wasReallySet, double *dest, const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentFloat</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *argument, float *dest, bool *wasReallySet=NULL, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentFloatVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(bool *wasReallySet, float *dest, const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentInteger</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *argument, int *dest, bool *wasReallySet=NULL, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentIntegerVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(bool *wasReallySet, int *dest, const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentString</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *argument, const char **dest, bool *wasReallySet=NULL, bool returnFirst=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterArgumentStringVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(bool *wasReallySet, const char **dest, const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>checkParameterArgumentVar</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const char *argument,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getArg</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(size_t whichArg) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getArgc</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>getArgv</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStartingArguments</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWasReallySetOnlyTrue</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadDefaultArguments</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int positon=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeArg</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(size_t which)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWasReallySetOnlyTrue</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(bool wasReallySetOnlyTrue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArArgumentParser</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDefaultArgumentEnv</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *env)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDefaultArgumentFile</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logDefaultArgumentLocations</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>myArgc</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>myArgv</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentBuilder *</type>
      <name>myBuilder</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myEmptyArg</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p3</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHelp</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnBuilder</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myReallySetOnlyTrue</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingBuilder</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; bool &gt;</type>
      <name>ourDefaultArgumentLocIsFile</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; std::string &gt;</type>
      <name>ourDefaultArgumentLocs</name>
      <anchorfile>classArArgumentParser.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArASyncTask</name>
    <filename>classArASyncTask.html</filename>
    <base>ArThread</base>
    <member kind="function">
      <type></type>
      <name>ArASyncTask</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool joinable=true, bool lowerPriority=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getThreadActivity</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAsync</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runInThisThread</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void *arg=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void *arg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stopRunning</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArASyncTask</name>
      <anchorfile>classArASyncTask.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArBasePacket</name>
    <filename>classArBasePacket.html</filename>
    <member kind="function">
      <type></type>
      <name>ArBasePacket</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArBasePacket &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArBasePacket</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=0, ArTypes::UByte2 headerLength=0, char *buf=NULL, ArTypes::UByte2 footerLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::Byte</type>
      <name>bufToByte</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::Byte2</type>
      <name>bufToByte2</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::Byte4</type>
      <name>bufToByte4</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bufToData</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned char *data, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bufToData</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(char *data, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bufToStr</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(char *buf, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte</type>
      <name>bufToUByte</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>bufToUByte2</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte4</type>
      <name>bufToUByte4</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArTypes::Byte2 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte4ToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArTypes::Byte4 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byteToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ArTypes::Byte val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const unsigned char *data, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *data, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>duplicatePacket</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ArBasePacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>empty</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getDataLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getDataReadLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getFooterLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getHeaderLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getMaxLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTypes::UByte2</type>
      <name>getReadLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArBasePacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const ArBasePacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printHex</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRead</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetValid</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(char *buf, ArTypes::UByte2 bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setHeaderLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ArTypes::UByte2 length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ArTypes::UByte2 length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(ArTypes::UByte2 bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(ArTypes::UByte2 readLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>strNToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const char *str, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>strToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>strToBufPadded</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const char *str, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uByte2ToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(ArTypes::UByte2 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uByte4ToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(ArTypes::UByte4 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uByteToBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(ArTypes::UByte val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArBasePacket</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasWriteCapacity</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int bytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNextGood</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(int bytes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>myBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myFooterLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myHeaderLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsValid</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myMaxLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnMyBuf</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myReadLength</name>
      <anchorfile>classArBasePacket.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArBumpers</name>
    <filename>classArBumpers.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type>void</type>
      <name>addBumpToBuffer</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int bumpValue, int whichBumper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArBumpers</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(size_t currentBufferSize=30, size_t cumulativeBufferSize=30, const char *name=&quot;bumpers&quot;, int maxSecondsToKeepCurrent=15, double angleRange=135)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAngleRange</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBumpMask</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArBumpers &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArBumpers.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCallbackList</name>
    <filename>classArCallbackList.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArCallbackList</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;&quot;, ArLog::LogLevel logLevel=ArLog::Verbose, bool singleShot=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invoke</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remCallback</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArLog::LogLevel logLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNameVar</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *name,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingleShot</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(bool singleShot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArCallbackList</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; int, ArFunctor * &gt;</type>
      <name>myList</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myLogLevel</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySingleShot</name>
      <anchorfile>classArCallbackList.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCameraCollection</name>
    <filename>classArCameraCollection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addCamera</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *cameraName, const char *cameraType, const char *displayName, const char *displayType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addCameraCommand</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *cameraName, const char *command, const char *cameraCommandName, int requestInterval=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addModifiedCB</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addParameter</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *cameraName, ArCameraParameterSource *source, const ArConfigArg &amp;param)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArCameraCollection</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endUpdate</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exists</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *cameraName, const char *command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exists</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCameraCommands</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *cameraName, std::list&lt; std::string &gt; &amp;outList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCameraNames</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(std::list&lt; std::string &gt; &amp;outList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCameraType</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCommandName</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *cameraName, const char *command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayName</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayType</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParameter</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *cameraName, const char *parameterName, ArConfigArg &amp;paramOut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getParameterNames</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *cameraName, std::list&lt; std::string &gt; &amp;outList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRequestInterval</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *cameraName, const char *command)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lock</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parameterExists</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const char *cameraName, const char *paramName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeCamera</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeCameraCommand</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const char *cameraName, const char *command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeModifiedCB</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeParameter</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const char *cameraName, const char *paramName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setParameter</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const char *cameraName, const ArConfigArg &amp;param)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startUpdate</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryLock</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlock</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArCameraCollection</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CameraInfo *</type>
      <name>findCameraInfo</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const char *cameraName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CommandInfo *</type>
      <name>findCommandInfo</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(const char *cameraName, const char *commandName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamInfo *</type>
      <name>findParamInfo</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *cameraName, const char *paramName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notifyModifiedListeners</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setModified</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, CameraInfo * &gt;</type>
      <name>myCameraToInfoMap</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsModified</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsUpdatesEnabled</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myModifiedCBList</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArCameraCollection.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ArCameraCollection::CameraInfo</class>
    <class kind="struct">ArCameraCollection::CommandInfo</class>
    <class kind="struct">ArCameraCollection::ParamInfo</class>
  </compound>
  <compound kind="struct">
    <name>ArCameraCollection::CameraInfo</name>
    <filename>structArCameraCollection_1_1CameraInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>CameraInfo</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CameraInfo</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myCameraName</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myCameraType</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, CommandInfo * &gt;</type>
      <name>myCommandToInfoMap</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myDisplayName</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myDisplayType</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, ParamInfo * &gt;</type>
      <name>myParamToInfoMap</name>
      <anchorfile>structArCameraCollection_1_1CameraInfo.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArCameraCollection::CommandInfo</name>
    <filename>structArCameraCollection_1_1CommandInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>CommandInfo</name>
      <anchorfile>structArCameraCollection_1_1CommandInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CommandInfo</name>
      <anchorfile>structArCameraCollection_1_1CommandInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myCameraCommandName</name>
      <anchorfile>structArCameraCollection_1_1CommandInfo.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myCommand</name>
      <anchorfile>structArCameraCollection_1_1CommandInfo.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myRequestInterval</name>
      <anchorfile>structArCameraCollection_1_1CommandInfo.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArCameraCollection::ParamInfo</name>
    <filename>structArCameraCollection_1_1ParamInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>ParamInfo</name>
      <anchorfile>structArCameraCollection_1_1ParamInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParamInfo</name>
      <anchorfile>structArCameraCollection_1_1ParamInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ArConfigArg</type>
      <name>myParam</name>
      <anchorfile>structArCameraCollection_1_1ParamInfo.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArCameraParameterSource *</type>
      <name>mySource</name>
      <anchorfile>structArCameraCollection_1_1ParamInfo.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCameraCollectionItem</name>
    <filename>classArCameraCollectionItem.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToCameraCollection</name>
      <anchorfile>classArCameraCollectionItem.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArCameraCollection &amp;collection)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArCameraCollectionItem</name>
      <anchorfile>classArCameraCollectionItem.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getCameraName</name>
      <anchorfile>classArCameraCollectionItem.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArCameraCollectionItem</name>
      <anchorfile>classArCameraCollectionItem.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCameraCommands</name>
    <filename>classArCameraCommands.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>CAMERA_MODE_UPDATED</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_CAMERA_DATA</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_CAMERA_DATA_INT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_CAMERA_INFO</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_CAMERA_INFO_INT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_CAMERA_MODE_LIST</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_DISPLAY</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_PICTURE</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_PICTURE_OPTIM</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_SNAPSHOT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_SNAPSHOT_PLAIN</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>GET_VIDEO</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>RESET_CAMERA</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_ABS</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_ABS_INT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_MODE</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_PCT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_PCT_INT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_REL</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SET_CAMERA_REL_INT</name>
      <anchorfile>classArCameraCommands.html</anchorfile>
      <anchor>s19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCameraParameterSource</name>
    <filename>classArCameraParameterSource.html</filename>
    <base>ArCameraCollectionItem</base>
    <member kind="function">
      <type></type>
      <name>ArCameraParameterSource</name>
      <anchorfile>classArCameraParameterSource.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getParameter</name>
      <anchorfile>classArCameraParameterSource.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *paramName, ArConfigArg &amp;paramOut)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setParameter</name>
      <anchorfile>classArCameraParameterSource.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArConfigArg &amp;param)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArCameraParameterSource</name>
      <anchorfile>classArCameraParameterSource.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArColor</name>
    <filename>classArColor.html</filename>
    <member kind="function">
      <type></type>
      <name>ArColor</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::Byte4 rgbValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArColor</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArColor</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned char red, unsigned char green, unsigned char blue)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::Byte4</type>
      <name>colorToByte4</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getBlue</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getGreen</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getRed</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArColor</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myBlue</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myGreen</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myRed</name>
      <anchorfile>classArColor.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCommands</name>
    <filename>classArCommands.html</filename>
    <member kind="enumeration">
      <name>Commands</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PULSE</name>
      <anchor>w6w53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN</name>
      <anchor>w6w39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSE</name>
      <anchor>w6w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POLLING</name>
      <anchor>w6w41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENABLE</name>
      <anchor>w6w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETA</name>
      <anchor>w6w58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETV</name>
      <anchor>w6w64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETO</name>
      <anchor>w6w60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE</name>
      <anchor>w6w31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROTATE</name>
      <anchor>w6w55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETRV</name>
      <anchor>w6w62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VEL</name>
      <anchor>w6w83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEAD</name>
      <anchor>w6w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DHEAD</name>
      <anchor>w6w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAY</name>
      <anchor>w6w57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFIG</name>
      <anchor>w6w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENCODER</name>
      <anchor>w6w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RVEL</name>
      <anchor>w6w56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DCHEAD</name>
      <anchor>w6w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETRA</name>
      <anchor>w6w61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SONAR</name>
      <anchor>w6w75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STOP</name>
      <anchor>w6w79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGOUT</name>
      <anchor>w6w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VEL2</name>
      <anchor>w6w84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPER</name>
      <anchor>w6w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADSEL</name>
      <anchor>w6w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPERVAL</name>
      <anchor>w6w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPERPACREQUEST</name>
      <anchor>w6w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IOREQUEST</name>
      <anchor>w6w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PTUPOS</name>
      <anchor>w6w52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TTY2</name>
      <anchor>w6w81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GETAUX</name>
      <anchor>w6w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUMPSTALL</name>
      <anchor>w6w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCM2</name>
      <anchor>w6w80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOYDRIVE</name>
      <anchor>w6w25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVINGBLINK</name>
      <anchor>w6w32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOSTBAUD</name>
      <anchor>w6w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUX1BAUD</name>
      <anchor>w6w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUX2BAUD</name>
      <anchor>w6w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ESTOP</name>
      <anchor>w6w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYRO</name>
      <anchor>w6w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOADPARAM</name>
      <anchor>w6w29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_LOADPARAM</name>
      <anchor>w6w34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDSIM</name>
      <anchor>w6w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_EXIT</name>
      <anchor>w6w33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOADWORLD</name>
      <anchor>w6w30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_LOADWORLD</name>
      <anchor>w6w35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP</name>
      <anchor>w6w78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_STEP</name>
      <anchor>w6w38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALCOMP</name>
      <anchor>w6w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETSIMORIGINTH</name>
      <anchor>w6w63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_SETORIGINTH</name>
      <anchor>w6w37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESETSIMTOORIGIN</name>
      <anchor>w6w54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLDSIM_RESETTOORIGIN</name>
      <anchor>w6w36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOUND</name>
      <anchor>w6w76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLAYLIST</name>
      <anchor>w6w40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOUNDTOG</name>
      <anchor>w6w77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_PC</name>
      <anchor>w6w49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_LRF</name>
      <anchor>w6w47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_5V</name>
      <anchor>w6w44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_12V</name>
      <anchor>w6w42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_24V</name>
      <anchor>w6w43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_AUX_PC</name>
      <anchor>w6w46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_TOUCHSCREEN</name>
      <anchor>w6w51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_PTZ</name>
      <anchor>w6w50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_AUDIO</name>
      <anchor>w6w45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER_LRF2</name>
      <anchor>w6w48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATVEL</name>
      <anchor>w6w28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATACCEL</name>
      <anchor>w6w27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETLATV</name>
      <anchor>w6w59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_SET_POSE</name>
      <anchor>w6w73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_RESET</name>
      <anchor>w6w72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LRF_ENABLE</name>
      <anchor>w6w67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LRF_SET_FOV_START</name>
      <anchor>w6w69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LRF_SET_FOV_END</name>
      <anchor>w6w68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LRF_SET_RES</name>
      <anchor>w6w70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_CTRL</name>
      <anchor>w6w65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_STAT</name>
      <anchor>w6w74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_MESSAGE</name>
      <anchor>w6w71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_EXIT</name>
      <anchor>w6w66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCompassConnector</name>
    <filename>classArCompassConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>ArCompassConnector</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArArgumentParser *argParser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTCM2 *) const </arglist>
    </member>
    <member kind="function">
      <type>ArTCM2 *</type>
      <name>create</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myArgParser</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeviceType</type>
      <name>myDeviceType</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArCompassConnector &gt;</type>
      <name>myLogArgsCallback</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArCompassConnector &gt;</type>
      <name>myParseArgsCallback</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>mySerialPort</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>mySerialTCMReadFunctor</name>
      <anchorfile>classArCompassConnector.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArCondition</name>
    <filename>classArCondition.html</filename>
    <member kind="enumvalue">
      <name>STATUS_FAILED</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED_DESTROY</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED_INIT</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_WAIT_TIMEDOUT</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_WAIT_INTR</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_MUTEX_FAILED_INIT</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_MUTEX_FAILED</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pthread_cond_t</type>
      <name>CondType</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArCondition</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getError</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int messageNumber) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timedWait</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(unsigned int msecs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArCondition</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CondType</type>
      <name>myCond</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFailedInit</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArStrMap</type>
      <name>ourStrMap</name>
      <anchorfile>classArCondition.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConfig</name>
    <filename>classArConfig.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addComment</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *comment, const char *sectionName=&quot;&quot;, ArPriority::Priority priority=ArPriority::NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParam</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArConfigArg &amp;arg, const char *sectionName=&quot;&quot;, ArPriority::Priority priority=ArPriority::NORMAL, const char *displayHint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProcessFileCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRetFunctor2&lt; bool, char *, size_t &gt; *functor, int priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProcessFileCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor, int priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProcessFileWithErrorCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRetFunctor2&lt; bool, char *, size_t &gt; *functor, int priority=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addSectionFlags</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *sectionName, const char *flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfig</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ArConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfig</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *baseDirectory=NULL, bool noBlanksBetweenParams=false, bool ignoreBounds=false, bool failOnBadSection=false, bool saveUnknown=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>callProcessFileCallBacks</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(bool continueOnError, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAll</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllValueSet</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSections</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArConfigSection *</type>
      <name>findSection</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *sectionName) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileName</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNoBlanksBetweenParams</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLog::LogLevel</type>
      <name>getProcessFileCallbacksLogLevel</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSaveUnknown</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArConfigSection * &gt; *</type>
      <name>getSections</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(bool isSummary=true)</arglist>
    </member>
    <member kind="function">
      <type>ArConfig &amp;</type>
      <name>operator=</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const ArConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgument</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ArArgumentBuilder *arg, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgumentParser</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(ArArgumentParser *parser, bool continueOnError=false, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFile</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const char *fileName, bool continueOnError=false, bool noFileNotFoundMessage=false, char *errorBuffer=NULL, size_t errorBufferLen=0, std::list&lt; std::string &gt; *sectionsToParse=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseSection</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ArArgumentBuilder *arg, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseUnknown</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(ArArgumentBuilder *arg, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processFile</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllUnsetValues</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remProcessFileCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(ArRetFunctor2&lt; bool, char *, size_t &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remProcessFileCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remSectionFlag</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const char *sectionName, const char *flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const char *baseDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConfigName</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const char *configName, const char *robotName=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoBlanksBetweenParams</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(bool noBlanksBetweenParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessFileCallbacksLogLevel</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuiet</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(bool isQuiet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSaveUnknown</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(bool saveUnknown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSectionComment</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const char *sectionName, const char *comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useArgumentParser</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(ArArgumentParser *parser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFile</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const char *fileName, bool append=false, std::set&lt; std::string &gt; *alreadyWritten=NULL, bool writePriorities=false, std::list&lt; std::string &gt; *sectionsToWrite=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConfig</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addParserHandlers</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySectionsToParse</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(std::list&lt; std::string &gt; *from)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeSection</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArConfigSection *section, FILE *file, std::set&lt; std::string &gt; *alreadyWritten, bool writePriorities)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myArgumentParser</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDirectory</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myConfigName</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDuplicateParams</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFailOnBadSection</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFileName</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreBounds</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsQuiet</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLogPrefix</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNoBlanksBetweenParams</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFileParser</type>
      <name>myParser</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor3C&lt; bool, ArConfig, ArArgumentBuilder *, char *, size_t &gt;</type>
      <name>myParserCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myProcessFileCallbacksLogLevel</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; int, ProcessFileCBType * &gt;</type>
      <name>myProcessFileCBList</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myRobotName</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySaveUnknown</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mySection</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySectionBroken</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor3C&lt; bool, ArConfig, ArArgumentBuilder *, char *, size_t &gt;</type>
      <name>mySectionCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySectionIgnored</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArConfigSection * &gt;</type>
      <name>mySections</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt; *</type>
      <name>mySectionsToParse</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor3C&lt; bool, ArConfig, ArArgumentBuilder *, char *, size_t &gt;</type>
      <name>myUnknownCB</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingSections</name>
      <anchorfile>classArConfig.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ArConfig::ProcessFileCBType</class>
  </compound>
  <compound kind="class">
    <name>ArConfig::ProcessFileCBType</name>
    <filename>classArConfig_1_1ProcessFileCBType.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(char *errorBuffer, size_t errorBufferLen)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveFunctor</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveFunctor</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRetFunctor2&lt; bool, char *, size_t &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessFileCBType</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessFileCBType</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArRetFunctor2&lt; bool, char *, size_t &gt; *functor)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor&lt; bool &gt; *</type>
      <name>myCallback</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor2&lt; bool, char *, size_t &gt; *</type>
      <name>myCallbackWithError</name>
      <anchorfile>classArConfig_1_1ProcessFileCBType.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConfigArg</name>
    <filename>classArConfigArg.html</filename>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchor>w0w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID</name>
      <anchor>w11w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchor>w11w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchor>w11w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchor>w11w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchor>w11w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FUNCTOR</name>
      <anchor>w11w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCRIPTION_HOLDER</name>
      <anchor>w11w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_HOLDER</name>
      <anchor>w11w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPARATOR</name>
      <anchor>w11w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_TYPE</name>
      <anchor>w11w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArConfigArg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name, const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *str, Type type=DESCRIPTION_HOLDER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *name, ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *setFunctor, ArRetFunctor&lt; const std::list&lt; ArArgumentBuilder * &gt; * &gt; *getFunctor, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name, bool val, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *name, double val, const char *description=&quot;&quot;, double minDouble=-HUGE_VAL, double maxDouble=HUGE_VAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *name, int val, const char *description=&quot;&quot;, int minInt=INT_MIN, int maxInt=INT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *name, char *str, const char *description, size_t maxStrLen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *name, bool *pointer, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *name, double *pointer, const char *description=&quot;&quot;, double minDouble=-HUGE_VAL, double maxDouble=HUGE_VAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *name, unsigned char *pointer, const char *description=&quot;&quot;, int minInt=0, int maxInt=255)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *name, unsigned short *pointer, const char *description=&quot;&quot;, int minInt=0, int maxInt=USHRT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *name, short *pointer, const char *description=&quot;&quot;, int minInt=SHRT_MIN, int maxInt=SHRT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *name, int *pointer, const char *description=&quot;&quot;, int minInt=INT_MIN, int maxInt=INT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValueSet</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getArgsWithFunctor</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBool</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPriority::Priority</type>
      <name>getConfigPriority</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDisplayHint</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArConfigArg::Type</type>
      <name>getType</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValueEqual</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const ArConfigArg &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValueSet</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(bool verbose=false) const </arglist>
    </member>
    <member kind="function">
      <type>ArConfigArg &amp;</type>
      <name>operator=</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const ArConfigArg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setArgWithFunctor</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ArArgumentBuilder *argument, char *errorBuffer=NULL, size_t errorBufferLen=0, bool doNotSet=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBool</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(bool val, char *errorBuffer=NULL, size_t errorBufferLen=0, bool doNotSet=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfigPriority</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(ArPriority::Priority priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayHint</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const char *hintText)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(double val, char *errorBuffer=NULL, size_t errorBufferLen=0, bool doNotSet=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreBounds</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(bool ignoreBounds=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(int val, char *errorBuffer=NULL, size_t errorBufferLen=0, bool doNotSet=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setString</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const char *str, char *errorBuffer=NULL, size_t errorBufferLen=0, bool doNotSet=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setValue</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const ArConfigArg &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConfigArg</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>IntType</name>
      <anchor>x5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_NOT</name>
      <anchor>x5x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_INT</name>
      <anchor>x5x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_SHORT</name>
      <anchor>x5x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_UNSIGNED_SHORT</name>
      <anchor>x5x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_UNSIGNED_CHAR</name>
      <anchor>x5x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myBoolPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPriority::Priority</type>
      <name>myConfigPriority</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDescription</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDisplayHint</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>myDoublePointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor&lt; const std::list&lt; ArArgumentBuilder * &gt; * &gt; *</type>
      <name>myGetFunctor</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreBounds</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>myIntPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short *</type>
      <name>myIntShortPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConfigArg::IntType</type>
      <name>myIntType</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>myIntUnsignedCharPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short *</type>
      <name>myIntUnsignedShortPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myMaxStrLen</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDouble</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinInt</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnPointedTo</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *</type>
      <name>mySetFunctor</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myString</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>myStringPointer</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConfigArg::Type</type>
      <name>myType</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingOwnedString</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myValueSet</name>
      <anchorfile>classArConfigArg.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConfigGroup</name>
    <filename>classArConfigGroup.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addConfig</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigGroup</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *baseDirectory=NULL)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFile</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *fileName, bool continueOnError=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reloadFile</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(bool continueOnError=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remConfig</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArConfig *config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *baseDirectory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFile</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArConfigGroup</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDirectory</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArConfig * &gt;</type>
      <name>myConfigs</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLastFile</name>
      <anchorfile>classArConfigGroup.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConfigSection</name>
    <filename>classArConfigSection.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addFlags</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *flags, bool isQuiet=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigSection</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArConfigSection &amp;section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConfigSection</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name=NULL, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ArConfigArg *</type>
      <name>findParam</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *paramName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getComment</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFlags</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArConfigArg &gt; *</type>
      <name>getParams</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFlag</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *flag) const </arglist>
    </member>
    <member kind="function">
      <type>ArConfigSection &amp;</type>
      <name>operator=</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ArConfigSection &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remFlag</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *dataFlag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remStringHolder</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *paramName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myComment</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentBuilder *</type>
      <name>myFlags</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArConfigArg &gt;</type>
      <name>myParams</name>
      <anchorfile>classArConfigSection.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstFunctor1C</name>
    <filename>classArConstFunctor1C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <base>ArFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstFunctor1C</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstFunctor1C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstFunctor2C</name>
    <filename>classArConstFunctor2C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstFunctor2C</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstFunctor2C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstFunctor3C</name>
    <filename>classArConstFunctor3C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstFunctor3C</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArConstFunctor3C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstFunctor4C</name>
    <filename>classArConstFunctor4C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstFunctor4C</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArConstFunctor4C.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstFunctorC</name>
    <filename>classArConstFunctorC.html</filename>
    <templarg>T</templarg>
    <base>ArFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArConstFunctorC</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(void) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctorC</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T &amp;obj, void(T::*func)(void) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstFunctorC</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstFunctorC</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstFunctorC.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstRetFunctor1C</name>
    <filename>classArConstRetFunctor1C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <base>ArRetFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstRetFunctor1C</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstRetFunctor1C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstRetFunctor2C</name>
    <filename>classArConstRetFunctor2C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArRetFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstRetFunctor2C</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstRetFunctor2C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstRetFunctor3C</name>
    <filename>classArConstRetFunctor3C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArRetFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstRetFunctor3C</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArConstRetFunctor3C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstRetFunctor4C</name>
    <filename>classArConstRetFunctor4C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArRetFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4) const, P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstRetFunctor4C</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArConstRetFunctor4C.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArConstRetFunctorC</name>
    <filename>classArConstRetFunctorC.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <base>ArRetFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctorC</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(void) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctorC</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(void) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArConstRetFunctorC</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArConstRetFunctorC</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArConstRetFunctorC.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDaemonizer</name>
    <filename>classArDaemonizer.html</filename>
    <member kind="function">
      <type></type>
      <name>ArDaemonizer</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int *argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>daemonize</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forceDaemonize</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDaemonized</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArDaemonizer</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsDaemonized</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConstFunctorC&lt; ArDaemonizer &gt;</type>
      <name>myLogOptionsCB</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser</type>
      <name>myParser</name>
      <anchorfile>classArDaemonizer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDataLogger</name>
    <filename>classArDataLogger.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addString</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArConfig *config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArDataLogger</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot, const char *fileName=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor3&lt; const char *, ArTypes::UByte2, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; * &gt; *</type>
      <name>getAddStringFunctor</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArDataLogger</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectCallback</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processFile</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(char *errorBuffer, size_t errorBufferLen)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>userTask</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddedToConfig</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor3C&lt; ArDataLogger, const char *, ArTypes::UByte2, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; * &gt;</type>
      <name>myAddStringFunctor</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddToConfigAtConnect</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAnalogCount</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myAnalogEnabled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAnalogVoltageCount</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myAnalogVoltageEnabled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConfig *</type>
      <name>myConfig</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myConfigFileName</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p8</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myConfigLogging</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myConfigLogInterval</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArDataLogger &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDigInCount</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myDigInEnabled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDigOutCount</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>myDigOutEnabled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>myFile</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastLogged</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogChargeState</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogCorrectedEncoderPose</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogEncoderPose</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogEncoders</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogFaultFlags</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogFlags</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogLeftStalled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogLeftVel</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogPose</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogRightStalled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogRightVel</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogRotVel</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogStallBits</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogTransVel</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogVoltage</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myMaxMaxLength</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myOpenedFileName</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p35</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPermanentFileName</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor2C&lt; bool, ArDataLogger, char *, size_t &gt;</type>
      <name>myProcessFileCB</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArStringInfoHolder * &gt;</type>
      <name>myStrings</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStringsCount</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool * &gt;</type>
      <name>myStringsEnabled</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArDataLogger &gt;</type>
      <name>myUserTaskCB</name>
      <anchorfile>classArDataLogger.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArDataTagCaseCmpOp</name>
    <filename>structArDataTagCaseCmpOp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArDataTagCaseCmpOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDeviceConnection</name>
    <filename>classArDeviceConnection.html</filename>
    <member kind="enumeration">
      <name>Status</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NEVER_OPENED</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OPEN</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OPEN_FAILED</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CLOSED_NORMALLY</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CLOSED_ERROR</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArDeviceConnection</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getOpenMessage</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int messageNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStatusMessage</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int messageNumber) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArTime</type>
      <name>getTimeRead</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTimeStamping</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>openSimple</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *data, unsigned int size, unsigned int msWait=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *data, unsigned int size)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>writePacket</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArBasePacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArDeviceConnection</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildStrMap</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArStrMap</type>
      <name>ourStrMap</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourStrMapInited</name>
      <anchorfile>classArDeviceConnection.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDPPTU</name>
    <filename>classArDPPTU.html</filename>
    <base>ArPTZ</base>
    <member kind="function">
      <type></type>
      <name>ArDPPTU</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, DeviceType deviceType=PANTILT_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>awaitExec</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>basePanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>baseTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blank</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canZoom</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disableReset</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disMon</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enMon</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>factorySet</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBasePanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBaseTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haltAll</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haltPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haltTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>highMotPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>immedExec</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>indepMove</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initMon</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(double deg1, double deg2, double deg3, double deg4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>limitEnforce</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowerPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowerTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowMotPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowStatPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>offStatPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panRel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panSlewRel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(double pdeg, double tdeg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(double pdeg, double tdeg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>regMotPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>regStatPower</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetAll</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetCalib</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreSet</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveSet</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>slaveExec</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltRel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltSlewRel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upperPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upperTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>velMove</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArDPPTU</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preparePacket</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBasePanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBaseTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeviceType</type>
      <name>myDeviceType</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDPPTUPacket</type>
      <name>myPacket</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPan</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myPanConvert</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTilt</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltAccel</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myTiltConvert</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSlew</name>
      <anchorfile>classArDPPTU.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDPPTUCommands</name>
    <filename>classArDPPTUCommands.html</filename>
    <member kind="enumvalue">
      <name>DELIM</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchor>w0w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCEL</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASE</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISABLE</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENABLE</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FACTORY</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HALT</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMMED</name>
      <anchor>w0w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMIT</name>
      <anchor>w0w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONITOR</name>
      <anchor>w0w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OFFSET</name>
      <anchor>w0w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAN</name>
      <anchor>w0w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESET</name>
      <anchor>w0w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPEED</name>
      <anchor>w0w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILT</name>
      <anchor>w0w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchor>w0w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VELOCITY</name>
      <anchor>w0w19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDPPTUPacket</name>
    <filename>classArDPPTUPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArDPPTUPacket</name>
      <anchorfile>classArDPPTUPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=30)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArDPPTUPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArDPPTUPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArDPPTUPacket</name>
      <anchorfile>classArDPPTUPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArDrawingData</name>
    <filename>classArDrawingData.html</filename>
    <member kind="enumvalue">
      <name>DEFAULT_REFRESH_TIME</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArDrawingData</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *shape, ArColor primaryColor, int size, int layer, unsigned int defaultRefreshTime, ArColor secondaryColor, const char *visibility=&quot;DefaultOn&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArDrawingData</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *shape, ArColor primaryColor, int size, int layer, unsigned int defaultRefreshTime=DEFAULT_REFRESH_TIME, const char *visibility=&quot;DefaultOn&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefaultRefreshTime</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLayer</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArColor</type>
      <name>getPrimaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArColor</type>
      <name>getSecondaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getShape</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVisibility</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultRefreshTime</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(unsigned int refreshTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayer</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int layer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArColor color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecondaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArColor color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisibility</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *visibility)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArDrawingData</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myDefaultRefreshTime</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLayer</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArColor</type>
      <name>myPrimaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArColor</type>
      <name>mySecondaryColor</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myShape</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySize</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myVisibility</name>
      <anchorfile>classArDrawingData.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArECEFCoords</name>
    <filename>classArECEFCoords.html</filename>
    <base>Ar3DPoint</base>
    <member kind="function">
      <type></type>
      <name>ArECEFCoords</name>
      <anchorfile>classArECEFCoords.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>ArENUCoords</type>
      <name>ECEF2ENU</name>
      <anchorfile>classArECEFCoords.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArECEFCoords ref)</arglist>
    </member>
    <member kind="function">
      <type>ArLLACoords</type>
      <name>ECEF2LLA</name>
      <anchorfile>classArECEFCoords.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArENUCoords</name>
    <filename>classArENUCoords.html</filename>
    <base>Ar3DPoint</base>
    <member kind="function">
      <type></type>
      <name>ArENUCoords</name>
      <anchorfile>classArENUCoords.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>ArECEFCoords</type>
      <name>ENU2ECEF</name>
      <anchorfile>classArENUCoords.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArLLACoords ref)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEast</name>
      <anchorfile>classArENUCoords.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNorth</name>
      <anchorfile>classArENUCoords.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getUp</name>
      <anchorfile>classArENUCoords.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFileParser</name>
    <filename>classArFileParser.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addHandler</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *keyword, ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addHandlerWithError</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *keyword, ArRetFunctor3&lt; bool, ArArgumentBuilder *, char *, size_t &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFileParser</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *baseDirectory=&quot;./&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCommentDelimiters</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFile</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(FILE *file, char *buffer, int bufferLength, bool continueOnErrors=true, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFile</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *fileName, bool continueOnErrors=true, bool noFileNotFoundMessage=false, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseLine</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(char *line, char *errorBuffer=NULL, size_t errorBufferLen=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remHandler</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRetFunctor3&lt; bool, ArArgumentBuilder *, char *, size_t &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remHandler</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remHandler</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *keyword, bool logIfCannotFind=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCounters</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *baseDirectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommentDelimiters</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;delimiters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumArguments</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(size_t maxNumArguments=512)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreParseFunctor</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuiet</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(bool isQuiet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArFileParser</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDir</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myCommentDelimiterList</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsQuiet</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLineNumber</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, HandlerCBType *, ArStrCaseCmpOp &gt;</type>
      <name>myMap</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myMaxNumArguments</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1&lt; const char * &gt; *</type>
      <name>myPreParseFunctor</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HandlerCBType *</type>
      <name>myRemainderHandler</name>
      <anchorfile>classArFileParser.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArForbiddenRangeDevice</name>
    <filename>classArForbiddenRangeDevice.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type></type>
      <name>ArForbiddenRangeDevice</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArMapInterface *armap, double distanceIncrement=100, unsigned int maxRange=4000, const char *name=&quot;forbidden&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getDisableCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getEnableCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMap</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArForbiddenRangeDevice</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArForbiddenRangeDevice &gt;</type>
      <name>myDisableCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistanceIncrement</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArForbiddenRangeDevice &gt;</type>
      <name>myEnableCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsEnabled</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapInterface *</type>
      <name>myMap</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArForbiddenRangeDevice &gt;</type>
      <name>myMapChangedCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArForbiddenRangeDevice &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArLineSegment * &gt;</type>
      <name>mySegments</name>
      <anchorfile>classArForbiddenRangeDevice.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor</name>
    <filename>classArFunctor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNameVar</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *name,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArFunctor.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor1</name>
    <filename>classArFunctor1.html</filename>
    <templarg>P1</templarg>
    <base>ArFunctor</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor1.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor1.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor1</name>
      <anchorfile>classArFunctor1.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor1C</name>
    <filename>classArFunctor1C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <base>ArFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor1C</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArFunctor1C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor2</name>
    <filename>classArFunctor2.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArFunctor1</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor2</name>
      <anchorfile>classArFunctor2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor2C</name>
    <filename>classArFunctor2C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor2C</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArFunctor2C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor3</name>
    <filename>classArFunctor3.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArFunctor2</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor3</name>
      <anchorfile>classArFunctor3.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor3C</name>
    <filename>classArFunctor3C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor3C</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArFunctor3C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor4</name>
    <filename>classArFunctor4.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArFunctor3</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor4</name>
      <anchorfile>classArFunctor4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctor4C</name>
    <filename>classArFunctor4C.html</filename>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T *obj, void(T::*func)(P1, P2, P3, P4))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T &amp;obj, void(T::*func)(P1, P2, P3, P4))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctor4C</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArFunctor4C.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctorASyncTask</name>
    <filename>classArFunctorASyncTask.html</filename>
    <base>ArASyncTask</base>
    <member kind="function">
      <type></type>
      <name>ArFunctorASyncTask</name>
      <anchorfile>classArFunctorASyncTask.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRetFunctor1&lt; void *, void * &gt; *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArFunctorASyncTask.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctorASyncTask</name>
      <anchorfile>classArFunctorASyncTask.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1&lt; void *, void * &gt; *</type>
      <name>myFunc</name>
      <anchorfile>classArFunctorASyncTask.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArFunctorC</name>
    <filename>classArFunctorC.html</filename>
    <templarg>T</templarg>
    <base>ArFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArFunctorC</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, void(T::*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctorC</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T &amp;obj, void(T::*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArFunctorC</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArFunctorC</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArFunctorC.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalFunctor</name>
    <filename>classArGlobalFunctor.html</filename>
    <base>ArFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor</name>
      <anchorfile>classArGlobalFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void(*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor</name>
      <anchorfile>classArGlobalFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalFunctor</name>
      <anchorfile>classArGlobalFunctor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalFunctor.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalFunctor1</name>
    <filename>classArGlobalFunctor1.html</filename>
    <templarg>P1</templarg>
    <base>ArFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void(*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void(*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalFunctor1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalFunctor1.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalFunctor2</name>
    <filename>classArGlobalFunctor2.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void(*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void(*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void(*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalFunctor2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalFunctor2.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalFunctor3</name>
    <filename>classArGlobalFunctor3.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void(*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void(*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void(*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void(*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalFunctor3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArGlobalFunctor3.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalFunctor4</name>
    <filename>classArGlobalFunctor4.html</filename>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void(*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void(*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void(*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void(*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void(*func)(P1, P2, P3, P4))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalFunctor4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArGlobalFunctor4.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalRetFunctor</name>
    <filename>classArGlobalRetFunctor.html</filename>
    <templarg>Ret</templarg>
    <base>ArRetFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor</name>
      <anchorfile>classArGlobalRetFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Ret(*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor</name>
      <anchorfile>classArGlobalRetFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalRetFunctor</name>
      <anchorfile>classArGlobalRetFunctor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalRetFunctor.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalRetFunctor1</name>
    <filename>classArGlobalRetFunctor1.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <base>ArRetFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Ret(*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Ret(*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalRetFunctor1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalRetFunctor1.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalRetFunctor2</name>
    <filename>classArGlobalRetFunctor2.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArRetFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Ret(*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Ret(*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Ret(*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalRetFunctor2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalRetFunctor2.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalRetFunctor3</name>
    <filename>classArGlobalRetFunctor3.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArRetFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Ret(*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Ret(*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Ret(*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(Ret(*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalRetFunctor3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArGlobalRetFunctor3.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGlobalRetFunctor4</name>
    <filename>classArGlobalRetFunctor4.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArRetFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Ret(*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Ret(*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Ret(*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(Ret(*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(Ret(*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGlobalRetFunctor4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(*</type>
      <name>myFunc</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArGlobalRetFunctor4.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGPS</name>
    <filename>classArGPS.html</filename>
    <member kind="enumeration">
      <name>FixType</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNMEAHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *message, ArNMEAParser::Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned long connectTimeout=10000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connect</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(unsigned long connectTimeout=10000)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAltimeter</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAltitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAltitudeError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getBeaconChannel</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBeaconFreq</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBeaconSignalStrength</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBeaconSNR</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getBecaonBPS</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCompassHeadingMag</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCompassHeadingTrue</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ArGPS::Data &amp;</type>
      <name>getCurrentDataRef</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getDGPSStationID</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getErrorEllipse</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FixType</type>
      <name>getFixType</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFixTypeName</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGarminPositionError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGarminVerticalPositionError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getGPSPositionTimestamp</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInputsRMS</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatitudeError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getLatLonError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongitudeError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeanSNR</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSatellitesTracked</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getTimeReceivedPosition</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAltimeter</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAltitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveAltitudeError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBeaconInfo</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveCompassHeadingMag</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveCompassHeadingTrue</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveDGPSStation</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveErrorEllipse</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveGarminPositionError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveGarminVerticalPositionError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveHDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveInputsRMS</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveLatitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveLatLonError</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveLongitude</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>havePDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>havePosition</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSNR</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSpeed</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveVDOP</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logData</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(bool labels=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDataLabelsHeader</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(unsigned long maxTime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readWithLock</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(unsigned int maxTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNMEAHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompassHeadingMag</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompassHeadingMagWithLock</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompassHeadingTrue</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompassHeadingTrueWithLock</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(ArDeviceConnection *deviceConn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreChecksum</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(bool ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getFixTypeName</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(FixType type)</arglist>
    </member>
    <member kind="variable">
      <type>enum ArGPS::@7</type>
      <name>ReadFlags</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPGGA</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPGSA</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPGST</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPGSV</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPMSS</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPRMC</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHCHDx</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePGRME</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePGRMZ</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initDevice</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseGPRMC</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(const ArNMEAParser::Message &amp;msg, double &amp;latitudeResult, double &amp;longitudeResult, bool &amp;qualityFlagResult, bool &amp;gotPosition, ArTime &amp;timeGotPositionResult, ArTime &amp;gpsTimestampResult, bool &amp;gotSpeedResult, double &amp;speedResult)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readFloatFromString</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(std::string &amp;str, double *target, double(*convf)(double)=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readFloatFromStringVec</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(std::vector&lt; std::string &gt; *vec, size_t i, double *target, double(*convf)(double)=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readTimeFromString</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(const std::string &amp;s, ArTime *time) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readUShortFromString</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(std::string &amp;str, unsigned short *target, unsigned short(*convf)(unsigned short)=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readUShortFromStringVec</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(std::vector&lt; std::string &gt; *vec, size_t i, unsigned short *target, unsigned short(*convf)(unsigned short)=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>waitForData</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(unsigned long timeout)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>feetToMeters</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>f0</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>gpsDegminToDegrees</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>f1</anchor>
      <arglist>(double degmin)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>knotsToMPS</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>f2</anchor>
      <arglist>(double knots)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>metersToFeet</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>f3</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>mpsToMph</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>f4</anchor>
      <arglist>(double mps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myArgParser</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCreatedOwnDeviceCon</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data</type>
      <name>myData</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myDevice</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPGGAHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPGSAHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPGSTHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPGSVHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPMSSHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myGPRMCHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myHCHDxHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArNMEAParser</type>
      <name>myNMEAParser</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArGPS &gt;</type>
      <name>myParseArgsCallback</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myPGRMEHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArGPS, ArNMEAParser::Message &gt;</type>
      <name>myPGRMZHandler</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>mySNRNum</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySNRSum</name>
      <anchorfile>classArGPS.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGPSConnector</name>
    <filename>classArGPSConnector.html</filename>
    <member kind="enumeration">
      <name>GPSType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Standard</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Novatel</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Trimble</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Invalid</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NovatelSPAN</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGPSConnector</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArArgumentParser *argParser)</arglist>
    </member>
    <member kind="function">
      <type>ArGPS *</type>
      <name>create</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ArGPS *</type>
      <name>createGPS</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot=NULL)</arglist>
    </member>
    <member kind="function">
      <type>GPSType</type>
      <name>getGPSType</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GPSType</type>
      <name>deviceTypeFromString</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myArgParser</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBaud</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myDeviceCon</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GPSType</type>
      <name>myDeviceType</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArGPSConnector &gt;</type>
      <name>myLogArgsCallback</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArGPSConnector &gt;</type>
      <name>myParseArgsCallback</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>myPort</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>myTCPHost</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTCPPort</name>
      <anchorfile>classArGPSConnector.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGripper</name>
    <filename>classArGripper.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUERYTYPE</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENIO</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USERIO</name>
      <anchor>w4w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPAC</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOGRIPPER</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArGripper</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, int gripperType=QUERYTYPE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectHandler</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBreakBeamState</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGraspTime</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGripState</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getMSecSinceLastPacket</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPaddleState</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripClose</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripOpen</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripperDeploy</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripperHalt</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripperStore</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripPressure</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int mSecIntervals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gripStop</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGripMoving</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLiftMaxed</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLiftMoving</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>liftCarry</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int mSecIntervals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>liftDown</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>liftStop</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>liftUp</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logState</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packetHandler</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArGripper</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArGripper &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myGraspTime</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastDataTime</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArGripper, ArRobotPacket * &gt;</type>
      <name>myPacketHandlerCB</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myState</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySwitches</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myType</name>
      <anchorfile>classArGripper.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArGripperCommands</name>
    <filename>classArGripperCommands.html</filename>
    <member kind="enumeration">
      <name>Commands</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIP_OPEN</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIP_CLOSE</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIP_STOP</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIFT_UP</name>
      <anchor>w0w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIFT_DOWN</name>
      <anchor>w0w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIFT_STOP</name>
      <anchor>w0w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPER_STORE</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPER_DEPLOY</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIPPER_HALT</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRIP_PRESSURE</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIFT_CARRY</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Aria</name>
    <filename>classAria.html</filename>
    <member kind="enumeration">
      <name>SigHandleMethod</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGHANDLE_SINGLE</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGHANDLE_THREAD</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGHANDLE_NONE</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addExitCallback</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addInitCallBack</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(ArFunctor *cb, ArListPos::Pos position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addLogOptionsCB</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addParseArgsCB</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor, int position=50)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addRobot</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addUninitCallBack</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(ArFunctor *cb, ArListPos::Pos position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callExitCallbacks</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delRobot</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>deviceConnectionAddCreator</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(const char *deviceConnectionType, ArRetFunctor3&lt; ArDeviceConnection *, const char *, const char *, const char * &gt; *creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArDeviceConnection *</type>
      <name>deviceConnectionCreate</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const char *deviceConnectionType, const char *port, const char *defaultInfo, const char *prefix=&quot;Aria::deviceConnectionCreate&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>deviceConnectionGetTypes</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>exit</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(int exitCode=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>exitOld</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(int exitCode=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRobot *</type>
      <name>findRobot</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArConfig *</type>
      <name>getConfig</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getDirectory</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArStringInfoGroup *</type>
      <name>getInfoGroup</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArJoyHandler *</type>
      <name>getJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArKeyHandler *</type>
      <name>getKeyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMaxNumLasers</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRobotJoyHandler *</type>
      <name>getRobotJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; ArRobot * &gt; *</type>
      <name>getRobotList</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRunning</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e23</anchor>
      <arglist>(SigHandleMethod method=SIGHANDLE_THREAD, bool initSockets=true, bool sigHandleExitNotShutdown=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>laserAddCreator</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e24</anchor>
      <arglist>(const char *laserType, ArRetFunctor2&lt; ArLaser *, int, const char * &gt; *creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArLaser *</type>
      <name>laserCreate</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e25</anchor>
      <arglist>(const char *laserType, int laserNumber, const char *prefix=&quot;Aria::laserCreate&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>laserGetTypes</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logOptions</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseArgs</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>remExitCallback</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e29</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDirectory</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e30</anchor>
      <arglist>(const char *directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setExitCallbacksLogLevel</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e31</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e32</anchor>
      <arglist>(ArJoyHandler *joyHandler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setKeyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e33</anchor>
      <arglist>(ArKeyHandler *keyHandler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMaxNumLasers</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e34</anchor>
      <arglist>(int maxNumLasers)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setParseArgLogLevel</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e35</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRobotJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e36</anchor>
      <arglist>(ArRobotJoyHandler *robotJoyHandler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>signalHandlerCB</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e38</anchor>
      <arglist>(int sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>uninit</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArConfig</type>
      <name>ourConfig</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::map&lt; std::string, ArRetFunctor3&lt; ArDeviceConnection *, const char *, const char *, const char * &gt; *, ArStrCaseCmpOp &gt;</type>
      <name>ourDeviceConnectionCreatorMap</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourDeviceConnectionTypes</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourDirectory</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::multimap&lt; int, ArFunctor * &gt;</type>
      <name>ourExitCallbacks</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArLog::LogLevel</type>
      <name>ourExitCallbacksLogLevel</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>ourExitCallbacksMutex</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourExiting</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArStringInfoGroup</type>
      <name>ourInfoGroup</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; ArFunctor * &gt;</type>
      <name>ourInitCBs</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourInited</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArJoyHandler *</type>
      <name>ourJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArKeyHandler *</type>
      <name>ourKeyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::map&lt; std::string, ArRetFunctor2&lt; ArLaser *, int, const char * &gt; *, ArStrCaseCmpOp &gt;</type>
      <name>ourLaserCreatorMap</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourLaserTypes</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::multimap&lt; int, ArFunctor * &gt;</type>
      <name>ourLogOptionsCBs</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>ourMaxNumLasers</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::multimap&lt; int, ArRetFunctor&lt; bool &gt; * &gt;</type>
      <name>ourParseArgCBs</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArLog::LogLevel</type>
      <name>ourParseArgsLogLevel</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArRobotJoyHandler *</type>
      <name>ourRobotJoyHandler</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; ArRobot * &gt;</type>
      <name>ourRobots</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourRunning</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourShuttingDown</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>ourShuttingDownMutex</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourSigHandleExitNotShutdown</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalFunctor1&lt; int &gt;</type>
      <name>ourSignalHandlerCB</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; ArFunctor * &gt;</type>
      <name>ourUninitCBs</name>
      <anchorfile>classAria.html</anchorfile>
      <anchor>t26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArInterpolation</name>
    <filename>classArInterpolation.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addReading</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTime timeOfReading, ArPose position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArInterpolation</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(size_t numberOfReadings=100)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfReadings</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPose</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArTime timeStamp, ArPose *position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfReadings</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(size_t numberOfReadings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArInterpolation</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPose &gt;</type>
      <name>myPoses</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mySize</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArTime &gt;</type>
      <name>myTimes</name>
      <anchorfile>classArInterpolation.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArIrrfDevice</name>
    <filename>classArIrrfDevice.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type></type>
      <name>ArIrrfDevice</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_t currentBufferSize=91, size_t cumulativeBufferSize=273, const char *name=&quot;irrf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packetHandler</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulativeMaxRange</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArIrrfDevice</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCumulativeMaxRange</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFilterFarDist</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFilterNearDist</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArSensorReading * &gt;</type>
      <name>myIrrfReadings</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastReading</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArIrrfDevice, ArRobotPacket * &gt;</type>
      <name>myPacketHandler</name>
      <anchorfile>classArIrrfDevice.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArIRs</name>
    <filename>classArIRs.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type></type>
      <name>ArIRs</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_t currentBufferSize=10, size_t cumulativeBufferSize=10, const char *name=&quot;irs&quot;, int maxSecondsToKeepCurrent=15)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>cycleCounters</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotParams</type>
      <name>myParams</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArIRs &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArIRs.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArJoyHandler</name>
    <filename>classArJoyHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>ArJoyHandler</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool useOSCal=true, bool useOldJoystick=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endCal</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAdjusted</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int *x, int *y, int *z=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAxis</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(unsigned int axis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getButton</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(unsigned int button)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDoubles</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(double *x, double *y, double *z=NULL)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumAxes</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumButtons</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpeeds</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int *x, int *y, int *z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStats</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int *maxX, int *minX, int *maxY, int *minY, int *cenX, int *cenY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnfiltered</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int *x, int *y, int *z=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseOSCal</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveJoystick</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveZAxis</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeeds</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int x, int y, int z=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStats</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int maxX, int minX, int maxY, int minY, int cenX, int cenY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseOSCal</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(bool useOSCal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startCal</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArJoyHandler</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getData</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNewData</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getOldData</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, int &gt;</type>
      <name>myAxes</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, bool &gt;</type>
      <name>myButtons</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCenX</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCenY</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstData</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveZ</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInitialized</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyData</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyDesc</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myJoyNameTemp</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p9</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyNumber</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastDataGathered</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastOpenTry</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxX</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxY</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinX</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMinY</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>myOldJoyDesc</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPhysMax</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTopX</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTopY</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTopZ</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseOld</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseOSCal</name>
      <anchorfile>classArJoyHandler.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArKeyHandler</name>
    <filename>classArKeyHandler.html</filename>
    <member kind="enumeration">
      <name>KEY</name>
      <anchor>w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UP</name>
      <anchor>w22w29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOWN</name>
      <anchor>w22w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT</name>
      <anchor>w22w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT</name>
      <anchor>w22w26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ESCAPE</name>
      <anchor>w22w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchor>w22w27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAB</name>
      <anchor>w22w28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTER</name>
      <anchor>w22w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKSPACE</name>
      <anchor>w22w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_StartFKeys</name>
      <anchor>w22w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F1</name>
      <anchor>w22w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F2</name>
      <anchor>w22w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F3</name>
      <anchor>w22w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F4</name>
      <anchor>w22w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F5</name>
      <anchor>w22w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F6</name>
      <anchor>w22w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F7</name>
      <anchor>w22w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F8</name>
      <anchor>w22w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F9</name>
      <anchor>w22w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F10</name>
      <anchor>w22w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F11</name>
      <anchor>w22w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F12</name>
      <anchor>w22w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_EndFKeys</name>
      <anchor>w22w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAGEUP</name>
      <anchor>w22w25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAGEDOWN</name>
      <anchor>w22w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOME</name>
      <anchor>w22w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END</name>
      <anchor>w22w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSERT</name>
      <anchor>w22w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEL</name>
      <anchor>w22w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addKeyHandler</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int keyToHandle, ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArKeyHandler</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool blocking=false, bool addAriaExitCB=true, FILE *stream=NULL, bool takeKeysInConstructor=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkKeys</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKey</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remKeyHandler</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remKeyHandler</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int keyToHandler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeKeys</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(bool blocking=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArKeyHandler</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getChar</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArKeyHandler &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBlocking</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArFunctor * &gt;</type>
      <name>myMap</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>termios</type>
      <name>myOriginalTermios</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRestored</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>myStream</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTookKeys</name>
      <anchorfile>classArKeyHandler.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaser</name>
    <filename>classArLaser.html</filename>
    <base>ArRangeDeviceThreaded</base>
    <member kind="function">
      <type>void</type>
      <name>addConnectCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDisconnectNormallyCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDisconnectOnErrorCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFailedConnectCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIgnoreReading</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double ignoreReading)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIgnoreReadings</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *ignoreReadings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReadingCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArFunctor *functor, int position=50)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyTransform</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArTransform trans, bool doCumulative=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLaser</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int laserNumber, const char *name, unsigned int absoluteMaxRange, bool locationDependent=false, bool appendLaserNumberToName=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseAutoBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseReflectorBits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseStartingBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canChooseUnits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSetDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSetIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSetPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseAutoBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const char *reflectorBits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const char *range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const char *increment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseReflectorBits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const char *reflectorBits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseStartingBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const char *reflectorBits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>chooseUnits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const char *units)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIgnoreReadings</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAbsoluteMaxRange</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getAutoBaudChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getAutoBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getAutoBaudChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getConnectionTimeoutSeconds</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCumulativeCleanDist</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCumulativeCleanInterval</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCumulativeCleanOffset</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultPortType</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultTcpPort</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDegreesChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDegreesChoiceDouble</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getDegreesChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDegreesChoicesMap</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDegreesChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndDegreesMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndDegreesMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFlipped</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; int &gt; *</type>
      <name>getIgnoreReadings</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getIncrementChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIncrementChoiceDouble</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getIncrementChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getIncrementChoicesMap</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getIncrementChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIncrementMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIncrementMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLog::LogLevel</type>
      <name>getInfoLogLevel</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserNumber</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getLastReadingTime</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReadingCount</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getReflectorBitsChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getReflectorBitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getReflectorBitsChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getSensorPosition</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorPositionTh</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorPositionX</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorPositionY</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartDegreesMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartDegreesMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStartingBaudChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getStartingBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStartingBaudChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnitsChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getUnitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnitsChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSensorPosition</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>laserCheckParams</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remConnectCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remDisconnectNormallyCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remDisconnectOnErrorCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remFailedConnectCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remReadingCB</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLastCumulativeCleanTime</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionTimeoutSeconds</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumulativeBufferSize</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulativeCleanDist</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulativeCleanInterval</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>(int milliSeconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulativeCleanOffset</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>(int milliSeconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>(ArDeviceConnection *conn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEndDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>(double endDegrees)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFlipped</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>(bool flipped)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>(double increment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfoLogLevel</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a97</anchor>
      <arglist>(ArLog::LogLevel infoLogLevel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxRange</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a98</anchor>
      <arglist>(unsigned int maxRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a99</anchor>
      <arglist>(bool powerControlled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a100</anchor>
      <arglist>(ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a101</anchor>
      <arglist>(double x, double y, double th)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStartDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a102</anchor>
      <arglist>(double startDegrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLaser</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>a103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalBuildChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(std::map&lt; std::string, double &gt; *choices, std::string *str, std::list&lt; std::string &gt; *choicesList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalBuildChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(std::list&lt; std::string &gt; *choices, std::string *str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalCheckChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *check, const char *choice, std::map&lt; std::string, double &gt; *choices, const char *choicesStr, double *choiceDouble)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalCheckChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(const char *check, const char *choice, std::list&lt; std::string &gt; *choices, const char *choicesStr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalGotReading</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalProcessReading</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(double x, double y, unsigned int range, bool clean, bool onlyClean)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowAutoBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(const char *defaultAutoBaudChoice, std::list&lt; std::string &gt; autoBaudChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowDegreesChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(const char *defaultDegreesChoice, std::map&lt; std::string, double &gt; degreesChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowIncrementChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(const char *defaultIncrementChoice, std::map&lt; std::string, double &gt; incrementChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowReflectorBitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(const char *defaultReflectorBitsChoice, std::list&lt; std::string &gt; reflectorBitsChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowSetDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(double defaultStartDegrees, double startDegreesMin, double startDegreesMax, double defaultEndDegrees, double endDegreesMin, double endDegreesMax)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowSetIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(double defaultIncrement, double incrementMin, double incrementMax)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowSetPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(bool defaultPowerControlled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowStartingBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(const char *defaultStartingBaudChoice, std::list&lt; std::string &gt; startingBaudChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserAllowUnitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(const char *defaultUnitsChoice, std::list&lt; std::string &gt; unitsChoices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>laserCheckLostConnection</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserConnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserDisconnectNormally</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserDisconnectOnError</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserFailedConnect</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserProcessReadings</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>laserPullUnsetParamsFromRobot</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserSetAbsoluteMaxRange</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b22</anchor>
      <arglist>(unsigned int absoluteMaxRange)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserSetDefaultPortType</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b23</anchor>
      <arglist>(const char *defaultPortType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>laserSetDefaultTcpPort</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b24</anchor>
      <arglist>(int defaultLaserTcpPort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserSetName</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>b25</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myAbsoluteMaxRange</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myAutoBaudChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myAutoBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAutoBaudChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myAutoBaudChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseAutoBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseReflectorBits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseStartingBaud</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanChooseUnits</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanSetDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanSetIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCanSetPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCallbackList</type>
      <name>myConnectCBList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myConnMutex</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCumulativeBufferSizeSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCumulativeCleanDist</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCumulativeCleanDistSquared</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCumulativeCleanInterval</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCumulativeCleanOffset</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myCumulativeLastClean</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCallbackList</type>
      <name>myDataCBList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDefaultPortType</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDefaultTcpPort</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDegreesChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegreesChoiceDouble</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>myDegreesChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDegreesChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myDegreesChoicesList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDegreesChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCallbackList</type>
      <name>myDisconnectNormallyCBList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCallbackList</type>
      <name>myDisconnectOnErrorCBList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myEndDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myEndDegreesMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myEndDegreesMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myEndDegreesSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCallbackList</type>
      <name>myFailedConnectCBList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlipped</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlippedSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveSensorPose</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>myIgnoreReadings</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIncrement</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myIncrementChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIncrementChoiceDouble</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>myIncrementChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIncrementChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myIncrementChoicesList</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myIncrementChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIncrementMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIncrementMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIncrementSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myInfoLogLevel</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLaserNumber</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastReading</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myMaxRangeSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPowerControlled</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPowerControlledSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myReadingCount</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myReadingCurrentCount</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myReflectorBitsChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myReflectorBitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myReflectorBitsChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myReflectorBitsChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotRunningAndConnected</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>mySensorPose</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartDegrees</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartDegreesMax</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartDegreesMin</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartDegreesSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myStartingBaudChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myStartingBaudChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartingBaudChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myStartingBaudChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimeLastReading</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTimeoutSeconds</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myUnitsChoice</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myUnitsChoices</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUnitsChoiceSet</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myUnitsChoicesString</name>
      <anchorfile>classArLaser.html</anchorfile>
      <anchor>p80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaserConnector</name>
    <filename>classArLaserConnector.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addLaser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArLaser *laser, int laserNumber=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPlaceholderLaser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArLaser *placeholderLaser, int laserNumber=1, bool takeOwnershipOfPlaceholder=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLaserConnector</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArArgumentParser *parser, ArRobot *robot, ArRobotConnector *robotConnector, bool autoParseArgs=true, ArLog::LogLevel infoLogLevel=ArLog::Verbose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectLaser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArLaser *laser, int laserNumber=1, bool forceConnection=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectLasers</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(bool continueOnFailedConnect=false, bool addConnectedLasersToRobot=true, bool addAllLasersToRobot=false, bool turnOnLasers=true, bool powerCycleLaserOnFailedConnect=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArArgumentParser *parser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupLaser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArLaser *laser, int laserNumber=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArLaserConnector</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalConfigureLaser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(LaserData *laserData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logLaserOptions</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(LaserData *laserdata, bool header=true, bool metaOpts=true) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseLaserArgs</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArArgumentParser *parser, LaserData *laserData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAutoParseArgs</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myInfoLogLevel</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, LaserData * &gt;</type>
      <name>myLasers</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLaserTypes</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConstFunctorC&lt; ArLaserConnector &gt;</type>
      <name>myLogOptionsCB</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnParser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArLaserConnector &gt;</type>
      <name>myParseArgsCB</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myParsedArgs</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myParser</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotConnector *</type>
      <name>myRobotConnector</name>
      <anchorfile>classArLaserConnector.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ArLaserConnector::LaserData</class>
  </compound>
  <compound kind="class">
    <name>ArLaserConnector::LaserData</name>
    <filename>classArLaserConnector_1_1LaserData.html</filename>
    <member kind="function">
      <type></type>
      <name>LaserData</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int number, ArLaser *laser, bool laserIsPlaceholder=false, bool ownPlaceholder=false)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myAdditionalIgnoreReadings</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myAutoBaud</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myConnect</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myConnectReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myDegrees</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myDegreesEnd</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myDegreesEndReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myDegreesStart</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myDegreesStartReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myFlipped</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myFlippedReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myIncrement</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myIncrementByDegrees</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myIncrementByDegreesReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArLaser *</type>
      <name>myLaser</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myLaserIsPlaceholder</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myMaxRange</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myMaxRangeReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myNumber</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myOwnPlaceholder</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myPort</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myPortType</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myPowerControlled</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myPowerControlledReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myReflectorBits</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myRemoteTcpPort</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myRemoteTcpPortReallySet</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myStartingBaud</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>myUnits</name>
      <anchorfile>classArLaserConnector_1_1LaserData.html</anchorfile>
      <anchor>o29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaserCreatorHelperLMS1XX</name>
    <filename>classArLaserCreatorHelperLMS1XX.html</filename>
    <member kind="function" static="yes">
      <type>static ArLaser *</type>
      <name>createLMS1XX</name>
      <anchorfile>classArLaserCreatorHelperLMS1XX.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(int laserNumber, const char *logPrefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor2&lt; ArLaser *, int, const char * &gt; *</type>
      <name>getCreateLMS1XXCB</name>
      <anchorfile>classArLaserCreatorHelperLMS1XX.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalRetFunctor2&lt; ArLaser *, int, const char * &gt;</type>
      <name>ourLMS1XXCB</name>
      <anchorfile>classArLaserCreatorHelperLMS1XX.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaserFilter</name>
    <filename>classArLaserFilter.html</filename>
    <base>ArLaser</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *sectionName, const char *prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLaserFilter</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArLaser *laser, const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLaser *</type>
      <name>getBaseLaser</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>laserCheckParams</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArLaserFilter</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkRanges</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int thisReading, int otherReading, double factor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>selfLockDevice</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>selfTryLockDevice</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>selfUnlockDevice</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAllFactor</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAngleToCheck</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAnyFactor</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLaser *</type>
      <name>myLaser</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxRange</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLaserFilter &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArLaserFilter.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaserLogger</name>
    <filename>classArLaserLogger.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addGoal</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInfoToLog</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInfoToLogPlain</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTagToLog</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTagToLogPlain</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLaserLogger</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArRobot *robot, ArLaser *laser, double distDiff, double degDiff, const char *fileName, bool addGoals=false, ArJoyHandler *joyHandler=NULL, const char *baseDirectory=NULL, bool useReflectorValues=false, ArRobotJoyHandler *robotJoyHandler=NULL, const std::map&lt; std::string, ArRetFunctor2&lt; int, ArTime, ArPose * &gt; *, ArStrCaseCmpOp &gt; *extraLocationData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDegDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDegDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double degDiff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double distDiff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeNewReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(bool takeNew)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeOldReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(bool takeOld)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeReading</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takingNewReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takingOldReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasFileOpenedSuccessfully</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLaserLogger</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goalKeyCallback</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalAddGoal</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalPrintPos</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArPose encoderPoseTaken, ArPose goalPoseTaken, ArTime timeTaken)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalTakeReading</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalWriteTags</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loopPacketHandler</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>robotTask</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddGoalExplicit</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddGoalKeyboard</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddGoals</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDirectory</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistDiff</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ArRetFunctor2&lt; int, ArTime, ArPose * &gt; *, ArStrCaseCmpOp &gt;</type>
      <name>myExtraLocationData</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>myFile</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFileName</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstGoalTaken</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstTaken</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlipped</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLaserLogger &gt;</type>
      <name>myGoalKeyCB</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIncludeRawEncoderPose</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myInfos</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArJoyHandler *</type>
      <name>myJoyHandler</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLaser *</type>
      <name>myLaser</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLast</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastAddGoalKeyboard</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLastGoalTakenPose</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastGoalTakenTime</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastJoyButton</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myLastLoops</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastRobotJoyButton</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastVel</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArLaserLogger, ArRobotPacket * &gt;</type>
      <name>myLoopPacketHandlerCB</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNewReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumGoal</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOldReadings</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotJoyHandler *</type>
      <name>myRobotJoyHandler</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myScanNumber</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSectors</type>
      <name>mySectors</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStartTime</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myTags</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTakeReadingExplicit</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLaserLogger &gt;</type>
      <name>myTaskCB</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseReflectorValues</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWrote</name>
      <anchorfile>classArLaserLogger.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLaserReflectorDevice</name>
    <filename>classArLaserReflectorDevice.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLaserReflectorDevice</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRangeDevice *laser, ArRobot *robot, const char *name=&quot;reflector&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLaserReflectorDevice</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRangeDevice *</type>
      <name>myLaser</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLaserReflectorDevice &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myReflectanceThreshold</name>
      <anchorfile>classArLaserReflectorDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLine</name>
    <filename>classArLine.html</filename>
    <member kind="function">
      <type></type>
      <name>ArLine</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLine</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getA</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getB</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getC</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPerpDist</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ArPose pose) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerpPoint</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArPose pose, ArPose *perpPoint) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPerpSquaredDist</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ArPose pose) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ArLine *line, ArPose *pose) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLinePerp</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ArPose *pose, ArLine *line) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newParameters</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newParametersFromEndpoints</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLine</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myA</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myB</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myC</name>
      <anchorfile>classArLine.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLineFinder</name>
    <filename>classArLineFinder.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addToConfig</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config, const char *section)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLineFinder</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRangeDevice *dev)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, ArLineFinderSegment * &gt; *</type>
      <name>getLines</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLinesAndSaveThem</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; ArLineFinderSegment * &gt;</type>
      <name>getLinesAsSet</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getLinesTakenPose</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, ArPose &gt; *</type>
      <name>getNonLinePoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; ArPose &gt;</type>
      <name>getNonLinePointsAsSet</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVerbose</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveLast</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineCombiningParams</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int angleTol=30, int linesCloseEnough=75)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineCreationParams</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int minLineLen=40, int minLinePoints=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineFilteringParams</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int minPointsInLine=3, int minLineLength=75)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineValidParams</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int maxDistFromLine=30, int maxAveDistFromLine=20)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistBetweenPoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int maxDistBetweenPoints=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbose</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLineFinder</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArLineFinderSegment *</type>
      <name>averageSegments</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArLineFinderSegment *line1, ArLineFinderSegment *line2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>combineLines</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillPointsFromLaser</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>filterLines</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findLines</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCombiningAngleTol</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myCombiningLinesCloseEnough</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFilteringMinLineLength</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFilteringMinPointsInLine</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlipped</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlippedFound</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArLineFinderSegment * &gt; *</type>
      <name>myLines</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMakingMinLen</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMakingMinPoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxDistBetweenPoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArPose &gt; *</type>
      <name>myNonLinePoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArPose &gt; *</type>
      <name>myPoints</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myPoseTaken</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRangeDevice *</type>
      <name>myRangeDevice</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySinMultiplier</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myValidMaxAveFromLine</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myValidMaxDistFromLine</name>
      <anchorfile>classArLineFinder.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLineFinderSegment</name>
    <filename>classArLineFinderSegment.html</filename>
    <base>ArLineSegment</base>
    <member kind="function">
      <type></type>
      <name>ArLineFinderSegment</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x1, double y1, double x2, double y2, int numPoints=0, int startPoint=0, int endPoint=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAveDistFromLine</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEndPoint</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLineAngle</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPoints</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartPoint</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newEndPoints</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double x1, double y1, double x2, double y2, int numPoints=0, int startPoint=0, int endPoint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAveDistFromLine</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double aveDistFromLine)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAveDistFromLine</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myEndPoint</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLength</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLineAngle</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumPoints</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStartPoint</name>
      <anchorfile>classArLineFinderSegment.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLineSegment</name>
    <filename>classArLineSegment.html</filename>
    <member kind="function">
      <type></type>
      <name>ArLineSegment</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArPose pose1, ArPose pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLineSegment</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLineSegment</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getA</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getB</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getC</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistToLine</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEndPoint1</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEndPoint2</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLengthOf</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ArLine *</type>
      <name>getLine</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPerpDist</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerpPoint</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const ArPose *pose, ArPose *perpPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerpPoint</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ArPose pose, ArPose *perpPoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPerpSquaredDist</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX1</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX2</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY1</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY2</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ArLineSegment *line, ArPose *pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const ArLine *line, ArPose *pose) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linePointIsInSegment</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ArPose *pose) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newEndPoints</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const ArPose &amp;pt1, const ArPose &amp;pt2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newEndPoints</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator!=</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const ArLineSegment &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const ArLineSegment &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const ArLineSegment &amp;other) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLine</type>
      <name>myLine</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myX1</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myX2</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myY1</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myY2</name>
      <anchorfile>classArLineSegment.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArListPos</name>
    <filename>classArListPos.html</filename>
    <member kind="enumeration">
      <name>Pos</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLLACoords</name>
    <filename>classArLLACoords.html</filename>
    <base>Ar3DPoint</base>
    <member kind="function">
      <type></type>
      <name>ArLLACoords</name>
      <anchorfile>classArLLACoords.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAltitude</name>
      <anchorfile>classArLLACoords.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatitude</name>
      <anchorfile>classArLLACoords.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongitude</name>
      <anchorfile>classArLLACoords.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArECEFCoords</type>
      <name>LLA2ECEF</name>
      <anchorfile>classArLLACoords.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLMS1XX</name>
    <filename>classArLMS1XX.html</filename>
    <base>ArLaser</base>
    <member kind="function">
      <type></type>
      <name>ArLMS1XX</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int laserNumber, const char *name=&quot;lms1XX&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArLMS1XX</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failedToConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserSetName</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArLMS1XXPacket *</type>
      <name>sendAndRecv</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(ArTime timeout, ArLMS1XXPacket *sendPacket, const char *recvName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sensorInterp</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArLMS1XX &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDeviceNumber</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDeviceStatus1</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDeviceStatus2</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myInputStatus1</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myInputStatus2</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsConnected</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myLogLevel</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMeasurementFreq</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMessageCounter</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumberEncoders</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumChans</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOutputStatus1</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOutputStatus2</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArLMS1XXPacket * &gt;</type>
      <name>myPackets</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myPacketsMutex</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPowerUpDuration</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLMS1XXPacketReceiver</type>
      <name>myReceiver</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myReserved</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myScanCounter</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myScanningFreq</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLMS1XX &gt;</type>
      <name>mySensorInterpTask</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySerialNumber</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransmissionDuration</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTryingToConnect</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myVersionNumber</name>
      <anchorfile>classArLMS1XX.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLMS1XXPacketReceiver</name>
    <filename>classArLMS1XXPacketReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>ArLMS1XXPacketReceiver</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLMS1XXPacket *</type>
      <name>receivePacket</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned int msWait=0, bool shortcut=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArDeviceConnection *conn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLMS1XXPacketReceiver</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTING</name>
      <anchor>x3x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchor>x3x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMAINDER</name>
      <anchor>x3x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myName</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p1</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNameLength</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLMS1XXPacket</type>
      <name>myPacket</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myReadBuf</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p4</anchor>
      <arglist>[100000]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myReadCount</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArLMS1XXPacketReceiver.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLMS2xx</name>
    <filename>classArLMS2xx.html</filename>
    <base>ArLaser</base>
    <member kind="function">
      <type></type>
      <name>ArLMS2xx</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int laserNumber, const char *name=&quot;lms2xx&quot;, bool appendLaserNumberToName=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArDeviceConnection *conn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLMS2xx</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_NONE</name>
      <anchor>x0x6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_INIT</name>
      <anchor>x0x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_WAIT_FOR_POWER_ON</name>
      <anchor>x0x11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_CHANGE_BAUD</name>
      <anchor>x0x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_CONFIGURE</name>
      <anchor>x0x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_WAIT_FOR_CONFIGURE_ACK</name>
      <anchor>x0x9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_INSTALL_MODE</name>
      <anchor>x0x5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_WAIT_FOR_INSTALL_MODE_ACK</name>
      <anchor>x0x10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SET_MODE</name>
      <anchor>x0x7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_WAIT_FOR_SET_MODE_ACK</name>
      <anchor>x0x12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_START_READINGS</name>
      <anchor>x0x8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_WAIT_FOR_START_ACK</name>
      <anchor>x0x13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_CONNECTED</name>
      <anchor>x0x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropConnection</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failedConnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>finishParams</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>internalConnectHandler</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalConnectSim</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalRunOnRobot</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>laserCheckParams</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserSetName</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>madeConnection</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPacket</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(ArLMS2xxPacket *packet, ArPose pose, ArPose encoderPose, unsigned int counter, bool deinterlace, ArPose deinterlaceDelta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>runOnce</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(bool lockRobot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sensorInterpCallback</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sickGetIsUsingSim</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sickSetIsUsingSim</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(bool usingSim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>simPacketHandler</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchState</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArLMS2xx &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myAssembleReadings</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myCurrentReadings</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myIncrementAmount</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInterlaced</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInterpolation</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt;::iterator</type>
      <name>myIter</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLMS2xxPacketReceiver</type>
      <name>myLMS2xxPacketReceiver</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumReflectorBits</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myOffsetAmount</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLMS2xxPacket</type>
      <name>myPacket</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArLMS2xxPacket * &gt;</type>
      <name>myPackets</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myProcessImmediately</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLMS2xx &gt;</type>
      <name>myRobotConnectCB</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRunInOwnThread</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRunningOnRobot</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArLMS2xx &gt;</type>
      <name>mySensorInterpCB</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySimPacketCounter</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>mySimPacketEncoderTrans</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArLMS2xx, ArRobotPacket * &gt;</type>
      <name>mySimPacketHandler</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>mySimPacketStart</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>mySimPacketTrans</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartConnect</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myStateMutex</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStateStart</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myTotalNumReadings</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseSim</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myWhichReading</name>
      <anchorfile>classArLMS2xx.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLMS2xxPacket</name>
    <filename>classArLMS2xxPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArLMS2xxPacket</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(unsigned char sendingAddress=0)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::Byte2</type>
      <name>calcCRC</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>duplicatePacket</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArLMS2xxPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::UByte</type>
      <name>getID</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getReceivedAddress</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getSendingAddress</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getTimeReceived</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRead</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendingAddress</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(unsigned char address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeReceived</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArTime timeReceived)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verifyCRC</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLMS2xxPacket</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySendingAddress</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeReceived</name>
      <anchorfile>classArLMS2xxPacket.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLMS2xxPacketReceiver</name>
    <filename>classArLMS2xxPacketReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>ArLMS2xxPacketReceiver</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArDeviceConnection *deviceConnection, unsigned char receivingAddress=0, bool allocatePackets=false, bool useBase0Address=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLMS2xxPacketReceiver</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(unsigned char receivingAddress=0, bool allocatePackets=false, bool useBase0Address=false)</arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllocatingPackets</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArLMS2xxPacket *</type>
      <name>receivePacket</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArDeviceConnection *deviceConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLMS2xxPacketReceiver</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAllocatePackets</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myDeviceConn</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLMS2xxPacket</type>
      <name>myPacket</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myReceivingAddress</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseBase0Address</name>
      <anchorfile>classArLMS2xxPacketReceiver.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLog</name>
    <filename>classArLog.html</filename>
    <member kind="enumeration">
      <name>LogLevel</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Terse</name>
      <anchor>w2w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Normal</name>
      <anchor>w2w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Verbose</name>
      <anchor>w2w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LogType</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StdOut</name>
      <anchor>w3w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StdErr</name>
      <anchor>w3w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>File</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Colbert</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchor>w3w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToConfig</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ArConfig *config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aramInit</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const char *prefix, ArLog::LogLevel defaultLevel=ArLog::Normal, double defaultSize=10)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>close</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>init</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(LogType type, LogLevel level, const char *fileName=&quot;&quot;, bool logTime=false, bool alsoPrint=false, bool printThisCall=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(LogLevel level, const char *str,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logNoLock</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(LogLevel level, const char *str,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logPlain</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(LogLevel level, const char *str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static void(*</type>
      <name>colbertPrint</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>s0</anchor>
      <arglist>)(int i, const char *str)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>aramProcessFile</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>filledAramLog</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>f1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>processFile</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourAlsoPrint</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static char</type>
      <name>ourAramConfigLogLevel</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t1</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static double</type>
      <name>ourAramConfigLogSize</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalRetFunctor&lt; bool &gt;</type>
      <name>ourAramConfigProcessFileCB</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static double</type>
      <name>ourAramLogSize</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourAramPrefix</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>ourCharsLogged</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>ourColbertStream</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourConfigAlsoPrint</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static char</type>
      <name>ourConfigFileName</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t9</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static LogLevel</type>
      <name>ourConfigLogLevel</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourConfigLogTime</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static LogType</type>
      <name>ourConfigLogType</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalRetFunctor&lt; bool &gt;</type>
      <name>ourConfigProcessFileCB</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourFileName</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static FILE *</type>
      <name>ourFP</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static LogLevel</type>
      <name>ourLevel</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArLog *</type>
      <name>ourLog</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourLoggingTime</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>ourMutex</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static LogType</type>
      <name>ourType</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourUseAramBehavior</name>
      <anchorfile>classArLog.html</anchorfile>
      <anchor>t21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArLogFileConnection</name>
    <filename>classArLogFileConnection.html</filename>
    <base>ArDeviceConnection</base>
    <member kind="enumeration">
      <name>Open</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_FILE_NOT_FOUND</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_NOT_A_LOG_FILE</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArLogFileConnection</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLogFile</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getOpenMessage</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int messageNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeRead</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>internalOpen</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTimeStamping</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *fname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>openSimple</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *data, unsigned int size, unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogFile</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *fname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *data, unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArLogFileConnection</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>havePose</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>myName</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>o1</anchor>
      <arglist>[100]</arglist>
    </member>
    <member kind="variable">
      <type>ArPose</type>
      <name>myPose</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>mySubtype</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>o3</anchor>
      <arglist>[20]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>myType</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>o4</anchor>
      <arglist>[20]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildStrMap</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>myFD</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>myLogFile</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStatus</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArStrMap</type>
      <name>myStrMap</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stopAfter</name>
      <anchorfile>classArLogFileConnection.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMap</name>
    <filename>classArMap.html</filename>
    <base>ArMapInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMapChangedCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPostWriteFileCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPreMapChangedCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPreWriteFileCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMap</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ArMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMap</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *baseDirectory=&quot;./&quot;, bool addToGlobalConfig=true, const char *configSection=&quot;Files&quot;, const char *configParam=&quot;Map&quot;, const char *configDesc=&quot;Map of the environment that the robot uses for navigation&quot;, bool ignoreEmptyFileName=true, ArPriority::Priority priority=ArPriority::IMPORTANT, const char *tempDirectory=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>calculateChecksum</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned char *md5DigestBuffer, size_t md5DigestBufferLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeConfigMapName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapInterface *</type>
      <name>clone</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>createRealFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findFirstMapObject</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *name, const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findMapObject</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *name, const char *type=NULL, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArArgumentBuilder *</type>
      <name>findMapObjectParams</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *mapObjectName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt;</type>
      <name>findMapObjectsOfType</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIgnoreCase</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIgnoreEmptyFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapInfoInterface *</type>
      <name>getInactiveInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObjectsInterface *</type>
      <name>getInactiveObjects</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const char *infoName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInfoCount</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getInfoName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getInfoNames</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMaxPose</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMinPose</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArLineSegment &gt; *</type>
      <name>getLines</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArLog::LogLevel</type>
      <name>getMapChangedLogLevel</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMapId</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ArMapId *mapIdOut, bool isInternalCall=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getMapInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt; *</type>
      <name>getMapObjects</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMaxPose</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMinPose</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumLines</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOriginAltitude</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getOriginLatLong</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArPose &gt; *</type>
      <name>getPoints</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual struct stat</type>
      <name>getReadFileStat</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getRemainder</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResolution</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getScanTypes</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTempDirectory</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOriginLatLongAlt</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadingDataStarted</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadingLinesAndDataStarted</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedLines</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedPoints</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadDataPoint</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadLineSegment</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mapChanged</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(const ArMap &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parseLine</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsingComplete</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readDataPoint</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(const char *fileName, char *errorBuffer, size_t errorBufferLen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const char *fileName, char *errorBuffer, size_t errorBufferLen, unsigned char *md5DigestBuffer, size_t md5DigestBufferLen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFileAndChangeConfig</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readLineSegment</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>refresh</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remMapChangedCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPostWriteFileCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPreMapChangedCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPreWriteFileCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>set</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(ArMapInterface *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(const char *baseDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIgnoreCase</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(bool ignoreCase=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIgnoreEmptyFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(bool ignore)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(int infoType, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(const char *infoName, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLines</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(const std::vector&lt; ArLineSegment &gt; *lines, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedLines=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapChangedLogLevel</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setMapInfo</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(const std::list&lt; ArArgumentBuilder * &gt; *mapInfo, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setMapObjectParams</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(const char *mapObjectName, ArArgumentBuilder *params, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapObjects</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(const std::list&lt; ArMapObject * &gt; *mapObjects, bool isSortedObjects=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginLatLongAlt</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(bool hasOriginLatLong, const ArPose &amp;originLatLong, double altitude, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(const std::vector&lt; ArPose &gt; *points, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedPoints=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuiet</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(bool isQuiet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResolution</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(int resolution, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setScanTypes</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;scanTypeList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(const char *sourceName, const char *fileName, bool isInternalCall=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTempDirectory</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(const char *tempDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLock</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>(const char *fileName, bool internalCall, unsigned char *md5DigestBuffer=NULL, size_t md5DigestBufferLen=0, time_t fileTimestamp=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInfoToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArLineSegment &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeObjectListToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeObjectsToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, bool isOverrideAsSingleScan=false, const char *maxCategory=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePointsToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a97</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArPose &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeScanToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a98</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeSupplementToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a99</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeToFunctor</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a100</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMap</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>a101</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processFile</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(char *errorBuffer, size_t errorBufferLen)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDirectory</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myConfigMapName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p1</anchor>
      <arglist>[MAX_MAP_NAME_LENGTH]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myConfigParam</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myConfigProcessedBefore</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapSimple *const</type>
      <name>myCurrentMap</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreCase</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreEmptyFileName</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsQuiet</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapSimple *</type>
      <name>myLoadingMap</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor2C&lt; bool, ArMap, char *, size_t &gt;</type>
      <name>myProcessFileCB</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stat</type>
      <name>myReadFileStat</name>
      <anchorfile>classArMap.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classArMap">MapObjects</docanchor>
    <docanchor file="classArMap">MapThreading</docanchor>
  </compound>
  <compound kind="class">
    <name>ArMapChangeDetails</name>
    <filename>classArMapChangeDetails.html</filename>
    <member kind="enumvalue">
      <name>CHANGE_TYPE_COUNT</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MapLineChangeType</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETIONS</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDITIONS</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_CHANGE_TYPE</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapChangeDetails</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapChangeDetails &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapChangeDetails</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createChildArgMap</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>findChangedInfoNames</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLineSet *</type>
      <name>getChangedInfoLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *infoName, MapLineChangeType change)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ArLineSegment &gt; *</type>
      <name>getChangedLineSegments</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(MapLineChangeType change, const char *scanType)</arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLineSet *</type>
      <name>getChangedObjectLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(MapLineChangeType change)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ArPose &gt; *</type>
      <name>getChangedPoints</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(MapLineChangeType change, const char *scanType)</arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLineSet *</type>
      <name>getChangedSummaryLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(MapLineChangeType change, const char *scanType)</arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLineSet *</type>
      <name>getChangedSupplementLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(MapLineChangeType change)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNewMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArMapId *mapIdOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrigMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArMapId *mapIdOut)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt; *</type>
      <name>getScanTypes</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChildArg</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *infoName, const char *arg0Text) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChildArg</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *infoName, ArArgumentBuilder *arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArMapChangeDetails &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const ArMapChangeDetails &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const ArMapId &amp;mapId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const ArMapId &amp;mapId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapChangeDetails</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArMapScanChangeDetails *</type>
      <name>getScanChangeDetails</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const char *scanType)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapFileLineSet</type>
      <name>myChangedObjectLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapFileLineSet</type>
      <name>myChangedSupplementLines</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p1</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::map&lt; std::string, bool &gt; &gt;</type>
      <name>myInfoNameToMapOfChildArgsMap</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ArMapFileLineSet &gt;</type>
      <name>myInfoToChangeMaps</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p3</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapId</type>
      <name>myNewMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapScanChangeDetails</type>
      <name>myNullScanTypeChanges</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapId</type>
      <name>myOrigMapId</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myScanTypeList</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ArMapScanChangeDetails * &gt;</type>
      <name>myScanTypeToChangesMap</name>
      <anchorfile>classArMapChangeDetails.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ArMapChangeDetails::ArMapScanChangeDetails</class>
  </compound>
  <compound kind="struct">
    <name>ArMapChangeDetails::ArMapScanChangeDetails</name>
    <filename>structArMapChangeDetails_1_1ArMapScanChangeDetails.html</filename>
    <member kind="variable">
      <type>std::vector&lt; ArLineSegment &gt;</type>
      <name>myChangedLineSegments</name>
      <anchorfile>structArMapChangeDetails_1_1ArMapScanChangeDetails.html</anchorfile>
      <anchor>o0</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ArPose &gt;</type>
      <name>myChangedPoints</name>
      <anchorfile>structArMapChangeDetails_1_1ArMapScanChangeDetails.html</anchorfile>
      <anchor>o1</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
    <member kind="variable">
      <type>ArMapFileLineSet</type>
      <name>myChangedSummaryLines</name>
      <anchorfile>structArMapChangeDetails_1_1ArMapScanChangeDetails.html</anchorfile>
      <anchor>o2</anchor>
      <arglist>[CHANGE_TYPE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapChangedHelper</name>
    <filename>classArMapChangedHelper.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMapChangedCB</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPreMapChangedCB</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapChangedHelper</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArLog::LogLevel</type>
      <name>getMapChangedLogLevel</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invokeMapChangedCallbacks</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remMapChangedCB</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPreMapChangedCB</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapChangedLogLevel</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapChangedHelper</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myMapChangedCBList</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLog::LogLevel</type>
      <name>myMapChangedLogLevel</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myPreMapChangedCBList</name>
      <anchorfile>classArMapChangedHelper.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapFileLine</name>
    <filename>classArMapFileLine.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapFileLine</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLine &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapFileLine</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int lineNum, const char *lineText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapFileLine</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNum</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLineText</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLine &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ArMapFileLine &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapFileLine</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLineNum</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLineText</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>ArMapFileLineCompare</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArMapFileLine.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(const ArMapFileLine &amp;line1, const ArMapFileLine &amp;line2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArMapFileLineCompare</name>
    <filename>structArMapFileLineCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArMapFileLineCompare.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLine &amp;line1, const ArMapFileLine &amp;line2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapFileLineGroup</name>
    <filename>classArMapFileLineGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapFileLineGroup</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLine &amp;parentLine)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ArMapFileLine &gt; *</type>
      <name>getChildLines</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLine *</type>
      <name>getParentLine</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapFileLineGroup</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ArMapFileLine &gt;</type>
      <name>myChildLines</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArMapFileLine</type>
      <name>myParentLine</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>ArMapFileLineGroupCompare</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArMapFileLineGroup.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(const ArMapFileLineGroup &amp;line1, const ArMapFileLineGroup &amp;line2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArMapFileLineGroupCompare</name>
    <filename>structArMapFileLineGroupCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArMapFileLineGroupCompare.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLineGroup &amp;group1, const ArMapFileLineGroup &amp;group2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArMapFileLineGroupLineNumCompare</name>
    <filename>structArMapFileLineGroupLineNumCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArMapFileLineGroupLineNumCompare.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLineGroup &amp;group1, const ArMapFileLineGroup &amp;group2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapFileLineSet</name>
    <filename>classArMapFileLineSet.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapFileLineSet</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapFileLineSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapFileLineSet</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArMapFileLine &amp;groupParent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type>ArMapFileLineSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ArMapFileLineSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapFileLineSet</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>calculateChanges</name>
      <anchorfile>classArMapFileLineSet.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ArMapFileLineSet &amp;origLines, ArMapFileLineSet &amp;newLines, ArMapFileLineSet *deletedLinesOut, ArMapFileLineSet *addedLinesOut, bool isCheckChildren=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapFileLineSetWriter</name>
    <filename>classArMapFileLineSetWriter.html</filename>
    <base>ArFunctor1&lt; const char * &gt;</base>
    <member kind="function">
      <type></type>
      <name>ArMapFileLineSetWriter</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArMapFileLineSet *multiSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAddingChildren</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddingChildren</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(bool isAddingChildren)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapFileLineSetWriter</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myChildLineNum</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsAddingChildren</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLineNum</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapFileLineSet *</type>
      <name>myMultiSet</name>
      <anchorfile>classArMapFileLineSetWriter.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapGPSCoords</name>
    <filename>classArMapGPSCoords.html</filename>
    <base>ArENUCoords</base>
    <member kind="function">
      <type></type>
      <name>ArMapGPSCoords</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArLLACoords org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertLLA2MapCoords</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArLLACoords &amp;lla, double &amp;ea, double &amp;no, double &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertLLA2MapCoords</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double lat, const double lon, const double alt, double &amp;ea, double &amp;no, double &amp;up) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertMap2LLACoords</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double ea, const double no, const double up, double &amp;lat, double &amp;lon, double &amp;alt) const </arglist>
    </member>
    <member kind="variable">
      <type>ArECEFCoords *</type>
      <name>myOriginECEF</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArLLACoords *</type>
      <name>myOriginLLA</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myOriginSet</name>
      <anchorfile>classArMapGPSCoords.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapId</name>
    <filename>classArMapId.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapId</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapId</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *sourceName, const char *fileName, const unsigned char *checksum, size_t checksumLength, long int size, const time_t timestamp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapId</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>getChecksum</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getChecksumLength</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDisplayChecksum</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long int</type>
      <name>getSize</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>time_t</type>
      <name>getTimestamp</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameFile</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const ArMapId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVersionOfSameFile</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const ArMapId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *prefix) const </arglist>
    </member>
    <member kind="function">
      <type>ArMapId &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const ArMapId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChecksum</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const unsigned char *checksum, size_t checksumLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(long int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *sourceName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const time_t &amp;timestamp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMapId</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *fileName, ArMapId *mapIdOut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>fromPacket</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(ArBasePacket *packetIn, ArMapId *mapIdOut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toPacket</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const ArMapId &amp;mapId, ArBasePacket *packetOut)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>myChecksum</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myChecksumLength</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>myDisplayChecksum</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myDisplayChecksumLength</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFileName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long int</type>
      <name>mySize</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mySourceName</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimestamp</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(const ArMapId &amp;id1, const ArMapId &amp;id2)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classArMapId.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(const ArMapId &amp;id1, const ArMapId &amp;id2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapInfo</name>
    <filename>classArMapInfo.html</filename>
    <base>ArMapInfoInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArMapInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char **infoNameList=NULL, size_t infoNameCount=0, const char *keywordPrefix=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *infoName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInfoCount</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getInfoName</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getInfoNames</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getMapInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeChanged</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArMapInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ArMapInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int infoType, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *infoName, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setMapInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const std::list&lt; ArArgumentBuilder * &gt; *mapInfo, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInfoToFunctor</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, ArMapInfoData *, ArStrCaseCmpOp &gt;</type>
      <name>ArInfoNameToDataMap</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createMultiSet</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const char *infoName, ArMapFileLineSet *multiSet, ArMapChangeDetails *changeDetails)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArMapInfoData *</type>
      <name>findData</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(const char *infoName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArMapInfoData *</type>
      <name>findDataByKeyword</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *keyword)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleInfo</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setChanged</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDefaultInfoNames</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArInfoNameToDataMap</type>
      <name>myInfoNameToDataMap</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::string &gt;</type>
      <name>myInfoTypeToNameMap</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string, ArStrCaseCmpOp &gt;</type>
      <name>myKeywordToInfoNameMap</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumInfos</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPrefix</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeChanged</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ArMapSimple</name>
      <anchorfile>classArMapInfo.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapInfoInterface</name>
    <filename>classArMapInfoInterface.html</filename>
    <member kind="enumvalue">
      <name>INFO_COUNT</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InfoType</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_INFO</name>
      <anchor>w5w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST_INFO</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>META_INFO</name>
      <anchor>w5w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TASK_INFO</name>
      <anchor>w5w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTE_INFO</name>
      <anchor>w5w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCHED_TASK_INFO</name>
      <anchor>w5w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCHED_INFO</name>
      <anchor>w5w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAIRN_INFO</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_INFO</name>
      <anchor>w5w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapInfoInterface</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int infoType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *infoName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInfoCount</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getInfoName</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int infoType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getInfoNames</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getMapInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int infoType, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *infoName, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setMapInfo</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const std::list&lt; ArArgumentBuilder * &gt; *mapInfo, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeInfoToFunctor</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapInfoInterface</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>CAIRN_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>CUSTOM_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>MAP_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>META_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>ROUTE_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SCHED_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>SCHED_TASK_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>TASK_INFO_NAME</name>
      <anchorfile>classArMapInfoInterface.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapInterface</name>
    <filename>classArMapInterface.html</filename>
    <base>ArMapInfoInterface</base>
    <base>ArMapObjectsInterface</base>
    <base>ArMapScanInterface</base>
    <base>ArMapSupplementInterface</base>
    <member kind="enumvalue">
      <name>MAX_MAP_NAME_LENGTH</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addMapChangedCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPostWriteFileCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPreMapChangedCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPreWriteFileCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapInterface</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>calculateChecksum</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned char *md5DigestBuffer, size_t md5DigestBufferLen)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArMapInterface *</type>
      <name>clone</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>createRealFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *fileName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArArgumentBuilder *</type>
      <name>findMapObjectParams</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *mapObjectName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getIgnoreCase</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getIgnoreEmptyFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArMapInfoInterface *</type>
      <name>getInactiveInfo</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArMapObjectsInterface *</type>
      <name>getInactiveObjects</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArLog::LogLevel</type>
      <name>getMapChangedLogLevel</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getMapId</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ArMapId *mapIdOut, bool isInternalCall=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual struct stat</type>
      <name>getReadFileStat</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getRemainder</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getScanTypes</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getTempDirectory</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLoadingDataStarted</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLoadingLinesAndDataStarted</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mapChanged</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>parseLine</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(char *line)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parsingComplete</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readFile</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const char *fileName, char *errorBuffer=NULL, size_t errorBufferLen=0, unsigned char *md5DigestBuffer=NULL, size_t md5DigestBufferLen=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>refresh</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remMapChangedCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(ArFunctor *functor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remPostWriteFileCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArFunctor *functor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remPreMapChangedCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ArFunctor *functor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remPreWriteFileCB</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(ArFunctor *functor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ArMapInterface *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const char *baseDirectory)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIgnoreCase</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(bool ignoreCase=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIgnoreEmptyFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(bool ignore)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMapChangedLogLevel</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(ArLog::LogLevel level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setMapObjectParams</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const char *mapObjectName, ArArgumentBuilder *params, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setQuiet</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(bool isQuiet)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setScanTypes</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;scanTypeList)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSourceFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const char *sourceName, const char *fileName, bool isInternalCall=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTempDirectory</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const char *tempDirectory)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tryLock</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>writeFile</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const char *fileName, bool internalCall=false, unsigned char *md5DigestBuffer=NULL, size_t md5DigestBufferLen=0, time_t fileTimestamp=-1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeObjectsToFunctor</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, bool isOverrideAsSingleScan=false, const char *maxCategory=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeToFunctor</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapInterface</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>createRealFileName</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *baseDirectory, const char *fileName, bool isIgnoreCase)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>MAP_CATEGORY_2D</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>MAP_CATEGORY_2D_EXTENDED</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>MAP_CATEGORY_2D_MULTI_SOURCES</name>
      <anchorfile>classArMapInterface.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapObject</name>
    <filename>classArMapObject.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapObject</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapObject &amp;mapObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapObject</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *type, ArPose pose, const char *description, const char *iconName, const char *name, bool hasFromTo, ArPose fromPose, ArPose toPose)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>findCenter</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseType</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileName</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getFromPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFromToRotation</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArLineSegment &gt;</type>
      <name>getFromToSegments</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getIconName</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringRepresentation</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getToPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getType</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFromTo</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *intro=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const ArMapObject &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ArMapObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const ArMapObject &amp;mapObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDescription</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *description)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapObject</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArMapObject *</type>
      <name>createMapObject</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseType</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDescription</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myFromPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArLineSegment &gt;</type>
      <name>myFromToSegments</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasFromTo</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myIconName</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myStringRepresentation</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myToPose</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myType</name>
      <anchorfile>classArMapObject.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArMapObjectCompare</name>
    <filename>structArMapObjectCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArMapObjectCompare.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMapObject *obj1, const ArMapObject *obj2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapObjects</name>
    <filename>classArMapObjects.html</filename>
    <base>ArMapObjectsInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArMapObjects &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *keyword=&quot;Cairn:&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findFirstMapObject</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *name, const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findMapObject</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name, const char *type=NULL, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt;</type>
      <name>findMapObjectsOfType</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt; *</type>
      <name>getMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeChanged</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArMapObjects &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ArMapObjects &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const std::list&lt; ArMapObject * &gt; *mapObjects, bool isSortedObjects=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeObjectListToFunctor</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createMultiSet</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArMapFileLineSet *multiSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleMapObject</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logMultiSet</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *prefix, ArMapFileLineSet *multiSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sortMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(std::list&lt; ArMapObject * &gt; *mapObjects)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsSortedObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myKeyword</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapObjects, ArArgumentBuilder * &gt;</type>
      <name>myMapObjectCB</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArMapObject * &gt;</type>
      <name>myMapObjects</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeChanged</name>
      <anchorfile>classArMapObjects.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapObjectsInterface</name>
    <filename>classArMapObjectsInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapObjectsInterface</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArMapObject *</type>
      <name>findFirstMapObject</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name, const char *type, bool isIncludeWithHeading=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArMapObject *</type>
      <name>findMapObject</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name, const char *type=NULL, bool isIncludeWithHeading=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArMapObject * &gt;</type>
      <name>findMapObjectsOfType</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *type, bool isIncludeWithHeading=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; ArMapObject * &gt; *</type>
      <name>getMapObjects</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMapObjects</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const std::list&lt; ArMapObject * &gt; *mapObjects, bool isSortedObjects=false, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeObjectListToFunctor</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapObjectsInterface</name>
      <anchorfile>classArMapObjectsInterface.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapScan</name>
    <filename>classArMapScan.html</filename>
    <base>ArMapScanInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addExtraToFileParser</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFileParser *fileParser, bool isAddLineHandler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapScan</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArMapScan &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapScan</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMaxPose</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMinPose</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArLineSegment &gt; *</type>
      <name>getLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getLinesKeyword</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMaxPose</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMinPose</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArPose &gt; *</type>
      <name>getPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getPointsKeyword</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResolution</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getScanType</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeChanged</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadDataPoint</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadLineSegment</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type>ArMapScan &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const ArMapScan &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readDataPoint</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readLineSegment</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remExtraFromFileParser</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const std::vector&lt; ArLineSegment &gt; *lines, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedLines=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const std::vector&lt; ArPose &gt; *points, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedPoints=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResolution</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(int resolution, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>unite</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArMapScan *other, bool isIncludeDataPointsAndLines=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArLineSegment &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePointsToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePointsToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArPose &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeScanToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapScan</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addHandlerToFileParser</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArFileParser *fileParser, const char *keyword, ArRetFunctor1&lt; bool, ArArgumentBuilder * &gt; *handler)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getKeywordPrefix</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleDisplayString</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIsSortedLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIsSortedPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleLine</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleLineMaxPos</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleLineMinPos</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleMaxPos</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleMinPos</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleNumLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleNumPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handlePoint</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleResolution</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseNumber</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(char *line, size_t lineLen, size_t *charCountOut, int *numOut) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parsePose</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(ArArgumentBuilder *arg, const char *keyword, ArPose *poseOut)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseWhitespace</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(char *line, size_t lineLen, size_t *charCountOut) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const std::vector&lt; ArLineSegment &gt; &amp;lines, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDisplayString</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myDisplayStringCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsSortedLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myIsSortedLinesCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsSortedPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myIsSortedPointsCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsSummaryScan</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myKeywordPrefix</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myLineCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLineMax</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myLineMaxPosCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLineMin</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myLineMinPosCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArLineSegment &gt;</type>
      <name>myLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLinesKeyword</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLogPrefix</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myMax</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myMaxPosCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myMin</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myMinPosCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumLines</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myNumLinesCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myNumPointsCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myPointCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArPose &gt;</type>
      <name>myPoints</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPointsKeyword</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myResolution</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapScan, ArArgumentBuilder * &gt;</type>
      <name>myResolutionCB</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myScanType</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeChanged</name>
      <anchorfile>classArMapScan.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapScanInterface</name>
    <filename>classArMapScanInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFileParser *fileParser)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapScanInterface</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArPose</type>
      <name>getLineMaxPose</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArPose</type>
      <name>getLineMinPose</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ArLineSegment &gt; *</type>
      <name>getLines</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArPose</type>
      <name>getMaxPose</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArPose</type>
      <name>getMinPose</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumLines</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ArPose &gt; *</type>
      <name>getPoints</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getResolution</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSortedLines</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSortedPoints</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadDataPoint</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(double x, double y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadLineSegment</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(double x1, double y1, double x2, double y2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readDataPoint</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(char *line)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readLineSegment</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(char *line)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ArFileParser *fileParser)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLines</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const std::vector&lt; ArLineSegment &gt; *lines, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedLines=false, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const std::vector&lt; ArPose &gt; *points, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedPoints=false, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setResolution</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(int resolution, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArLineSegment &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writePointsToFunctor</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArPose &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeScanToFunctor</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapScanInterface</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDefaultScanType</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *scanType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSummaryScanType</name>
      <anchorfile>classArMapScanInterface.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const char *scanType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapSimple</name>
    <filename>classArMapSimple.html</filename>
    <base>ArMapInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMapChangedCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPostWriteFileCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPreMapChangedCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPreWriteFileCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapSimple</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ArMapSimple &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapSimple</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *baseDirectory=&quot;./&quot;, const char *tempDirectory=NULL, const char *overrideMutexName=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>calculateChecksum</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned char *md5DigestBuffer, size_t md5DigestBufferLen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapInterface *</type>
      <name>clone</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>createRealFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findFirstMapObject</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *name, const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObject *</type>
      <name>findMapObject</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *name, const char *type=NULL, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArArgumentBuilder *</type>
      <name>findMapObjectParams</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *mapObjectName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt;</type>
      <name>findMapObjectsOfType</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *type, bool isIncludeWithHeading=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getBaseDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIgnoreCase</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIgnoreEmptyFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapInfoInterface *</type>
      <name>getInactiveInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArMapObjectsInterface *</type>
      <name>getInactiveObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const char *infoName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInfoCount</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getInfoName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int infoType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getInfoNames</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMaxPose</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getLineMinPose</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArLineSegment &gt; *</type>
      <name>getLines</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArLog::LogLevel</type>
      <name>getMapChangedLogLevel</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMapId</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArMapId *mapIdOut, bool isInternalCall=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getMapInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArMapObject * &gt; *</type>
      <name>getMapObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMaxPose</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getMinPose</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumLines</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOriginAltitude</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getOriginLatLong</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArPose &gt; *</type>
      <name>getPoints</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual struct stat</type>
      <name>getReadFileStat</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getRemainder</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResolution</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getScanTypes</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTempDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOriginLatLongAlt</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoadingDataStarted</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoadingLinesAndDataStarted</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedLines</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSortedPoints</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const char *scanType=ARMAP_DEFAULT_SCAN_TYPE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadDataPoint</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadLineSegment</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mapChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArMapSimple &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(const ArMapSimple &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseLine</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parsingComplete</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readDataPoint</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readFile</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const char *fileName, char *errorBuffer=NULL, size_t errorBufferLen=0, unsigned char *md5DigestBuffer=NULL, size_t md5DigestBufferLen=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readLineSegment</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>refresh</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remMapChangedCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPostWriteFileCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPreMapChangedCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remPreWriteFileCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>set</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(ArMapInterface *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBaseDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(const char *baseDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIgnoreCase</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(bool ignoreCase=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIgnoreEmptyFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(bool ignore)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(int infoType, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(const char *infoName, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLines</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(const std::vector&lt; ArLineSegment &gt; *lines, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedLines=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapChangedLogLevel</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setMapInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(const std::list&lt; ArArgumentBuilder * &gt; *mapInfo, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setMapObjectParams</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(const char *mapObjectName, ArArgumentBuilder *params, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMapObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(const std::list&lt; ArMapObject * &gt; *mapObjects, bool isSortedObjects=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginLatLongAlt</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(bool hasOriginLatLong, const ArPose &amp;originLatLong, double altitude, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(const std::vector&lt; ArPose &gt; *points, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, bool isSortedPoints=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuiet</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(bool isQuiet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResolution</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(int resolution, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setScanTypes</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;scanTypeList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(const char *sourceName, const char *fileName, bool isInternalCall=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTempDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(const char *tempDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLock</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeFile</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(const char *fileName, bool internalCall=false, unsigned char *md5DigestBuffer=NULL, size_t md5DigestBufferLen=0, time_t fileTimestamp=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInfoToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLinesToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArLineSegment &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeObjectListToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeObjectsToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, bool isOverrideAsSingleScan=false, const char *maxCategory=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePointsToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>(ArFunctor2&lt; int, std::vector&lt; ArPose &gt; * &gt; *functor, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE, ArFunctor1&lt; const char * &gt; *keywordFunctor=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeScanToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars, const char *scanType=ARMAP_DEFAULT_SCAN_TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeSupplementToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapSimple</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; ArArgumentBuilder * &gt;::iterator</type>
      <name>findMapObjectParamInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *mapObjectName, std::list&lt; ArArgumentBuilder * &gt; &amp;cairnInfoList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addScansToParser</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToCallbackList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position, std::list&lt; ArFunctor * &gt; *cbList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>createScans</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;scanTypeList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArTime</type>
      <name>findMaxMapScanTimeChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArMapScan *</type>
      <name>findScanWithDataKeyword</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(const char *myLoadingDataTag, bool *isLineDataTagOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getMapCategory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ArMapScan *</type>
      <name>getScan</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(const char *scanType) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleDataIntro</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleMapCategory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleRemainder</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleSources</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeCallbackList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(std::list&lt; ArFunctor * &gt; *cbList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isDataTag</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(const char *line)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remFromCallbackList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(ArFunctor *functor, std::list&lt; ArFunctor * &gt; *cbList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>remScansFromParser</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(bool isRemovePointsAndLinesKeywords=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setInactiveInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(const char *infoName, const std::list&lt; ArArgumentBuilder * &gt; *infoList, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInactiveObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(const std::list&lt; ArMapObject * &gt; *mapObjects, bool isSortedObjects=false, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMapCategory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b18</anchor>
      <arglist>(const char *updatedInfoName=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMapFileInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b19</anchor>
      <arglist>(const char *realFileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSummaryScan</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeScanTypesToFunctor</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>b21</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getNextFileNumber</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myBaseDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMD5Calculator *</type>
      <name>myChecksumCalculator</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapSimple, ArArgumentBuilder * &gt;</type>
      <name>myDataIntroCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDataTagToScanTypeMap</type>
      <name>myDataTagToScanTypeMap</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreCase</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreEmptyFileName</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapInfo *const</type>
      <name>myInactiveInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapObjects *const</type>
      <name>myInactiveObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsQuiet</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsWriteToTempFile</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLoadingDataStarted</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLoadingDataTag</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLoadingGotMapCategory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLoadingLinesAndDataStarted</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFileParser *</type>
      <name>myLoadingParser</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapScan *</type>
      <name>myLoadingScan</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myMapCategory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapSimple, ArArgumentBuilder * &gt;</type>
      <name>myMapCategoryCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myMapCategoryList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapChangedHelper *</type>
      <name>myMapChangedHelper</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapId</type>
      <name>myMapId</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapInfo *const</type>
      <name>myMapInfo</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ArArgumentBuilder *, ArStrCaseCmpOp &gt;</type>
      <name>myMapObjectNameToParamsMap</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapObjects *const</type>
      <name>myMapObjects</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapSupplement *const</type>
      <name>myMapSupplement</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myPostWriteCBList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myPreWriteCBList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stat</type>
      <name>myReadFileStat</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArArgumentBuilder * &gt;</type>
      <name>myRemainderList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapSimple, ArArgumentBuilder * &gt;</type>
      <name>myRemCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>myScanTypeList</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapSimple, ArArgumentBuilder * &gt;</type>
      <name>mySourcesCB</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMapScan *</type>
      <name>mySummaryScan</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myTempDirectory</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeMapInfoChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeMapObjectsChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeMapScanChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeMapSupplementChanged</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypeToScanMap</type>
      <name>myTypeToScanMap</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>ourTempFileNumber</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>ourTempFileNumberMutex</name>
      <anchorfile>classArMapSimple.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapSupplement</name>
    <filename>classArMapSupplement.html</filename>
    <base>ArMapSupplementInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addToFileParser</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapSupplement</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ArMapSupplement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMapSupplement</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOriginAltitude</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>getOriginLatLong</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeChanged</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOriginLatLongAlt</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArMapSupplement &amp;</type>
      <name>operator=</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ArMapSupplement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remFromFileParser</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArFileParser *fileParser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginLatLongAlt</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(bool hasOriginLatLong, const ArPose &amp;originLatLong, double altitude, ArMapChangeDetails *changeDetails=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeSupplementToFunctor</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapSupplement</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleOriginLatLongAlt</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArArgumentBuilder *arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasOriginLatLongAlt</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myOriginAltitude</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myOriginLatLong</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArMapSupplement, ArArgumentBuilder * &gt;</type>
      <name>myOriginLatLongAltCB</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeChanged</name>
      <anchorfile>classArMapSupplement.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMapSupplementInterface</name>
    <filename>classArMapSupplementInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>ArMapSupplementInterface</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getOriginAltitude</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArPose</type>
      <name>getOriginLatLong</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasOriginLatLongAlt</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOriginLatLongAlt</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(bool hasOriginLatLong, const ArPose &amp;originLatLong, double altitude, ArMapChangeDetails *changeDetails=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeSupplementToFunctor</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, const char *endOfLineChars)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMapSupplementInterface</name>
      <anchorfile>classArMapSupplementInterface.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMath</name>
    <filename>classArMath.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>addAngle</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(double ang1, double ang2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>angleBetween</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(double angle, double startAngle, double endAngle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>atan2</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(double y, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cos</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>degToRad</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>distanceBetween</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>epsilon</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>fabs</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>fixAngle</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getRandMax</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>log2</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pointRotate</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(double *x, double *y, double th)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>radToDeg</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(double rad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>random</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>randomInRange</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(long m, long n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>roundInt</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>roundShort</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>sin</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>squaredDistanceBetween</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>subAngle</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(double ang1, double ang2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>tan</name>
      <anchorfile>classArMath.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>(double angle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMD5Calculator</name>
    <filename>classArMD5Calculator.html</filename>
    <member kind="enumvalue">
      <name>DIGEST_LENGTH</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISPLAY_LENGTH</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMD5Calculator</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *secondFunctor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getDigest</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor1&lt; const char * &gt; *</type>
      <name>getFunctor</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor1&lt; const char * &gt; *</type>
      <name>getSecondFunctor</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecondFunctor</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *secondFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArMD5Calculator</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>calculateChecksum</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *fileName, unsigned char *md5DigestBuffer, size_t md5DigestBufferLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>toDisplay</name>
      <anchorfile>classArMD5Calculator.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const unsigned char *digestBuf, size_t digestLength, char *displayBuf, size_t displayLength)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMode</name>
    <filename>classArMode.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMode</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>baseActivate</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>baseDeactivate</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getKey</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getKey2</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMode</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>baseHelp</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addKeyHandler</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int keyToHandle, ArFunctor *functor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remKeyHandler</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArMode &gt;</type>
      <name>myActivateCB</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArMode &gt;</type>
      <name>myDeactivateCB</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myKey</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myKey2</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArMode &gt;</type>
      <name>myUserTaskCB</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMode *</type>
      <name>ourActiveMode</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalFunctor *</type>
      <name>ourHelpCB</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; ArMode * &gt;</type>
      <name>ourModes</name>
      <anchorfile>classArMode.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeActs</name>
    <filename>classArModeActs.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeActs</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2, ArACTS_1_2 *acts=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel1</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel2</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel3</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel4</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel5</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel6</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel7</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channel8</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toggleAcquire</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeActs</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPTZ *</type>
      <name>camera</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArACTS_1_2 *</type>
      <name>myActs</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel1CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel2CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel3CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel4CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel5CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel6CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel7CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myChannel8CB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionGroupColorFollow *</type>
      <name>myGroup</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myStartCB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myStopCB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeActs &gt;</type>
      <name>myToggleAcquireCB</name>
      <anchorfile>classArModeActs.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeCamera</name>
    <filename>classArModeCamera.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>amptu</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>amptuSerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeCamera</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aux1</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aux2</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>canon</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>canonInverted</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>canonInvertedSerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>canonSerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>center</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com1</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com2</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com3</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com4</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>down</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dpptu</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dpptuSerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exercise</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rvisionSerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sony</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sonySerial</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>up</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zoomIn</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zoomOut</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeCamera</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>auxToMovement</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cameraToAux</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cameraToMovement</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cameraToPort</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>giveUpAuxKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>giveUpCameraKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>giveUpMovementKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>giveUpPortKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>helpAuxKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>helpCameraKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>helpMovementKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>helpPortKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>portToMovement</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takeAuxKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takeCameraKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takeMovementKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takePortKeys</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myAmptuCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myAmptuSerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myAux1CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myAux2CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPTZ *</type>
      <name>myCam</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCanonCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCanonInvertedCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCanonInvertedSerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCanonSerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCenterCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCom1CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCom2CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCom3CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myCom4CB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSerialConnection</type>
      <name>myConn</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myDownCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myDpptuCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myDpptuSerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myExerciseCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myExercising</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExerState</type>
      <name>myExerState</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myExerZoomedIn</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastExer</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastExerZoomed</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myLeftCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myRightCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myRVisionSerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>mySonyCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>mySonySerialCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myUpCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myZoomInCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeCamera &gt;</type>
      <name>myZoomOutCB</name>
      <anchorfile>classArModeCamera.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeGripper</name>
    <filename>classArModeGripper.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeGripper</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>down</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exercise</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>up</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeGripper</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myCloseCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myDownCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myExerciseCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myExercising</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExerState</type>
      <name>myExerState</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArGripper</type>
      <name>myGripper</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastExer</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myOpenCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myStopCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeGripper &gt;</type>
      <name>myUpCB</name>
      <anchorfile>classArModeGripper.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeSonar</name>
    <filename>classArModeSonar.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fourthSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>secondSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thirdSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeSonar</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeSonar &gt;</type>
      <name>myAllSonarCB</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeSonar &gt;</type>
      <name>myFirstSonarCB</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeSonar &gt;</type>
      <name>myFourthSonarCB</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeSonar &gt;</type>
      <name>mySecondSonarCB</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArModeSonar &gt;</type>
      <name>myThirdSonarCB</name>
      <anchorfile>classArModeSonar.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeTCM2</name>
    <filename>classArModeTCM2.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeTCM2</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2, ArTCM2 *tcm2=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeTCM2</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCompassConnector *</type>
      <name>connector</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myAutoCalibrationCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myCompassCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myContinuousPacketsCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myOffCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myOnePacketCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myResetCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myStopCalibrationCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTCM2 *</type>
      <name>myTCM2</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArTCM2 &gt; *</type>
      <name>myUserCalibrationCB</name>
      <anchorfile>classArModeTCM2.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeTeleop</name>
    <filename>classArModeTeleop.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeTeleop</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeTeleop</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionGroupRatioDrive</type>
      <name>myGroup</name>
      <anchorfile>classArModeTeleop.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeUnguardedTeleop</name>
    <filename>classArModeUnguardedTeleop.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeUnguardedTeleop</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeUnguardedTeleop</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionGroupRatioDriveUnsafe</type>
      <name>myGroup</name>
      <anchorfile>classArModeUnguardedTeleop.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModeWander</name>
    <filename>classArModeWander.html</filename>
    <base>ArMode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArModeWander</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, const char *name, char key, char key2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>help</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTask</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModeWander</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionGroupWander</type>
      <name>myGroup</name>
      <anchorfile>classArModeWander.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModule</name>
    <filename>classArModule.html</filename>
    <member kind="function">
      <type></type>
      <name>ArModule</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>exit</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArRobot *robot, void *argument=NULL)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobot</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArModule</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArModule.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArModuleLoader</name>
    <filename>classArModuleLoader.html</filename>
    <member kind="typedef">
      <type>void *</type>
      <name>DllRef</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Status</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchor>w1w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ALREADY_LOADED</name>
      <anchor>w1w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED_OPEN</name>
      <anchor>w1w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_INVALID</name>
      <anchor>w1w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_INIT_FAILED</name>
      <anchor>w1w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_EXIT_FAILED</name>
      <anchor>w1w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_FOUND</name>
      <anchor>w1w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Status</type>
      <name>close</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *modName, bool quiet=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>closeAll</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Status</type>
      <name>load</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const char *modName, ArRobot *robot, void *modArgument=NULL, bool quiet=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Status</type>
      <name>reload</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const char *modName, ArRobot *robot, void *modArgument=NULL, bool quiet=false)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::map&lt; std::string, DllRef &gt;</type>
      <name>ourModMap</name>
      <anchorfile>classArModuleLoader.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArMutex</name>
    <filename>classArMutex.html</filename>
    <member kind="typedef">
      <type>pthread_mutex_t</type>
      <name>MutexType</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Status</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED_INIT</name>
      <anchor>w1w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED</name>
      <anchor>w1w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ALREADY_LOCKED</name>
      <anchor>w1w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMutex</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArMutex</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getError</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int messageNumber) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MutexType &amp;</type>
      <name>getMutex</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLog</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(bool log)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogName</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *logName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogNameVar</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *logName,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLock</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArMutex</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getLockWarningTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getUnlockWarningTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLockWarningTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(double lockWarningSeconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setUnlockWarningTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(double unlockWarningSeconds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkLockTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkUnlockTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initLockTiming</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startLockTimer</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startUnlockTimer</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>uninitLockTiming</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFailedInit</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstLock</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime *</type>
      <name>myLockStarted</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime *</type>
      <name>myLockTime</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLog</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myLogName</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MutexType</type>
      <name>myMutex</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNonRecursive</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArStrMap</type>
      <name>myStrMap</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWasAlreadyLocked</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned int</type>
      <name>ourLockWarningMS</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArFunctor *</type>
      <name>ourNonRecursiveDeadlockFunctor</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned int</type>
      <name>ourUnlockWarningMS</name>
      <anchorfile>classArMutex.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArNetServer</name>
    <filename>classArNetServer.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addCommand</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *command, ArFunctor3&lt; char **, int, ArSocket * &gt; *functor, const char *help)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArNetServer</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool addAriaExitCB=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtraString</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoggingDataReceived</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoggingDataSent</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseWrongEndChars</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalAddSocketToDeleteList</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalAddSocketToList</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalEcho</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(char **argv, int argc, ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalGreeting</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalHelp</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(char **argv, int argc, ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalHelp</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalQuit</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(char **argv, int argc, ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>internalShutdownServer</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(char **argv, int argc, ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lock</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ArRobot *robot, unsigned int port, const char *password, bool multipleClients=true, const char *openOnIP=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseCommandOnSocket</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ArArgumentBuilder *args, ArSocket *socket, bool allowLog=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remCommand</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *command)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runOnce</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToAllClients</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToAllClientsPlain</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToClient</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ArSocket *socket, const char *ipString, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToClientPlain</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ArSocket *socket, const char *ipString, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraString</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoggingDataReceived</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(bool loggingData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoggingDataSent</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(bool loggingData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseWrongEndChars</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(bool useWrongEndChars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squelchNormal</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryLock</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlock</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArNetServer</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSocket</type>
      <name>myAcceptingSocket</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArNetServer &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSocket * &gt;</type>
      <name>myConnectingConns</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSocket * &gt;</type>
      <name>myConns</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSocket * &gt;</type>
      <name>myDeleteList</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor3C&lt; ArNetServer, char **, int, ArSocket * &gt;</type>
      <name>myEchoCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myExtraString</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ArFunctor3&lt; char **, int, ArSocket * &gt; *, ArStrCaseCmpOp &gt;</type>
      <name>myFunctorMap</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor3C&lt; ArNetServer, char **, int, ArSocket * &gt;</type>
      <name>myHelpCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string, ArStrCaseCmpOp &gt;</type>
      <name>myHelpMap</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLoggingDataReceived</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLoggingDataSent</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myMultipleClients</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOpened</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPassword</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myPort</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor3C&lt; ArNetServer, char **, int, ArSocket * &gt;</type>
      <name>myQuitCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSocket</type>
      <name>myServerSocket</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor3C&lt; ArNetServer, char **, int, ArSocket * &gt;</type>
      <name>myShutdownServerCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySquelchNormal</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArNetServer &gt;</type>
      <name>myTaskCB</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseWrongEndChars</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWantToClose</name>
      <anchorfile>classArNetServer.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArNMEAParser</name>
    <filename>classArNMEAParser.html</filename>
    <member kind="enumvalue">
      <name>ParseFinished</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ParseError</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ParseData</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ParseUpdated</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArFunctor1&lt; ArNMEAParser::Message &gt;</type>
      <name>Handler</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ArNMEAParser::Handler * &gt;</type>
      <name>HandlerMap</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>MessageVector</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHandler</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *message, ArNMEAParser::Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArNMEAParser</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name=&quot;NMEA Parser&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ArNMEAParser::HandlerMap &amp;</type>
      <name>getHandlersRef</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *buf, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArDeviceConnection *dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeHandler</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreChecksum</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(bool ignore)</arglist>
    </member>
    <member kind="variable">
      <type>enum ArNMEAParser::@14</type>
      <name>ParseFlags</name>
      <anchorfile>classArNMEAParser.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ArNMEAParser::Message</class>
  </compound>
  <compound kind="struct">
    <name>ArNMEAParser::Message</name>
    <filename>structArNMEAParser_1_1Message.html</filename>
    <member kind="variable">
      <type>ArNMEAParser::MessageVector *</type>
      <name>message</name>
      <anchorfile>structArNMEAParser_1_1Message.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTime</type>
      <name>timeParseStarted</name>
      <anchorfile>structArNMEAParser_1_1Message.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArNovatelGPS</name>
    <filename>classArNovatelGPS.html</filename>
    <base virtualness="virtual">ArGPS</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNovatelGPGGA</name>
      <anchorfile>classArNovatelGPS.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initDevice</name>
      <anchorfile>classArNovatelGPS.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArNovatelGPS, ArNMEAParser::Message &gt;</type>
      <name>myNovatelGPGGAHandler</name>
      <anchorfile>classArNovatelGPS.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArNovatelSPAN</name>
    <filename>classArNovatelSPAN.html</filename>
    <base virtualness="virtual">ArNovatelGPS</base>
    <member kind="variable">
      <type>double</type>
      <name>GPSLatitude</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>GPSLongitude</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTime</type>
      <name>GPSTimestamp</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GPSValidFlag</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haveGPSPosition</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTime</type>
      <name>timeGotGPSPosition</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGPRMC</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleINGLL</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArNMEAParser::Message msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initDevice</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArNovatelSPAN, ArNMEAParser::Message &gt;</type>
      <name>myGPRMCHandler</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1C&lt; ArNovatelSPAN, ArNMEAParser::Message &gt;</type>
      <name>myINGLLHandler</name>
      <anchorfile>classArNovatelSPAN.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArP2Arm</name>
    <filename>classArP2Arm.html</filename>
    <member kind="enumeration">
      <name>PacketType</name>
      <anchor>w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StatusPacket</name>
      <anchor>w11w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InfoPacket</name>
      <anchor>w11w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCESS</name>
      <anchor>w13w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALREADY_INITED</name>
      <anchor>w13w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_INITED</name>
      <anchor>w13w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROBOT_NOT_SETUP</name>
      <anchor>w13w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ARM_FOUND</name>
      <anchor>w13w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMM_FAILED</name>
      <anchor>w13w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COULD_NOT_OPEN_PORT</name>
      <anchor>w13w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COULD_NOT_SET_UP_PORT</name>
      <anchor>w13w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALREADY_CONNECTED</name>
      <anchor>w13w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_CONNECTED</name>
      <anchor>w13w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_JOINT</name>
      <anchor>w13w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_POSITION</name>
      <anchor>w13w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StatusType</name>
      <anchor>w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StatusOff</name>
      <anchor>w18w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StatusSingle</name>
      <anchor>w18w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StatusContinuous</name>
      <anchor>w18w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArP2Arm</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>checkArm</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool waitForResponse=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>convertDegToTicks</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int joint, float pos, unsigned char *ticks)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>convertTicksToDeg</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int joint, unsigned char pos, float *degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getArmVersion</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2ArmJoint *</type>
      <name>getJoint</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int joint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getJointPos</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int joint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getJointPosTicks</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int joint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getLastStatusTime</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMoving</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int joint=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>home</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int joint=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>init</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPowered</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>moveStep</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int joint, float pos, unsigned char vel=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>moveStepTicks</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int joint, signed char pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>moveTo</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int joint, float pos, unsigned char vel=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>moveToTicks</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int joint, unsigned char pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>moveVel</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int joint, int vel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>park</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>powerOff</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>powerOn</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(bool doWait=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>requestInfo</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>requestInit</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>requestStatus</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(StatusType status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>setAutoParkTimer</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int waitSecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>setGripperParkTimer</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int waitSecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketCB</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ArFunctor1&lt; PacketType &gt; *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobot</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStoppedCB</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArFunctor *func)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>stop</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State</type>
      <name>uninit</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArP2Arm</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmGood</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmHoming</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmInited</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint1</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint2</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint3</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint4</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint5</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmJoint6</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ArmPower</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>NumJoints</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>armPacketHandler</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmAutoPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(int waitSecs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmCheckArm</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmGripperPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(int waitSecs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmHome</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(unsigned char joint=0xff)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmInfo</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmInit</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmPos</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(unsigned char joint, unsigned char pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmPower</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(bool on)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmSpeed</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(unsigned char joint, unsigned char speed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmStats</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(StatusType stats=StatusSingle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>comArmStop</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(unsigned char joint=0xff)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; State, ArP2Arm &gt;</type>
      <name>myAriaUninitCB</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArP2Arm, ArRobotPacket * &gt;</type>
      <name>myArmPacketHandler</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSerialConnection</type>
      <name>myCon</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInited</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2ArmJoint</type>
      <name>myJoints</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p4</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastInfoTime</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myLastStatus</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastStatusTime</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor1&lt; PacketType &gt; *</type>
      <name>myPacketCB</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myStatus</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatusType</type>
      <name>myStatusRequest</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>myStoppedCB</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myVersion</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>ARMINFOpac</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>ARMpac</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmAutoPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmCheckArm</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmGripperPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmHome</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmInfo</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmInit</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmPark</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmPos</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmPower</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmSpeed</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmStats</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>ComArmStop</name>
      <anchorfile>classArP2Arm.html</anchorfile>
      <anchor>t13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2ArmJoint</name>
    <filename>classP2ArmJoint.html</filename>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myCenter</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myHome</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myMax</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myMin</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myPos</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myTicksPer90</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArTypes::UByte</type>
      <name>myVel</name>
      <anchorfile>classP2ArmJoint.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPixelDevice</name>
    <filename>classArPixelDevice.html</filename>
    <templarg>DataObject</templarg>
    <member kind="function">
      <type></type>
      <name>ArPixelDevice</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int x_size, int y_size, double x_fov, double y_fov, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DataObject ***</type>
      <name>getRawSensorData</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DataObject ***</type>
      <name>getRawSensorXYZ</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DataObject *</type>
      <name>getSensorData</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>DataObject *</type>
      <name>getSensorXYZ</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXDimension</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getXFOV</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getYDimension</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYFOV</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lockDevice</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLockDevice</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlockDevice</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArPixelDevice</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allocateSensorDataMemory</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allocateSensorXYZMemory</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDeviceMutex</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataObject ***</type>
      <name>mySensorData</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataObject ***</type>
      <name>mySensorXYZ</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myXFOV</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myXSize</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myYFOV</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myYSize</name>
      <anchorfile>classArPixelDevice.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPose</name>
    <filename>classArPose.html</filename>
    <member kind="function">
      <type></type>
      <name>ArPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double x=0, double y=0, double th=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>findAngleTo</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArPose position) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>findDistanceTo</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArPose position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double *x, double *y, double *th=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTh</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThRad</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator!=</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ArPose &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>operator+</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ArPose &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose &amp;</type>
      <name>operator+=</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const ArPose &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArPose</type>
      <name>operator-</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const ArPose &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose &amp;</type>
      <name>operator-=</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const ArPose &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const ArPose &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const ArPose &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ArPose position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(double x, double y, double th=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTh</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double th)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThRad</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double th)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>squaredFindDistanceTo</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ArPose position) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArPose</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTh</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myX</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myY</name>
      <anchorfile>classArPose.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArPoseCmpOp</name>
    <filename>structArPoseCmpOp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArPoseCmpOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArPose &amp;pose1, const ArPose &amp;pose2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPoseWithTime</name>
    <filename>classArPoseWithTime.html</filename>
    <base>ArPose</base>
    <member kind="function">
      <type></type>
      <name>ArPoseWithTime</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ArPose &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArPoseWithTime</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double x=0, double y=0, double th=0, ArTime thisTime=ArTime())</arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getTime</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArTime newTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeToNow</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTime</name>
      <anchorfile>classArPoseWithTime.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPriority</name>
    <filename>classArPriority.html</filename>
    <member kind="enumvalue">
      <name>PRIORITY_COUNT</name>
      <anchor>w0w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Priority</name>
      <anchor>w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPORTANT</name>
      <anchor>w10w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC</name>
      <anchor>w10w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchor>w10w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERMEDIATE</name>
      <anchor>w10w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DETAILED</name>
      <anchor>w10w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIVIAL</name>
      <anchor>w10w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADVANCED</name>
      <anchor>w10w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPERT</name>
      <anchor>w10w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FACTORY</name>
      <anchor>w10w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_PRIORITY</name>
      <anchor>w10w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getPriorityName</name>
      <anchorfile>classArPriority.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(Priority priority)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::map&lt; Priority, std::string &gt;</type>
      <name>ourPriorityNames</name>
      <anchorfile>classArPriority.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>ourStringsInited</name>
      <anchorfile>classArPriority.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourUnknownPriorityName</name>
      <anchorfile>classArPriority.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPriorityResolver</name>
    <filename>classArPriorityResolver.html</filename>
    <base>ArResolver</base>
    <member kind="function">
      <type></type>
      <name>ArPriorityResolver</name>
      <anchorfile>classArPriorityResolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArActionDesired *</type>
      <name>resolve</name>
      <anchorfile>classArPriorityResolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArResolver::ActionMap *actions, ArRobot *robot, bool logActions=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArPriorityResolver</name>
      <anchorfile>classArPriorityResolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myActionDesired</name>
      <anchorfile>classArPriorityResolver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArPTZ</name>
    <filename>classArPTZ.html</filename>
    <member kind="function">
      <type></type>
      <name>ArPTZ</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetFOV</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealPanTilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSetFocus</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSetGain</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectHandler</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAuxPort</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFocus</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double focus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMaxZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMinZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGain</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(double gain) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMinZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getZoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>packetHandler</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ArBasePacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pan</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(double degrees)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>panRel</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(double degrees)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>panTilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(double degreesPan, double degreesTilt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(double degreesPan, double degreesTilt)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArBasePacket *</type>
      <name>readPacket</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>robotPacketHandler</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ArBasePacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sensorInterpHandler</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAuxPort</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(int auxPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ArDeviceConnection *connection, bool driveFromRobotLoop=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFocus</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(double focus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setGain</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(double gain) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tilt</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(double degrees)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tiltRel</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(double degrees)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoom</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoomRel</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArPTZ</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAuxPort</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCommands::Commands</type>
      <name>myAuxRxCmd</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCommands::Commands</type>
      <name>myAuxTxCmd</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArPTZ &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArPTZ, ArRobotPacket * &gt;</type>
      <name>myRobotPacketHandlerCB</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArPTZ &gt;</type>
      <name>mySensorInterpCB</name>
      <anchorfile>classArPTZ.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRangeBuffer</name>
    <filename>classArRangeBuffer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addReading</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReadingConditional</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double x, double y, double closeDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArTransform trans)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRangeBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginInvalidationSweep</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginRedoBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearOlderThan</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int milliSeconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearOlderThanSeconds</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endInvalidationSweep</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endRedoBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ArPoseWithTime &gt; *</type>
      <name>getBufferAsVector</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getClosestBox</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose position, unsigned int maxRange, ArPose *readingPos=NULL, ArPose targetPose=ArPose(0, 0, 0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getClosestPolar</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(double startAngle, double endAngle, ArPose position, unsigned int maxRange, double *angle=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEncoderPoseTaken</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPoseTaken</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateReading</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(std::list&lt; ArPoseWithTime * &gt;::iterator readingIt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redoReading</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderPoseTaken</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(ArPose p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoseTaken</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ArPose p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRangeBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getClosestBoxInList</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose position, unsigned int maxRange, ArPose *readingPos, ArPose targetPose, const std::list&lt; ArPoseWithTime * &gt; *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getClosestPolarInList</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(double startAngle, double endAngle, ArPose position, unsigned int maxRange, double *angle, const std::list&lt; ArPoseWithTime * &gt; *buffer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPoseWithTime * &gt;</type>
      <name>myBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myBufferPose</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myEncoderBufferPose</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHitEnd</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPoseWithTime * &gt;</type>
      <name>myInvalidBuffer</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::list&lt; ArPoseWithTime * &gt;::iterator &gt;::iterator</type>
      <name>myInvalidIt</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::list&lt; ArPoseWithTime * &gt;::iterator &gt;</type>
      <name>myInvalidSweepList</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPoseWithTime * &gt;::iterator</type>
      <name>myIterator</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumRedone</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPoseWithTime *</type>
      <name>myReading</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPoseWithTime * &gt;::iterator</type>
      <name>myRedoIt</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArPoseWithTime * &gt;::reverse_iterator</type>
      <name>myRevIterator</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mySize</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArPoseWithTime &gt;</type>
      <name>myVector</name>
      <anchorfile>classArRangeBuffer.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRangeDevice</name>
    <filename>classArRangeDevice.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addReading</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyTransform</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTransform trans, bool doCumulative=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRangeDevice</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(size_t currentBufferSize, size_t cumulativeBufferSize, const char *name, unsigned int maxRange, int maxSecondsToKeepCurrent=0, int maxSecondsToKeepCumulative=0, double maxDistToKeepCumulative=0, bool locationDependent=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearCumulativeOlderThan</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int milliSeconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearCumulativeOlderThanSeconds</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int seconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearCumulativeReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearCurrentReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cumulativeReadingBox</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose *readingPos=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cumulativeReadingPolar</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double startAngle, double endAngle, double *angle=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>currentReadingBox</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose *readingPos=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>currentReadingPolar</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double startAngle, double endAngle, double *angle=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::list&lt; ArSensorReading * &gt; *</type>
      <name>getAdjustedRawReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArSensorReading &gt; *</type>
      <name>getAdjustedRawReadingsAsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getCumulativeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getCumulativeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArPoseWithTime &gt; *</type>
      <name>getCumulativeBufferAsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArDrawingData *</type>
      <name>getCumulativeDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArRangeBuffer *</type>
      <name>getCumulativeRangeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArRangeBuffer *</type>
      <name>getCumulativeRangeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getCurrentBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::list&lt; ArPoseWithTime * &gt; *</type>
      <name>getCurrentBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArPoseWithTime &gt; *</type>
      <name>getCurrentBufferAsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArDrawingData *</type>
      <name>getCurrentDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArRangeBuffer *</type>
      <name>getCurrentRangeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ArRangeBuffer *</type>
      <name>getCurrentRangeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDistToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxInsertDistCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMaxRange</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxSecondsToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxSecondsToKeepCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinDistBetweenCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinDistBetweenCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::list&lt; ArSensorReading * &gt; *</type>
      <name>getRawReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArSensorReading &gt; *</type>
      <name>getRawReadingsAsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocationDependent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lockDevice</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumulativeBufferSize</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumulativeDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(ArDrawingData *data, bool takeOwnershipOfData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentBufferSize</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(ArDrawingData *data, bool takeOwnershipOfData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(double maxDistToKeepCumulative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxInsertDistCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(double maxInsertDistCumulative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxRange</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(unsigned int maxRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSecondsToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(int maxSecondsToKeepCumulative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSecondsToKeepCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(int maxSecondsToKeepCurrent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinDistBetweenCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(double minDistBetweenCumulative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinDistBetweenCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(double minDistBetweenCurrent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLockDevice</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlockDevice</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRangeDevice</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adjustRawReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(bool interlaced)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>filterCallback</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myAdjustedRawReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArSensorReading &gt;</type>
      <name>myAdjustedRawReadingsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRangeBuffer</type>
      <name>myCumulativeBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDrawingData *</type>
      <name>myCumulativeDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRangeBuffer</type>
      <name>myCurrentBuffer</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDrawingData *</type>
      <name>myCurrentDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDeviceMutex</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRangeDevice &gt;</type>
      <name>myFilterCB</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsLocationDependent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxDistToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxDistToKeepCumulativeSquared</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxInsertDistCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myMaxInsertDistCumulativePose</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMaxInsertDistCumulativeSquared</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myMaxRange</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxSecondsToKeepCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMaxSecondsToKeepCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDistBetweenCumulative</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDistBetweenCumulativeSquared</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDistBetweenCurrent</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMinDistBetweenCurrentSquared</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnCumulativeDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnCurrentDrawingData</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myRawReadings</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ArSensorReading &gt;</type>
      <name>myRawReadingsVector</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRangeDevice.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRangeDeviceThreaded</name>
    <filename>classArRangeDeviceThreaded.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function">
      <type></type>
      <name>ArRangeDeviceThreaded</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_t currentBufferSize, size_t cumulativeBufferSize, const char *name, unsigned int maxRange, int maxSecondsTokeepCurrent=0, int maxSecondsToKeepCumulative=0, double maxDistToKeepCumulative=0, bool locationDependent=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRunning</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRunningWithLock</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lockDevice</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAsync</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void *arg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stopRunning</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryLockDevice</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlockDevice</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRangeDeviceThreaded</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; void *, ArRangeDeviceThreaded, void * &gt;</type>
      <name>myRunThreadCB</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorASyncTask</type>
      <name>myTask</name>
      <anchorfile>classArRangeDeviceThreaded.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRatioInputJoydrive</name>
    <filename>classArRatioInputJoydrive.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRatioInputJoydrive</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, ArActionRatioInput *input, int priority=50, bool stopIfNoButtonPressed=false, bool useOSCalForJoystick=true)</arglist>
    </member>
    <member kind="function">
      <type>ArJoyHandler *</type>
      <name>getJoyHandler</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStopIfNoButtonPressed</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseOSCal</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>joystickInited</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopIfNoButtonPressed</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(bool stopIfNoButtonPressed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseOSCal</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(bool useOSCal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRatioInputJoydrive</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fireCallback</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputJoydrive &gt;</type>
      <name>myFireCB</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFiredLast</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionRatioInput *</type>
      <name>myInput</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArJoyHandler *</type>
      <name>myJoyHandler</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPreviousUseOSCal</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPrinting</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStopIfNoButtonPressed</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseOSCal</name>
      <anchorfile>classArRatioInputJoydrive.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRatioInputKeydrive</name>
    <filename>classArRatioInputKeydrive.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRatioInputKeydrive</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, ArActionRatioInput *input, int priority=25, double velIncrement=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>down</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getFireCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>giveUpKeys</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>space</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeKeys</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>up</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>x</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>z</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRatioInputKeydrive</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fireCallback</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myActivateCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myDeactivateCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myDownCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myFireCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveKeys</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionRatioInput *</type>
      <name>myInput</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatRatio</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatVelIncrement</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myLeftCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPrinting</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myRightCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotRatio</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>mySpaceCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myThrottle</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransRatio</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myUpCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVelIncrement</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myXCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputKeydrive &gt;</type>
      <name>myZCB</name>
      <anchorfile>classArRatioInputKeydrive.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRatioInputRobotJoydrive</name>
    <filename>classArRatioInputRobotJoydrive.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRatioInputRobotJoydrive</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, ArActionRatioInput *input, int priority=75, bool requireDeadmanPushed=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRatioInputRobotJoydrive</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fireCallback</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDeadZoneLast</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRatioInputRobotJoydrive &gt;</type>
      <name>myFireCB</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionRatioInput *</type>
      <name>myInput</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequireDeadmanPushed</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotJoyHandler *</type>
      <name>myRobotJoyHandler</name>
      <anchorfile>classArRatioInputRobotJoydrive.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRecurrentTask</name>
    <filename>classArRecurrentTask.html</filename>
    <base>ArASyncTask</base>
    <member kind="function">
      <type></type>
      <name>ArRecurrentTask</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kill</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>runThread</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>task</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRecurrentTask</name>
      <anchorfile>classArRecurrentTask.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArResolver</name>
    <filename>classArResolver.html</filename>
    <member kind="typedef">
      <type>std::multimap&lt; int, ArAction * &gt;</type>
      <name>ActionMap</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArResolver</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name, const char *description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDescription</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArActionDesired *</type>
      <name>resolve</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ActionMap *actions, ArRobot *robot, bool logActions=false)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArResolver</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myDescription</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArResolver.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor</name>
    <filename>classArRetFunctor.html</filename>
    <templarg>Ret</templarg>
    <base>ArFunctor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchorfile>classArRetFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor</name>
      <anchorfile>classArRetFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor1</name>
    <filename>classArRetFunctor1.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <base>ArRetFunctor</base>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor1.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor1.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor1</name>
      <anchorfile>classArRetFunctor1.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor1C</name>
    <filename>classArRetFunctor1C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <base>ArRetFunctor1</base>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor1C</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArRetFunctor1C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor2</name>
    <filename>classArRetFunctor2.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArRetFunctor1</base>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor2</name>
      <anchorfile>classArRetFunctor2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor2C</name>
    <filename>classArRetFunctor2C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>ArRetFunctor2</base>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor2C</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArRetFunctor2C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor3</name>
    <filename>classArRetFunctor3.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArRetFunctor2</base>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor3</name>
      <anchorfile>classArRetFunctor3.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor3C</name>
    <filename>classArRetFunctor3C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>ArRetFunctor3</base>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor3C</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArRetFunctor3C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor4</name>
    <filename>classArRetFunctor4.html</filename>
    <templarg>Ret</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArRetFunctor3</base>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(P1 p1, P2 p2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(P1 p1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor4</name>
      <anchorfile>classArRetFunctor4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctor4C</name>
    <filename>classArRetFunctor4C.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>ArRetFunctor4</base>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T *obj, Ret(T::*func)(P1, P2, P3, P4))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4), P1 p1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(P1, P2, P3, P4))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3, P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(P1 p1, P2 p2, P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(P1 p1, P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP1</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(P1 p1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(P2 p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP3</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(P3 p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(P4 p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctor4C</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(P1, P2, P3, P4)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P1</type>
      <name>myP1</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2</type>
      <name>myP2</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P3</type>
      <name>myP3</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4</type>
      <name>myP4</name>
      <anchorfile>classArRetFunctor4C.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRetFunctorC</name>
    <filename>classArRetFunctorC.html</filename>
    <templarg>Ret</templarg>
    <templarg>T</templarg>
    <base>ArRetFunctor</base>
    <member kind="function">
      <type></type>
      <name>ArRetFunctorC</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *obj, Ret(T::*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctorC</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T &amp;obj, Ret(T::*func)(void))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRetFunctorC</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ret</type>
      <name>invokeR</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThis</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRetFunctorC</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ret(T::*</type>
      <name>myFunc</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>p0</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>myObj</name>
      <anchorfile>classArRetFunctorC.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRingQueue</name>
    <filename>classArRingQueue.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>advance_back</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance_front</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRingQueue</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int capacity, T init_value)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; T &gt;::iterator</type>
      <name>back</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; T &gt;::iterator</type>
      <name>front</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; T &gt;::iterator</type>
      <name>nil</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_without_expanding</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; T &gt;::iterator</type>
      <name>back_it</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>curSize</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; T &gt;::iterator</type>
      <name>front_it</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>initval</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; T &gt;</type>
      <name>ring</name>
      <anchorfile>classArRingQueue.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobot</name>
    <filename>classArRobot.html</filename>
    <member kind="enumeration">
      <name>WaitState</name>
      <anchor>w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_CONNECTED</name>
      <anchor>w12w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_FAILED_CONN</name>
      <anchor>w12w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_RUN_EXIT</name>
      <anchor>w12w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_TIMEDOUT</name>
      <anchor>w12w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_INTR</name>
      <anchor>w12w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAIT_FAIL</name>
      <anchor>w12w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>actionHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAction</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArAction *action, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConnectCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDisconnectNormallyCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDisconnectOnErrorCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFailedConnectCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArLaser *laser, int laserNumber, bool addAsRangeDevice=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPacketHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArRetFunctor1&lt; bool, ArRobotPacket * &gt; *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRangeDevice *device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRunExitCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addSensorInterpTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *name, int position, ArFunctor *functor, ArTaskState::State *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStabilizingCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addUserTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *name, int position, ArFunctor *functor, ArTaskState::State *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ArTransform trans, bool doCumulative=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areMotorsEnabled</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areSonarsEnabled</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ariaExitCallback</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRobot</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const char *name=NULL, bool ignored=true, bool doSigHandle=true, bool normalInit=true, bool addAriaExitCallback=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>asyncConnectHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(bool tryHarderToConnect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachKeyHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ArKeyHandler *keyHandler, bool exitOnEscape=true, bool useExitNotShutdown=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkRangeDevicesCumulativeBox</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose *readingPos=NULL, const ArRangeDevice **rangeDevice=NULL, bool useLocationDependentDevices=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkRangeDevicesCumulativePolar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(double startAngle, double endAngle, double *angle=NULL, const ArRangeDevice **rangeDevice=NULL, bool useLocationDependentDevices=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkRangeDevicesCurrentBox</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(double x1, double y1, double x2, double y2, ArPose *readingPos=NULL, const ArRangeDevice **rangeDevice=NULL, bool useLocationDependentDevices=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkRangeDevicesCurrentPolar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(double startAngle, double endAngle, double *angle=NULL, const ArRangeDevice **rangeDevice=NULL, bool useLocationDependentDevices=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDirectMotion</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>com</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(unsigned char command)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>com2Bytes</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(unsigned char command, char high, char low)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comDataN</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(unsigned char command, const char *data, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comInt</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(unsigned char command, short int argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comStr</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(unsigned char command, const char *argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comStrN</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(unsigned char command, const char *str, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableMotors</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dropConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMotors</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>failedConnect</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArAction *</type>
      <name>findAction</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const char *actionName)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findAngleTo</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findDeltaHeadingTo</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findDistanceTo</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>ArLaser *</type>
      <name>findLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(int laserNumber)</arglist>
    </member>
    <member kind="function">
      <type>const ArLaser *</type>
      <name>findLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(int laserNumber) const </arglist>
    </member>
    <member kind="function">
      <type>ArRangeDevice *</type>
      <name>findRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const char *name, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>const ArRangeDevice *</type>
      <name>findRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const char *name, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findUserTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findUserTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishedConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceTryingToMove</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteMaxTransVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArResolver::ActionMap *</type>
      <name>getActionMap</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getAnalog</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAnalogPortSelected</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBatteryVoltage</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getBatteryVoltageAverageOfNum</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBatteryVoltageNow</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ChargeState</type>
      <name>getChargeState</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestSonarNumber</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(double startAngle, double endAngle) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestSonarRange</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(double startAngle, double endAngle) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCompass</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getConnectionCycleMultiplier</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionTimeoutTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getControl</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCounter</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCycleTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCycleWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCycleWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getDigIn</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getDigOut</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDirectMotionPrecedenceTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDoNotSwitchBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArRetFunctor1&lt; double, ArPoseWithTime &gt; *</type>
      <name>getEncoderCorrectionCallback</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEncoderPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getEncoderPoseInterpNumReadings</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEncoderPoseInterpPosition</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>(ArTime timeStamp, ArPose *position)</arglist>
    </member>
    <member kind="function">
      <type>ArTransform</type>
      <name>getEncoderTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEstop</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaultFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeadingDoneDiff</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIOAnalog</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIOAnalogSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a97</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIOAnalogVoltage</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a98</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getIODigIn</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a99</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIODigInSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a100</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getIODigOut</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a101</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIODigOutSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a102</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getIOPacketTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a103</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArKeyHandler *</type>
      <name>getKeyHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a104</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, ArLaser * &gt; *</type>
      <name>getLaserMap</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a105</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; int, ArLaser * &gt; *</type>
      <name>getLaserMap</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a106</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getLastOdometryTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a107</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getLastPacketTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a108</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a109</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a110</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a111</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLatVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a112</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long int</type>
      <name>getLeftEncoder</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a113</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLeftVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a114</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLogActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a115</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLogMovementReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a116</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLogMovementSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a117</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLogVelocitiesReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a118</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMotorPacCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a119</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMoveDoneDist</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a120</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a121</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNoTimeWarningThisCycle</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a122</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumFrontBumpers</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a123</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumRearBumpers</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a124</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a125</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOdometerDegrees</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a126</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOdometerDistance</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a127</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOdometerTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a128</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOdometryDelay</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a129</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ArRobotConfigPacketReader *</type>
      <name>getOrigRobotConfig</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a130</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArThread::ThreadType</type>
      <name>getOSThread</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a131</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPacketsReceivedTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a132</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPacketsSentTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a133</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a134</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPoseInterpNumReadings</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a135</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPoseInterpPosition</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a136</anchor>
      <arglist>(ArTime timeStamp, ArPose *position)</arglist>
    </member>
    <member kind="function">
      <type>ArPTZ *</type>
      <name>getPTZ</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a137</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArRangeDevice * &gt; *</type>
      <name>getRangeDeviceList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a138</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getRawEncoderPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a139</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealBatteryVoltage</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a140</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getRealBatteryVoltageAverageOfNum</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a141</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealBatteryVoltageNow</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a142</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArResolver *</type>
      <name>getResolver</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a143</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long int</type>
      <name>getRightEncoder</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a144</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRightVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a145</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotDiagonal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a146</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLength</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a147</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLengthFront</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a148</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLengthRear</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a149</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRobotName</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a150</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const ArRobotParams *</type>
      <name>getRobotParams</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a151</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotRadius</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a152</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRobotSubType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a153</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRobotType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a154</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotWidth</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a155</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a156</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a157</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a158</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRotVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a159</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ArFunctor * &gt; *</type>
      <name>getRunExitListCopy</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarPacCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a161</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarRange</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a162</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>ArSensorReading *</type>
      <name>getSonarReading</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a163</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStabilizingTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a164</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStallValue</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a165</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateOfCharge</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a166</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateOfChargeLow</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a167</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getStateOfChargeSetTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a168</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateOfChargeShutdown</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a169</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStateReflectionRefreshTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a170</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>getSyncTaskRoot</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a171</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTemperature</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a172</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTh</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a173</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTransform</type>
      <name>getToGlobalTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a174</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTransform</type>
      <name>getToLocalTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a175</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a176</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a177</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTransVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a178</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTripOdometerDegrees</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a179</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTripOdometerDistance</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a180</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTripOdometerTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a181</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a182</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a183</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a184</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handlePacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a185</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFaultFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a186</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrontBumpers</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a187</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a188</anchor>
      <arglist>(ArLaser *device) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a189</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a190</anchor>
      <arglist>(ArRangeDevice *device) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRearBumpers</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a191</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSettableAccsDecs</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a192</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSettableVelMaxes</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a193</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTableSensingIR</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a194</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTemperature</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a195</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveStateOfCharge</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a196</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incCounter</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a197</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a198</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a199</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCycleChained</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a200</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectMotion</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a201</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEStopPressed</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a202</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHeadingDone</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a203</anchor>
      <arglist>(double delta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftBreakBeamTriggered</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a204</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftMotorStalled</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a205</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftTableSensingIRTriggered</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a206</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMoveDone</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a207</anchor>
      <arglist>(double delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightBreakBeamTriggered</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a208</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightMotorStalled</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a209</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightTableSensingIRTriggered</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a210</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a211</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSonarNew</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a212</anchor>
      <arglist>(int num) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStabilizing</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a213</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTryingToMove</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a214</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyHandlerExit</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a215</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadParamFile</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a216</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lock</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a218</anchor>
      <arglist>(bool logDeactivated=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logAllTasks</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a219</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logUserTasks</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a220</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loopOnce</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a221</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>madeConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a222</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a223</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a224</anchor>
      <arglist>(ArPose to, ArPose from, bool doCumulative=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a225</anchor>
      <arglist>(ArPose pose, bool doCumulative=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packetHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a226</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processEncoderPacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a227</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processIOPacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a228</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processMotorPacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a229</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNewSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a230</anchor>
      <arglist>(char number, int range, ArTime timeReceived)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processParamFile</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a231</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remAction</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a232</anchor>
      <arglist>(const char *actionName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remAction</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a233</anchor>
      <arglist>(ArAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remConnectCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a234</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remDisconnectNormallyCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a235</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remDisconnectOnErrorCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a236</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remFailedConnectCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a237</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a238</anchor>
      <arglist>(int laserNumber, bool removeAsRangeDevice=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remLaser</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a239</anchor>
      <arglist>(ArLaser *laser, bool removeAsRangeDevice=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remPacketHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a240</anchor>
      <arglist>(ArRetFunctor1&lt; bool, ArRobotPacket * &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a241</anchor>
      <arglist>(ArRangeDevice *device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remRangeDevice</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a242</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remRunExitCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a243</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remSensorInterpTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a244</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remSensorInterpTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a245</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remStabilizingCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a246</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remUserTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a247</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remUserTask</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a248</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestEncoderPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a249</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestIOPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a250</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTripOdometer</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a251</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotLocker</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a252</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotUnlocker</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a253</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a254</anchor>
      <arglist>(bool stopRunIfNotConnected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAsync</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a255</anchor>
      <arglist>(bool stopRunIfNotConnected)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a256</anchor>
      <arglist>(double maxAccel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a257</anchor>
      <arglist>(double maxDecel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a258</anchor>
      <arglist>(double maxVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a259</anchor>
      <arglist>(double maxAccel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a260</anchor>
      <arglist>(double maxDecel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a261</anchor>
      <arglist>(double maxVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a262</anchor>
      <arglist>(double maxAccel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a263</anchor>
      <arglist>(double maxDecel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAbsoluteMaxTransVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a264</anchor>
      <arglist>(double maxVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatteryVoltageAverageOfNum</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a265</anchor>
      <arglist>(size_t numToAverage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChargeState</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a266</anchor>
      <arglist>(ArRobot::ChargeState chargeState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionCycleMultiplier</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a267</anchor>
      <arglist>(unsigned int multiplier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionTimeoutTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a268</anchor>
      <arglist>(int mSecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectWithNoParams</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a269</anchor>
      <arglist>(bool connectWithNoParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycleChained</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a270</anchor>
      <arglist>(bool cycleChained)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycleTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a271</anchor>
      <arglist>(unsigned int ms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycleWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a272</anchor>
      <arglist>(unsigned int ms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeadReconPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a273</anchor>
      <arglist>(ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeltaHeading</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a274</anchor>
      <arglist>(double deltaHeading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a275</anchor>
      <arglist>(ArDeviceConnection *connection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectMotionPrecedenceTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a276</anchor>
      <arglist>(int mSec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoNotSwitchBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a277</anchor>
      <arglist>(bool doNotSwitchBaud)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderCorrectionCallback</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a278</anchor>
      <arglist>(ArRetFunctor1&lt; double, ArPoseWithTime &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderPoseInterpNumReadings</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a279</anchor>
      <arglist>(size_t numReadings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a280</anchor>
      <arglist>(ArPose transformPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a281</anchor>
      <arglist>(ArPose deadReconPos, ArPose globalPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeading</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a282</anchor>
      <arglist>(double heading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeadingDoneDiff</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a283</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a284</anchor>
      <arglist>(double acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a285</anchor>
      <arglist>(double decel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a286</anchor>
      <arglist>(double latVelocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a287</anchor>
      <arglist>(double vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a288</anchor>
      <arglist>(bool logActions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMovementReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a289</anchor>
      <arglist>(bool logMovementReceived)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMovementSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a290</anchor>
      <arglist>(bool logMovementSent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogVelocitiesReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a291</anchor>
      <arglist>(bool logVelocitiesReceived)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoveDoneDist</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a292</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMutexLockWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a293</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMutexLogging</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a294</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMutexUnlockWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a295</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a296</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoTimeWarningThisCycle</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a297</anchor>
      <arglist>(bool noTimeWarningThisCycle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOdometryDelay</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a298</anchor>
      <arglist>(int msec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacketsReceivedTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a299</anchor>
      <arglist>(bool packetsReceivedTracking)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacketsSentTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a300</anchor>
      <arglist>(bool packetsSentTracking)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoseInterpNumReadings</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a301</anchor>
      <arglist>(size_t numReadings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPTZ</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a302</anchor>
      <arglist>(ArPTZ *ptz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealBatteryVoltageAverageOfNum</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a303</anchor>
      <arglist>(size_t numToAverage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResolver</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a304</anchor>
      <arglist>(ArResolver *resolver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRobotParams</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a305</anchor>
      <arglist>(ArRobotParams *params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a306</anchor>
      <arglist>(double acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a307</anchor>
      <arglist>(double decel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a308</anchor>
      <arglist>(double velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a309</anchor>
      <arglist>(double vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStabilizingTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a310</anchor>
      <arglist>(int mSecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateOfCharge</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a311</anchor>
      <arglist>(double stateOfCharge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateOfChargeLow</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a312</anchor>
      <arglist>(double stateOfChargeLow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateOfChargeShutdown</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a313</anchor>
      <arglist>(double stateOfChargeShutdown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateReflectionRefreshTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a314</anchor>
      <arglist>(int msec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a315</anchor>
      <arglist>(double acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a316</anchor>
      <arglist>(double decel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a317</anchor>
      <arglist>(double vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpPacketHandlers</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a318</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpSyncList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a319</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a320</anchor>
      <arglist>(double velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVel2</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a321</anchor>
      <arglist>(double leftVelocity, double rightVelocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startStabilization</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a322</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stateReflector</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a323</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a324</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopEncoderPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a325</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopIOPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a326</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRunning</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a327</anchor>
      <arglist>(bool doDisconnect=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopStateReflection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a328</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryLock</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlock</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaitState</type>
      <name>waitForConnect</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a331</anchor>
      <arglist>(unsigned int msecs=0)</arglist>
    </member>
    <member kind="function">
      <type>WaitState</type>
      <name>waitForConnectOrConnFail</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a332</anchor>
      <arglist>(unsigned int msecs=0)</arglist>
    </member>
    <member kind="function">
      <type>WaitState</type>
      <name>waitForRunExit</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a333</anchor>
      <arglist>(unsigned int msecs=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeAllConnOrFailWaitingThreads</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeAllConnWaitingThreads</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeAllRunExitWaitingThreads</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeAllWaitingThreads</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRobot</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>a338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myActionHandlerCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArRetFunctor1C&lt; bool, ArRobot, ArRobotPacket * &gt;</type>
      <name>myEncoderPacketCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArRetFunctorC&lt; unsigned int, ArRobot &gt;</type>
      <name>myGetCycleWarningTimeCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArRetFunctorC&lt; bool, ArRobot &gt;</type>
      <name>myGetNoTimeWarningThisCycleCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArRetFunctor1C&lt; bool, ArRobot, ArRobotPacket * &gt;</type>
      <name>myIOPacketCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArKeyHandler &gt; *</type>
      <name>myKeyHandlerCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myKeyHandlerExitCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArRetFunctor1C&lt; bool, ArRobot, ArRobotPacket * &gt;</type>
      <name>myMotorPacketCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myPacketHandlerCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myRobotLockerCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myRobotUnlockerCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myStateReflectorCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAbsoluteMaxTransVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArActionDesired</type>
      <name>myActionDesired</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myActionLatSet</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myActionRotSet</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArResolver::ActionMap</type>
      <name>myActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myActionTransSet</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddedAriaExitCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myAnalog</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAnalogPortSelected</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRobot &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAsyncConnectFlag</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAsyncConnectNoPacketCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAsyncConnectSentChangeBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAsyncConnectStartBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myAsyncConnectStartedChangeBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAsyncConnectState</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAsyncConnectTimesTried</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myAsyncStartedConnection</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRunningAverage</type>
      <name>myBatteryAverager</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBatteryVoltage</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBlockingConnectRun</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChargeState</type>
      <name>myChargeState</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCompass</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myConnectCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCondition</type>
      <name>myConnectCond</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myConnectionCycleMultiplier</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myConnectWithNoParams</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCondition</type>
      <name>myConnOrFailCond</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myControl</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCounter</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCycleChained</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCycleTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCycleWarningTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigIn</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigOut</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDirectPrecedenceTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myDisconnectNormallyCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myDisconnectOnErrorCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDoNotSwitchBaud</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1&lt; double, ArPoseWithTime &gt; *</type>
      <name>myEncoderCorrectionCB</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>myEncoderGlobalTrans</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArInterpolation</type>
      <name>myEncoderInterpolation</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPoseWithTime</type>
      <name>myEncoderPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myEncoderPoseTaken</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>myEncoderTransform</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myFailedConnectCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFaultFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFirstEncoderPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myGlobalPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasFaultFlags</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveStateOfCharge</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeadingDoneDiff</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArInterpolation</type>
      <name>myInterpolation</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIOAnalog</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p63</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIOAnalogSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myIODigIn</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p65</anchor>
      <arglist>[255]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIODigInSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myIODigOut</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p67</anchor>
      <arglist>[255]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIODigOutSize</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsConnected</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsStabilizing</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArKeyHandler *</type>
      <name>myKeyHandler</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myKeyHandlerUseExitNotShutdown</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArLaser * &gt;</type>
      <name>myLaserMap</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastActionLatVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastActionRotHeading</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLastActionRotStopped</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastActionRotVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastActionTransVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastCalculatedRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastHeading</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastIOPacketReceivedTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastLatSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LatDesired</type>
      <name>myLastLatType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastLatVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastOdometryReceivedTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastPacketReceivedTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastPulseSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastRotSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotDesired</type>
      <name>myLastRotType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastRotVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentLatVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentRotVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastSentTransVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastTh</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastTransSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransDesired</type>
      <name>myLastTransType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastTransVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastTransVal2</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLastVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastX</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLastY</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLatSetTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LatDesired</type>
      <name>myLatType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLatVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long int</type>
      <name>myLeftEncoder</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myLeftVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogActions</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogMovementReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogMovementSent</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogVelocitiesReceived</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMotorPacCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMotorPacCurrentCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myMoveDoneDist</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNoTimeWarningThisCycle</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myOdometerDegrees</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myOdometerDistance</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myOdometerStart</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOdometryDelay</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotConfigPacketReader *</type>
      <name>myOrigRobotConfig</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOverriddenChargeState</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnTheResolver</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArRetFunctor1&lt; bool, ArRobotPacket * &gt; * &gt;</type>
      <name>myPacketHandlerList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPacketsReceivedTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>myPacketsReceivedTrackingCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myPacketsReceivedTrackingStarted</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPacketsSentTracking</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotParams *</type>
      <name>myParams</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPTZ *</type>
      <name>myPtz</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArRangeDevice * &gt;</type>
      <name>myRangeDeviceList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPoseWithTime</type>
      <name>myRawEncoderPose</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRunningAverage</type>
      <name>myRealBatteryAverager</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRealBatteryVoltage</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotPacketReceiver</type>
      <name>myReceiver</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequestedEncoderPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequestedIOPackets</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArResolver *</type>
      <name>myResolver</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long int</type>
      <name>myRightEncoder</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRightVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotLengthFront</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotLengthRear</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myRobotName</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myRobotSubType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myRobotType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myRotSetTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotDesired</type>
      <name>myRotType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRotVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myRunExitCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCondition</type>
      <name>myRunExitCond</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotPacketSender</type>
      <name>mySender</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySentPulse</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySonarPacCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySonarPacCurrentCount</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, ArSensorReading * &gt;</type>
      <name>mySonars</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myStabilizingCBList</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStabilizingTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStallValue</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStartedStabilizing</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStateOfCharge</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStateOfChargeLow</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStateOfChargeSetTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStateOfChargeShutdown</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStateReflectionRefreshTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSyncLoop</type>
      <name>mySyncLoop</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSyncTask *</type>
      <name>mySyncTaskRoot</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myTemperature</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimeLastMotorPacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimeLastSonarPacket</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTimeoutTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransAccel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransDecel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myTransDistStart</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTransSetTime</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransDesired</type>
      <name>myTransType</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVal</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVal2</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTransVelMax</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTripOdometerDegrees</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTripOdometerDistance</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTripOdometerStart</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTryingToMove</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVel</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWarnedAboutExtraSonar</name>
      <anchorfile>classArRobot.html</anchorfile>
      <anchor>p201</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotConfig</name>
    <filename>classArRobotConfig.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addAnalogGyro</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArAnalogGyro *gyro)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRobotConfig</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectCallback</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processFile</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRobotConfig</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddedGyro</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAddedMovementParams</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArAnalogGyro *</type>
      <name>myAnalogGyro</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRobotConfig &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalRotAccel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalRotDecel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalRotVelMax</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalTransAccel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalTransDecel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myOriginalTransVelMax</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArRobotConfig &gt;</type>
      <name>myProcessFileCB</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotAccel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotDecel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotVelMax</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySavedOriginalMovementParameters</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransAccel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransDecel</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransVelMax</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUseGyro</name>
      <anchorfile>classArRobotConfig.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotConfigPacketReader</name>
    <filename>classArRobotConfigPacketReader.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRobotConfigPacketReader</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot, bool onlyOneRequest=false, ArFunctor *packetedArrivedCB=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>buildString</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>buildStringMovement</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connected</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAux1Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAux2Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAux3Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDriftFactor</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFirmwareVersion</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrontBumps</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrontSonar</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGyroCCW</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGyroCW</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGyroRateLimit</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGyroType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHasCharger</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHasGripper</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHasGyro</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getHighTemperatureShutdown</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHostBaud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJoyRotVel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJoyVel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKinematicsDelay</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowBattery</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNormalMPacs</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getPDBPort</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPowerBits</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPowerbotChargeThreshold</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPwmMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRearBumps</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRearSonar</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getResetBaud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRevCount</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotKI</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotKP</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotKV</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSerialNumber</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getShutdownVoltage</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSipCycleTime</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarCycle</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStallCount</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStallVal</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSubType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTicksMM</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransKI</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransKP</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransKV</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWatchdog</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPacketArrived</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPacketBeenRequested</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMovement</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packetHandler</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestPacket</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRobotConfigPacketReader</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAux1Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAux2Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAux3Baud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRobotConfigPacketReader &gt;</type>
      <name>myConnectedCB</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDriftFactor</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFirmwareVersion</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFrontBumps</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFrontSonar</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGyroCCW</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGyroCW</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGyroRateLimit</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGyroType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myHasCharger</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasGripper</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasGyro</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myHighTemperatureShutdown</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myHostBaud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyRotVel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myJoyVel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myKinematicsDelay</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastPacketRequest</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLowBattery</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNormalMPacs</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOnlyOneRequest</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPacketArrived</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>myPacketArrivedCB</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArRobotConfigPacketReader, ArRobotPacket * &gt;</type>
      <name>myPacketHandlerCB</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPacketRequested</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myPDBPort</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPowerBits</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPowerbotChargeThreshold</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPwmMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRearBumps</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRearSonar</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myResetBaud</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRevCount</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotKI</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotKP</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotKV</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mySerialNumber</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myShutdownVoltage</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySipCycleTime</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySonarCycle</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStallCount</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStallVal</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mySubType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTicksMM</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransAccel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransAccelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransDecel</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransKI</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransKP</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransKV</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransVelMax</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransVelTop</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myType</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myWatchdog</name>
      <anchorfile>classArRobotConfigPacketReader.html</anchorfile>
      <anchor>p68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotConnector</name>
    <filename>classArRobotConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRobotConnector</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArArgumentParser *parser, ArRobot *robot, bool autoParseArgs=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRemoteHost</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRemoteIsSim</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArRobot *</type>
      <name>getRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArArgumentParser *parser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRobotConnector</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAutoParseArgs</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveParsedArgs</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArConstFunctorC&lt; ArRobotConnector &gt;</type>
      <name>myLogOptionsCB</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnParser</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArRobotConnector &gt;</type>
      <name>myParseArgsCB</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myParser</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>myRemoteHost</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRemoteIsSim</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRemoteRobotTcpPort</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRobotBaud</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogActions</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogMovementReceived</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogMovementSent</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogPacketsReceived</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogPacketsSent</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRobotLogVelocitiesReceived</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>myRobotPort</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSerialConnection</type>
      <name>myRobotSerConn</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTcpConnection</type>
      <name>myRobotTcpConn</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingSim</name>
      <anchorfile>classArRobotConnector.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotJoyHandler</name>
    <filename>classArRobotJoyHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRobotJoyHandler</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getButton1</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getButton2</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getDataReceivedTime</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDoubles</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double *x, double *y, double *z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gotData</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRobotJoyHandler</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectCallback</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleJoystickPacket</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myButton1</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myButton2</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArRobotJoyHandler &gt;</type>
      <name>myConnectCB</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myDataReceived</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myGotData</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArRobotJoyHandler, ArRobotPacket * &gt;</type>
      <name>myHandleJoystickPacketCB</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myJoyX</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myJoyY</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStarted</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myThrottle</name>
      <anchorfile>classArRobotJoyHandler.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotPacket</name>
    <filename>classArRobotPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArRobotPacket</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(unsigned char sync1=0xfa, unsigned char sync2=0xfb)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::Byte2</type>
      <name>calcCheckSum</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::UByte</type>
      <name>getID</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getTimeReceived</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArTypes::UByte id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeReceived</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArTime timeReceived)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verifyCheckSum</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRobotPacket</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySync1</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySync2</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeReceived</name>
      <anchorfile>classArRobotPacket.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotPacketReceiver</name>
    <filename>classArRobotPacketReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRobotPacketReceiver</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArDeviceConnection *deviceConnection, bool allocatePackets=false, unsigned char sync1=0xfa, unsigned char sync2=0xfb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRobotPacketReceiver</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool allocatePackets=false, unsigned char sync1=0xfa, unsigned char sync2=0xfb)</arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllocatingPackets</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArRobotPacket *</type>
      <name>receivePacket</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArDeviceConnection *deviceConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRobotPacketReceiver</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAllocatePackets</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myDeviceConn</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotPacket</type>
      <name>myPacket</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySync1</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>mySync2</name>
      <anchorfile>classArRobotPacketReceiver.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotPacketSender</name>
    <filename>classArRobotPacketSender.html</filename>
    <member kind="function">
      <type></type>
      <name>ArRobotPacketSender</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArDeviceConnection *deviceConnection, unsigned char sync1=0xfa, unsigned char sync2=0xfb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRobotPacketSender</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(unsigned char sync1=0xfa, unsigned char sync2=0xfb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>com</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned char command)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>com2Bytes</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(unsigned char command, char high, char low)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comDataN</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(unsigned char command, const char *data, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comInt</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned char command, short int argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comStr</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(unsigned char command, const char *argument)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>comStrN</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned char command, const char *str, int size)</arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnection</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArDeviceConnection *deviceConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRobotPacketSender</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>connValid</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myDeviceConn</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotPacket</type>
      <name>myPacket</name>
      <anchorfile>classArRobotPacketSender.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRobotParams</name>
    <filename>classArRobotParams.html</filename>
    <base>ArConfig</base>
    <member kind="function">
      <type></type>
      <name>ArRobotParams</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAbsoluteMaxLatVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAbsoluteMaxRotVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAbsoluteMaxVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngleConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCompassPort</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCompassType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getConnectLaser</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDiffConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGPSBaud</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getGPSPort</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getGPSType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGPSX</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGPSY</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGyroScaler</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIRCycles</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIRType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIRX</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIRY</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserAutoBaudChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserCumulativeBufferSize</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserDegreesChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserEndDegrees</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLaserFlipped</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserIgnore</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserIncrement</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserIncrementChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserMaxRange</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserPort</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserPortType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLaserPossessed</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLaserPowerControlled</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserReflectorBitsChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserStartDegrees</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserStartingBaudChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLaserTh</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLaserUnitsChoice</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserX</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserY</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLaserZ</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(int laserNumber=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSonar</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRangeConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRequestEncoderPackets</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRequestIOPackets</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotDiagonal</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLength</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLengthFront</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotLengthRear</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotRadius</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRobotWidth</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRotVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarTh</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarX</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSonarY</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSubClassName</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSwitchToBaudRate</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVel2Divisor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVelConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLatVel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoveCommand</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSettableAccsDecs</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSettableVelMaxes</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveFrontBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveNewTableSensingIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveRearBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSonar</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(int number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveTableSensingIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHolonomic</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numFrontBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numRearBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArRobotParams</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getIRUnits</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LaserData *</type>
      <name>getLaserData</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(int laserNumber)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const LaserData *</type>
      <name>getLaserData</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(int laserNumber) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::list&lt; ArArgumentBuilder * &gt; *</type>
      <name>getSonarUnits</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSetIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(int num, int type, int cycles, int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSetSonar</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(int num, int x, int y, int th)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseIRUnit</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(ArArgumentBuilder *builder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>parseSonarUnit</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(ArArgumentBuilder *builder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAbsoluteMaxLatVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAbsoluteMaxRVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAbsoluteMaxVelocity</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAngleConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myClass</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p4</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myCompassPort</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p5</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myCompassType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p6</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDiffConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFrontBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArArgumentBuilder * &gt;</type>
      <name>myGetIRUnitList</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArArgumentBuilder * &gt;</type>
      <name>myGetSonarUnitList</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGPSBaud</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myGPSPort</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p13</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myGPSPossessed</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myGPSType</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p15</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGPSX</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myGPSY</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myGyroScaler</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHasLatVel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveMoveCommand</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHolonomic</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::map&lt; int, int &gt; &gt;</type>
      <name>myIRMap</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; const std::list&lt; ArArgumentBuilder * &gt; *, ArRobotParams &gt;</type>
      <name>myIRUnitGetFunctor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArRobotParams, ArArgumentBuilder * &gt;</type>
      <name>myIRUnitSetFunctor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, LaserData * &gt;</type>
      <name>myLasers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myLatVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNewTableSensingIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumFrontBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumRearBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumSonar</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRangeConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRearBumpers</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequestEncoderPackets</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequestIOPackets</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotDiagonal</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotLength</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotLengthFront</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotLengthRear</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotRadius</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRobotWidth</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRotVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySettableAccsDecs</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mySettableVelMaxes</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::map&lt; int, int &gt; &gt;</type>
      <name>mySonarMap</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; const std::list&lt; ArArgumentBuilder * &gt; *, ArRobotParams &gt;</type>
      <name>mySonarUnitGetFunctor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArRobotParams, ArArgumentBuilder * &gt;</type>
      <name>mySonarUnitSetFunctor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>mySubClass</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p52</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySwitchToBaudRate</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTableSensingIR</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransAccel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransDecel</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myTransVelMax</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVel2Divisor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myVelConvFactor</name>
      <anchorfile>classArRobotParams.html</anchorfile>
      <anchor>p59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRunningAverage</name>
    <filename>classArRunningAverage.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRunningAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(size_t numToAverage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCurrentNumAveraged</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumToAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumToAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(size_t numToAverage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArRunningAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myNum</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myNumToAverage</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTotal</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; double &gt;</type>
      <name>myVals</name>
      <anchorfile>classArRunningAverage.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRVisionPacket</name>
    <filename>classArRVisionPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArRVisionPacket</name>
      <anchorfile>classArRVisionPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=15)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArRVisionPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTypes::Byte2 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>byte2ToBufAtPos</name>
      <anchorfile>classArRVisionPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArTypes::Byte2 val, ArTypes::UByte2 pose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uByteToBuf</name>
      <anchorfile>classArRVisionPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArTypes::UByte val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArRVisionPTZ</name>
    <filename>classArRVisionPTZ.html</filename>
    <base>ArPTZ</base>
    <member kind="enumvalue">
      <name>MAX_PAN</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_PAN</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_TILT</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_TILT</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_ZOOM</name>
      <anchor>w0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ZOOM</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILT_OFFSET_IN_DEGREES</name>
      <anchor>w0w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAN_OFFSET_IN_DEGREES</name>
      <anchor>w0w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArRVisionPTZ</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetFOV</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealPanTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMaxZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMinZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMinZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panRel</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double degreesPan, double degreesTilt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double degreesPan, double degreesTilt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArBasePacket *</type>
      <name>readPacket</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tiltRel</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoomRel</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializePackets</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegToPan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegToTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRVisionPacket</type>
      <name>myInquiryPacket</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRVisionPacket</type>
      <name>myPacket</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPan</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanOffsetInDegrees</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRVisionPacket</type>
      <name>myPanTiltPacket</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTilt</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltOffsetInDegrees</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoom</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRVisionPacket</type>
      <name>myZoomPacket</name>
      <anchorfile>classArRVisionPTZ.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSectors</name>
    <filename>classArSectors.html</filename>
    <member kind="function">
      <type></type>
      <name>ArSectors</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int numSectors=8)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>didAll</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSectors</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumSectors</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>mySectors</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySectorSize</name>
      <anchorfile>classArSectors.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSensorReading</name>
    <filename>classArSensorReading.html</filename>
    <member kind="function">
      <type>void</type>
      <name>applyEncoderTransform</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTransform trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTransform trans)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSensorReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArSensorReading &amp;reading)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSensorReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double xPos=0.0, double yPos=0.0, double thPos=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdjusted</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCounterTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getEncoderPoseTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getExtraInt</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIgnoreThisReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getLocalPose</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLocalX</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLocalY</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPose</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getPoseTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getRange</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorDX</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorDY</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>getSensorPosition</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorTh</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorX</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSensorY</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getTimeTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getXTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(unsigned int counter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newData</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int sx, int sy, ArPose robotPose, ArPose encoderPose, ArTransform trans, unsigned int counter, ArTime timeTaken, bool ignoreThisReading=false, int extraInt=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newData</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(int range, ArPose robotPose, ArPose encoderPose, ArTransform trans, unsigned int counter, ArTime timeTaken, bool ignoreThisReading=false, int extraInt=0)</arglist>
    </member>
    <member kind="function">
      <type>ArSensorReading &amp;</type>
      <name>operator=</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const ArSensorReading &amp;reading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSensorPosition</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(double xPos, double yPos, double thPos, bool forceComputation=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdjusted</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(bool adjusted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraInt</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(int extraInt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreThisReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(bool ignoreThisReading)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSensorReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAdjusted</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myAngleToCenter</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCounterTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDistToCenter</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myEncoderPoseTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myExtraInt</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIgnoreThisReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myLocalReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myRange</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myReading</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>myReadingTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySensorCos</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>mySensorPos</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySensorSin</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myTimeTaken</name>
      <anchorfile>classArSensorReading.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSerialConnection</name>
    <filename>classArSerialConnection.html</filename>
    <base>ArDeviceConnection</base>
    <member kind="enumeration">
      <name>Open</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_COULD_NOT_OPEN_PORT</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_COULD_NOT_SET_UP_PORT</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_INVALID_BAUD_RATE</name>
      <anchor>w0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_COULD_NOT_SET_BAUD</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_ALREADY_OPEN</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSerialConnection</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaud</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCTS</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDCD</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDSR</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHardwareControl</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getOpenMessage</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int messageNumber)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getPort</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRing</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeRead</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>internalOpen</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTimeStamping</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *port=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>openSimple</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *data, unsigned int size, unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaud</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int baud)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setHardwareControl</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(bool hardwareControl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char *port=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const char *data, unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSerialConnection</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>baudToRate</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int baud)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildStrMap</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>rateToBaud</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(int rate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTimeStamping</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBaudRate</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHardwareControl</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPort</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPortName</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStatus</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArStrMap</type>
      <name>myStrMap</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTakingTimeStamps</name>
      <anchorfile>classArSerialConnection.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSignalHandler</name>
    <filename>classArSignalHandler.html</filename>
    <base>ArASyncTask</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSignalHandler</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addHandlerCB</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ArFunctor1&lt; int &gt; *func, ArListPos::Pos position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>block</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(Signal sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>blockAllThisThread</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>blockCommon</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>blockCommonThisThread</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createHandlerNonThreaded</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createHandlerThreaded</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delAllHandlerCBs</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delHandlerCB</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(ArFunctor1&lt; int &gt; *func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArSignalHandler *</type>
      <name>getHandler</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handle</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(Signal sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logThread</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nameSignal</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(int sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>signalCB</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(int sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unblock</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(Signal sig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unblockAll</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unhandle</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(Signal sig)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>initSigMap</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ourIgnoreQUIT</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sigset_t</type>
      <name>ourBlockSigSet</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::list&lt; ArFunctor1&lt; int &gt; * &gt;</type>
      <name>ourHandlerList</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sigset_t</type>
      <name>ourHandleSigSet</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArStrMap</type>
      <name>ourSigMap</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArSignalHandler *</type>
      <name>ourSignalHandler</name>
      <anchorfile>classArSignalHandler.html</anchorfile>
      <anchor>t4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSimpleConnector</name>
    <filename>classArSimpleConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>ArSimpleConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArArgumentParser *parser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSimpleConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArArgumentBuilder *arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSimpleConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int *argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectLaser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArSick *laser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectLaserArbitrary</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArSick *laser, int laserNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectRobot</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectSecondLaser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArSick *laser)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logOptions</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArArgumentParser *parser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseArgs</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumLasers</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int maxNumLasers=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupLaser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArSick *laser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupLaserArbitrary</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArSick *laser, int laserNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupRobot</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupSecondLaser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArSick *laser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArSimpleConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishConstructor</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLaserConnector *</type>
      <name>myLaserConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnParser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArArgumentParser *</type>
      <name>myParser</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobotConnector *</type>
      <name>myRobotConnector</name>
      <anchorfile>classArSimpleConnector.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSimulatedLaser</name>
    <filename>classArSimulatedLaser.html</filename>
    <base>ArLaser</base>
    <member kind="function">
      <type></type>
      <name>ArSimulatedLaser</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArLaser *laser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSimulatedLaser</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>finishParams</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>laserCheckParams</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>simPacketHandler</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(ArRobotPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myAssembleReadings</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt; *</type>
      <name>myCurrentReadings</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsConnected</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArSensorReading * &gt;::iterator</type>
      <name>myIter</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArLaser *</type>
      <name>myLaser</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySimBegin</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySimEnd</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySimIncrement</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySimPacketCounter</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>mySimPacketEncoderTrans</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor1C&lt; bool, ArSimulatedLaser, ArRobotPacket * &gt;</type>
      <name>mySimPacketHandler</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArPose</type>
      <name>mySimPacketStart</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTransform</type>
      <name>mySimPacketTrans</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartConnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myTotalNumReadings</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTryingToConnect</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myWhichReading</name>
      <anchorfile>classArSimulatedLaser.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSocket</name>
    <filename>classArSocket.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>accept</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArSocket *sock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSocket</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int port, bool doClose, Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSocket</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *host, int port, Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSocket</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPartialReadString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>comparePartialReadString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *partialString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *host, int port, Type type=TCP, const char *openOnIP=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectTo</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(struct sockaddr_in *sin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectTo</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *host, int port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArSocket *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int fd, bool doclose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>create</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findValidPort</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int startPort, const char *openOnIP=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBadRead</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBadWrite</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getBytesRecvd</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getBytesSent</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getCloseCallback</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEcho</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Error</type>
      <name>getError</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getErrorStr</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getErrorTracking</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFD</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ArTime</type>
      <name>getLastStringReadTime</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLogWriteStrings</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRawIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getRecvs</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getSends</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSockName</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStringUseWrongEndChars</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>in_addr *</type>
      <name>inAddr</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short int</type>
      <name>inPort</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(int port, Type type, const char *openOnIP=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void *buff, size_t len, unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>readString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recvFrom</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void *msg, int len, sockaddr_in *sin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTracking</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendTo</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const void *msg, int len, struct sockaddr_in *sin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendTo</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const void *msg, int len)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBroadcast</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloseCallback</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoClose</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(bool yesno)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEcho</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(bool echo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorTracking</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(bool errorTracking)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const char *ipString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLinger</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(int time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogWriteStrings</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(bool logWriteStrings)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNoDelay</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNonBlock</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadStringIgnoreReturn</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(bool ignore)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setReuseAddress</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStringUseWrongEndChars</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(bool useWrongEndChars)</arglist>
    </member>
    <member kind="function">
      <type>sockaddr_in *</type>
      <name>sockAddrIn</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(ArSocket *s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(const void *buff, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeStringPlain</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArSocket</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addrHost</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(struct in_addr &amp;addr, char *host)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getHostName</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hostAddr</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const char *host, struct in_addr &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>hostToNetOrder</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>init</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inToA</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(struct in_addr *addr, char *buff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>maxHostNameLen</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>netToHostOrder</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>sockAddrLen</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>ourInitialized</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStringEcho</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalInit</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>separateHost</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *rawHost, int rawPort, char *useHost, size_t useHostSize, int *port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRawIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBadRead</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBadWrite</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>myBytesRecvd</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>myBytesSent</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>myCloseFunctor</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDoClose</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Error</type>
      <name>myError</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myErrorStr</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myErrorTracking</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFD</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myLastStringReadTime</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogWriteStrings</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myNonBlocking</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myRawIPString</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p14</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myReadStringMutex</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>myRecvs</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>mySends</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sockaddr_in</type>
      <name>mySin</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringAutoEcho</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myStringBuf</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p20</anchor>
      <arglist>[1100]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myStringBufEmpty</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p21</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringEcho</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringGotComplete</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringGotEscapeChars</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringHaveEchoed</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringIgnoreReturn</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myStringPos</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>myStringPosLast</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStringWrongEndChars</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Type</type>
      <name>myType</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myWriteStringMutex</name>
      <anchorfile>classArSocket.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSonarDevice</name>
    <filename>classArSonarDevice.html</filename>
    <base>ArRangeDevice</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addReading</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSonarDevice</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(size_t currentBufferSize=24, size_t cumulativeBufferSize=64, const char *name=&quot;sonar&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processReadings</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulativeMaxRange</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double range)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSonarDevice</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFilterFarDist</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFilterNearDist</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArSonarDevice &gt;</type>
      <name>myProcessCB</name>
      <anchorfile>classArSonarDevice.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSonyPacket</name>
    <filename>classArSonyPacket.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArSonyPacket</name>
      <anchorfile>classArSonyPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=15)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArSonyPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTypes::Byte2 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>byte2ToBufAtPos</name>
      <anchorfile>classArSonyPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArTypes::Byte2 val, ArTypes::UByte2 pose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uByteToBuf</name>
      <anchorfile>classArSonyPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArTypes::UByte val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSonyPTZ</name>
    <filename>classArSonyPTZ.html</filename>
    <base>ArPTZ</base>
    <member kind="enumvalue">
      <name>MAX_PAN</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_TILT</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_ZOOM</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ZOOM</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSonyPTZ</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>backLightingOff</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>backLightingOn</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetFOV</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMaxZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMinZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMinZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panRel</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(double degreesPan, double degreesTilt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double degreesPan, double degreesTilt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tiltRel</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double degrees)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoomRel</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int zoomValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializePackets</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegToPan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myDegToTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSonyPacket</type>
      <name>myPacket</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPan</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSonyPacket</type>
      <name>myPanTiltPacket</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTilt</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoom</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSonyPacket</type>
      <name>myZoomPacket</name>
      <anchorfile>classArSonyPTZ.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSoundPlayer</name>
    <filename>classArSoundPlayer.html</filename>
    <member kind="function" static="yes">
      <type>static ArRetFunctor2&lt; bool, const char *, const char * &gt; *</type>
      <name>getPlayWavFileCallback</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArFunctor *</type>
      <name>getStopPlayingCallback</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>playNativeFile</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const char *filename, const char *params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>playSoundPCM16</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(char *data, int numSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>playWavFile</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(const char *filename, const char *params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stopPlaying</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>myPlayChildPID</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalRetFunctor2&lt; bool, const char *, const char * &gt;</type>
      <name>ourPlayWavFileCB</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArGlobalFunctor</type>
      <name>ourStopPlayingCB</name>
      <anchorfile>classArSoundPlayer.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSoundsQueue</name>
    <filename>classArSoundsQueue.html</filename>
    <base>ArASyncTask</base>
    <member kind="typedef">
      <type>ArFunctor</type>
      <name>InterruptItemFunctor</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ItemType</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArRetFunctor&lt; bool &gt;</type>
      <name>PlaybackConditionFunctor</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArRetFunctor2&lt; bool, const char *, const char * &gt;</type>
      <name>PlayItemFunctor</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInitCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ItemType type, const char *data, std::list&lt; PlayItemFunctor * &gt; callbacks, int priority=0, const char *params=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ArSoundsQueue::Item item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQueueEmptyCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQueueNonemptyCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSoundFinishedCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSoundStartedCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSoundsQueue</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArSpeechSynth *speechSynthesizer, ArRetFunctor&lt; bool &gt; *playInitCB=0, PlayItemFunctor *playFileCB=0, InterruptItemFunctor *interruptFileCB=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSoundsQueue</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *speakInitCB, PlayItemFunctor *speakCB=0, InterruptItemFunctor *interruptSpeechCB=0, ArRetFunctor&lt; bool &gt; *playInitCB=0, PlayItemFunctor *playFileCB=0, InterruptItemFunctor *interruptFileCB=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQueue</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArSoundsQueue::Item</type>
      <name>createDefaultFileItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char *filename=0)</arglist>
    </member>
    <member kind="function">
      <type>ArSoundsQueue::Item</type>
      <name>createDefaultSpeechItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *speech=0)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt;</type>
      <name>findPendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *item)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCurrentQueueSize</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getPauseCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getResumeCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpeaking</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpeakingOrPlaying</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nextItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ItemType type, int priority)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nextItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nextItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(ItemType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playf</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const char *filename_fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ItemType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(int priority, ItemType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendingItems</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const char *item, ItemType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remQueueEmptyCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remQueueNonemptyCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remSoundFinishedCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remSoundStartedCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(ArFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAsync</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPlayConditionCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(PlaybackConditionFunctor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterruptFileCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(InterruptItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterruptSpeechCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(InterruptItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterruptWavFileCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(InterruptItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayFileCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(PlayItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayWavFileCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(PlayItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeakCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(PlayItemFunctor *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeakInitCallback</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speak</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speakf</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speakWithPriority</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(int priority, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speakWithVoice</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const char *voice, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeCallbacks</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const std::list&lt; ArRetFunctor&lt; bool &gt; * &gt; &amp;lst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeCallbacks</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(const std::list&lt; ArFunctor * &gt; &amp;lst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Item</type>
      <name>popQueueItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Item</type>
      <name>popQueueItem_NoLock</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pushQueueItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(Item item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pushQueueItem_NoLock</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(Item item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>tryLock</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterruptItemFunctor *</type>
      <name>myDefaultInterruptFileCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterruptItemFunctor *</type>
      <name>myDefaultInterruptSpeechCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlaybackConditionFunctor *</type>
      <name>myDefaultPlayConditionCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlayItemFunctor *</type>
      <name>myDefaultPlayFileCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlayItemFunctor *</type>
      <name>myDefaultSpeakCB</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myEndPlaybackCBList</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArRetFunctor&lt; bool &gt; * &gt;</type>
      <name>myInitCallbacks</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInitialized</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Item</type>
      <name>myLastItem</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArCondition</type>
      <name>myPausedCondition</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPauseRequestCount</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPlayingSomething</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; Item &gt;</type>
      <name>myQueue</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myQueueEmptyCallbacks</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myQueueMutex</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myQueueNonemptyCallbacks</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myStartPlaybackCBList</name>
      <anchorfile>classArSoundsQueue.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ArSoundsQueue::Item</class>
  </compound>
  <compound kind="class">
    <name>ArSoundsQueue::Item</name>
    <filename>classArSoundsQueue_1_1Item.html</filename>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArSoundsQueue::Item &amp;toCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::string _data, ItemType _type, std::string _params, int priority, std::list&lt; PlayItemFunctor * &gt; callbacks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::string _data, ItemType _type, std::string _params=&quot;&quot;, int priority=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Item &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>data</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>doneCallbacks</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; InterruptItemFunctor * &gt;</type>
      <name>interruptCallbacks</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>params</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; PlaybackConditionFunctor * &gt;</type>
      <name>playbackConditionCallbacks</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; PlayItemFunctor * &gt;</type>
      <name>playCallbacks</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>priority</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItemType</type>
      <name>type</name>
      <anchorfile>classArSoundsQueue_1_1Item.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSpeechSynth</name>
    <filename>classArSpeechSynth.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToConfig</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArConfig *config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSpeechSynth</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAudioSampleRate</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getCurrentVoiceName</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ArRetFunctorC&lt; bool, ArSpeechSynth &gt; *</type>
      <name>getInitCallback</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArFunctorC&lt; ArSpeechSynth &gt; *</type>
      <name>getInterruptCallback</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArRetFunctor2C&lt; bool, ArSpeechSynth, const char *, const char * &gt; *</type>
      <name>getSpeakCallback</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>getVoiceNames</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interrupt</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAudioCallback</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArRetFunctor2&lt; bool, ArTypes::Byte2 *, int &gt; *cb)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAudioSampleRate</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int rate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setVoice</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>speak</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const char *str, const char *voiceParams=NULL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>speak</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char *str, const char *voiceParams, ArRetFunctor2&lt; bool, ArTypes::Byte2 *, int &gt; *audioOutputCB, unsigned short sampleRate=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>speakf</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *fmt,...)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor2&lt; bool, ArTypes::Byte2 *, int &gt; *</type>
      <name>myAudioPlaybackCB</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArSpeechSynth &gt;</type>
      <name>myInitCB</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArSpeechSynth &gt;</type>
      <name>myInterruptCB</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor2C&lt; bool, ArSpeechSynth, const char *, const char * &gt;</type>
      <name>mySpeakCB</name>
      <anchorfile>classArSpeechSynth.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ArStrCaseCmpOp</name>
    <filename>structArStrCaseCmpOp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structArStrCaseCmpOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArStringInfoGroup</name>
    <filename>classArStringInfoGroup.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addAddStringCallback</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor3&lt; const char *, ArTypes::UByte2, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; * &gt; *functor, ArListPos::Pos position=ArListPos::LAST)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addString</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStringBool</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArRetFunctor&lt; bool &gt; *functor, const char *format=&quot;%s&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStringDouble</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArRetFunctor&lt; double &gt; *functor, const char *format=&quot;%g&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStringInt</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArRetFunctor&lt; int &gt; *functor, const char *format=&quot;%d&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStringString</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLen, ArRetFunctor&lt; const char * &gt; *functor, const char *format=&quot;%s&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArStringInfoGroup</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArStringInfoGroup</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string, ArStrCaseCmpOp &gt;</type>
      <name>myAddedStrings</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor3&lt; const char *, ArTypes::UByte2, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; * &gt; * &gt;</type>
      <name>myAddStringCBList</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArStringInfoGroup.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArStringInfoHolder</name>
    <filename>classArStringInfoHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>ArStringInfoHolder</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *name, ArTypes::UByte2 maxLength, ArFunctor2&lt; char *, ArTypes::UByte2 &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor2&lt; char *, ArTypes::UByte2 &gt; *</type>
      <name>getFunctor</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTypes::UByte2</type>
      <name>getMaxLength</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArStringInfoHolder</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor2&lt; char *, ArTypes::UByte2 &gt; *</type>
      <name>myFunctor</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTypes::UByte2</type>
      <name>myMaxLength</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArStringInfoHolder.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArStringInfoHolderFunctions</name>
    <filename>classArStringInfoHolderFunctions.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>boolWrapper</name>
      <anchorfile>classArStringInfoHolderFunctions.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(char *buffer, ArTypes::UByte2 bufferLen, ArRetFunctor&lt; bool &gt; *functor, const char *format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doubleWrapper</name>
      <anchorfile>classArStringInfoHolderFunctions.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(char *buffer, ArTypes::UByte2 bufferLen, ArRetFunctor&lt; double &gt; *functor, const char *format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>intWrapper</name>
      <anchorfile>classArStringInfoHolderFunctions.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(char *buffer, ArTypes::UByte2 bufferLen, ArRetFunctor&lt; int &gt; *functor, const char *format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stringWrapper</name>
      <anchorfile>classArStringInfoHolderFunctions.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(char *buffer, ArTypes::UByte2 bufferLen, ArRetFunctor&lt; const char * &gt; *functor, const char *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSyncTask</name>
    <filename>classArSyncTask.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addNewBranch</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *nameOfNew, int position, ArTaskState::State *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNewLeaf</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *nameOfNew, int position, ArFunctor *functor, ArTaskState::State *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArSyncTask</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *name, ArFunctor *functor=NULL, ArTaskState::State *state=NULL, ArSyncTask *parent=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>find</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>find</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findNonRecursive</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>findNonRecursive</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ArFunctor *</type>
      <name>getFunctor</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArRetFunctor&lt; bool &gt; *</type>
      <name>getNoTimeWarningCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArSyncTask *</type>
      <name>getRunning</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArTaskState::State</type>
      <name>getState</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArRetFunctor&lt; unsigned int &gt; *</type>
      <name>getWarningTimeCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDeleting</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ArSyncTask *proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoTimeWarningCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ArRetFunctor&lt; bool &gt; *functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ArTaskState::State state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarningTimeCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ArRetFunctor&lt; unsigned int &gt; *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArSyncTask</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>myFunctor</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSyncTask *</type>
      <name>myInvokingOtherFunctor</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsDeleting</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; int, ArSyncTask * &gt;</type>
      <name>myMultiMap</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor&lt; bool &gt; *</type>
      <name>myNoTimeWarningCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSyncTask *</type>
      <name>myParent</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRunning</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTaskState::State</type>
      <name>myState</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTaskState::State *</type>
      <name>myStatePointer</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctor&lt; unsigned int &gt; *</type>
      <name>myWarningTimeCB</name>
      <anchorfile>classArSyncTask.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArSystemStatus</name>
    <filename>classArSystemStatus.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getCPU</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getCPUPercent</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getCPUPercentAsString</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor&lt; double &gt; *</type>
      <name>getCPUPercentFunctor</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned long</type>
      <name>getUptime</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getUptimeHours</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getUptimeHoursAsString</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor&lt; double &gt; *</type>
      <name>getUptimeHoursFunctor</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getWirelessDiscardedPackets</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getWirelessDiscardedPacketsBecauseNetConflict</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getWirelessLinkNoise</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor&lt; int &gt; *</type>
      <name>getWirelessLinkNoiseFunctor</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getWirelessLinkQuality</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor&lt; int &gt; *</type>
      <name>getWirelessLinkQualityFunctor</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getWirelessLinkSignal</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArRetFunctor&lt; int &gt; *</type>
      <name>getWirelessLinkSignalFunctor</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invalidate</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>refresh</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>runRefreshThread</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(int refreshFrequency=5000)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>startPeriodicUpdate</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(int refreshFrequency=5000)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stopPeriodicUpdate</name>
      <anchorfile>classArSystemStatus.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTaskState</name>
    <filename>classArTaskState.html</filename>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESUME</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUSPEND</name>
      <anchor>w4w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCESS</name>
      <anchor>w4w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILURE</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_START</name>
      <anchor>w4w7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTCM2</name>
    <filename>classArTCM2.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addHeadingDataCallback</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor1&lt; double &gt; *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned long connectTimeout=5000)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandAutoCalibration</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandContinuousPackets</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandJustCompass</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandOff</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandOnePacket</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandSoftReset</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandStopCalibration</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commandUserCalibration</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connect</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCalibrationH</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCalibrationM</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCalibrationV</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCompass</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getError</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeading</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPacCount</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPitch</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRoll</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getXMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveCalibrationH</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveCalibrationM</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveCalibrationV</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveHeading</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>havePitch</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveRoll</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveTemperature</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveXMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveYMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveZMagnetic</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementPacketCount</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeHeadingDataCallbacks</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(double heading)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCalibrationH</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCalibrationM</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCalibrationV</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myError</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveCalibrationH</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveCalibrationM</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveCalibrationV</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveHeading</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHavePitch</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveRoll</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveTemperature</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveXMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveYMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaveZMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myHeading</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor1&lt; double &gt; * &gt;</type>
      <name>myHeadingDataCallbacks</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacCount</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacCurrentCount</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPitch</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myRoll</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTemperature</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myTimeLastPacket</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myXMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myYMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myZMag</name>
      <anchorfile>classArTCM2.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTCMCompassDirect</name>
    <filename>classArTCMCompassDirect.html</filename>
    <base virtualness="virtual">ArTCM2</base>
    <member kind="function">
      <type></type>
      <name>ArTCMCompassDirect</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *serialPortName=ARTCM2_DEFAULT_SERIAL_PORT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArTCMCompassDirect</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArDeviceConnection *devCon)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned long connectTimeout=5000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandAutoCalibration</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandContinuousPackets</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandJustCompass</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandOff</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandOnePacket</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandSoftReset</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandStopCalibration</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandUserCalibration</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connect</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArDeviceConnection *</type>
      <name>getDeviceConnetion</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(unsigned int msWait=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceConnection</name>
      <anchorfile>classArTCMCompassDirect.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArDeviceConnection *devCon)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTCMCompassRobot</name>
    <filename>classArTCMCompassRobot.html</filename>
    <base virtualness="virtual">ArTCM2</base>
    <member kind="function">
      <type></type>
      <name>ArTCMCompassRobot</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandAutoCalibration</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandContinuousPackets</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandJustCompass</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandOff</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandOnePacket</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandSoftReset</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandStopCalibration</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commandUserCalibration</name>
      <anchorfile>classArTCMCompassRobot.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTcpConnection</name>
    <filename>classArTcpConnection.html</filename>
    <base>ArDeviceConnection</base>
    <member kind="enumeration">
      <name>Open</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_NET_FAIL</name>
      <anchor>w0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_BAD_HOST</name>
      <anchor>w0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_NO_ROUTE</name>
      <anchor>w0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPEN_CON_REFUSED</name>
      <anchor>w0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArTcpConnection</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHost</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getOpenMessage</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int messageNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ArSocket *</type>
      <name>getSocket</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArTime</type>
      <name>getTimeRead</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>internalOpen</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTimeStamping</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char *host=NULL, int port=8101)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>openSimple</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *data, unsigned int size, unsigned int msWait=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const char *host=NULL, int port=8101)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSocket</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ArSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatus</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char *data, unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArTcpConnection</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildStrMap</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myHostName</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myOwnSocket</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPortNum</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArSocket *</type>
      <name>mySocket</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStatus</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArStrMap</type>
      <name>myStrMap</name>
      <anchorfile>classArTcpConnection.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArThread</name>
    <filename>classArThread.html</filename>
    <member kind="typedef">
      <type>std::map&lt; ThreadType, ArThread * &gt;</type>
      <name>MapType</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Status</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_FAILED</name>
      <anchor>w1w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NORESOURCE</name>
      <anchor>w1w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NO_SUCH_THREAD</name>
      <anchor>w1w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_INVALID</name>
      <anchor>w1w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_JOIN_SELF</name>
      <anchor>w1w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ALREADY_DETATCHED</name>
      <anchor>w1w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pthread_t</type>
      <name>ThreadType</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *func, bool joinable=true, bool blockAllSignals=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ThreadType thread, bool joinable, bool blockAllSignals=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool blockAllSignals=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancel</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArFunctor *func, bool joinable=true, bool lowerPriority=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>detach</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBlockAllSignals</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArFunctor *</type>
      <name>getFunc</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getJoinable</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ThreadType</type>
      <name>getOSThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>getPID</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRunning</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRunningWithLock</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ThreadType *</type>
      <name>getThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getThreadActivity</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getThreadName</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isThreadFinished</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isThreadStarted</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>join</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void **ret=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lock</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>logThreadInfo</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRunning</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(bool running)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThreadName</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stopRunning</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>threadFinished</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>threadStarted</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryLock</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlock</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cancelAll</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArLog::LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadType</type>
      <name>getThisOSThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ThreadType *</type>
      <name>getThisThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getThisThreadName</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>joinAll</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadType</type>
      <name>osSelf</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArThread *</type>
      <name>self</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLogLevel</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(ArLog::LogLevel level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stopAll</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yieldProcessor</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doJoin</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void **ret=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myBlockAllSignals</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFinished</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctor *</type>
      <name>myFunc</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myJoinable</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pid_t</type>
      <name>myPID</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRunning</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStarted</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArStrMap</type>
      <name>myStrMap</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadType</type>
      <name>myThread</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArLog::LogLevel</type>
      <name>ourLogLevel</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static MapType</type>
      <name>ourThreads</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>ourThreadsMutex</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ourUnknownThreadName</name>
      <anchorfile>classArThread.html</anchorfile>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTime</name>
    <filename>classArTime.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addMSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(long ms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArTime</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>time_t</type>
      <name>getMSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>time_t</type>
      <name>getSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAfter</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArTime testTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAt</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ArTime testTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBefore</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ArTime testTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>mSecSince</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>mSecSince</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ArTime since) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>mSecTo</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>secSince</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>secSince</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ArTime since) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>secTo</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(time_t msec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(time_t sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNow</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArTime</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>usingMonotonicClock</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>myMSec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_t</type>
      <name>mySec</name>
      <anchorfile>classArTime.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTransform</name>
    <filename>classArTransform.html</filename>
    <member kind="function">
      <type></type>
      <name>ArTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArPose pose1, ArPose pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArPose pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArPoseWithTime</type>
      <name>doInvTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ArPoseWithTime source)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>doInvTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ArPose source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(std::list&lt; ArPoseWithTime * &gt; *poseList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(std::list&lt; ArPose * &gt; *poseList)</arglist>
    </member>
    <member kind="function">
      <type>ArPoseWithTime</type>
      <name>doTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ArPoseWithTime source)</arglist>
    </member>
    <member kind="function">
      <type>ArPose</type>
      <name>doTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ArPose source)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTh</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ArPose pose1, ArPose pose2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ArPose pose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArTransform</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCos</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mySin</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTh</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myX</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myY</name>
      <anchorfile>classArTransform.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTrimbleGPS</name>
    <filename>classArTrimbleGPS.html</filename>
    <base virtualness="virtual">ArGPS</base>
    <member kind="function">
      <type>bool</type>
      <name>sendTSIPCommand</name>
      <anchorfile>classArTrimbleGPS.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(char command, const char *data, size_t dataLen)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initDevice</name>
      <anchorfile>classArTrimbleGPS.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArTypes</name>
    <filename>classArTypes.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>Byte</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>Byte2</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Byte4</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>UByte</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>UByte2</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>UByte4</name>
      <anchorfile>classArTypes.html</anchorfile>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArUrg</name>
    <filename>classArUrg.html</filename>
    <base>ArLaser</base>
    <member kind="function">
      <type></type>
      <name>ArUrg</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int laserNumber, const char *name=&quot;urg&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>asyncConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>blockingConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTryingToConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArUrg</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failedToConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>laserCheckParams</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>laserSetName</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readLine</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(char *buf, unsigned int size, unsigned int msWait)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void *</type>
      <name>runThread</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sensorInterp</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setParams</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(double startingDegrees=-135, double endingDegrees=135, double incrementDegrees=1, bool flipped=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setParamsBySteps</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(int startingStep=0, int endingStep=768, int clusterCount=3, bool flipped=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobot</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(ArRobot *robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeString</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArUrg &gt;</type>
      <name>myAriaExitCB</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myClusterCount</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myClusterMiddleAngle</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myDataMutex</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myEndingStep</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myFirmwareVersion</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlipped</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsConnected</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myLogMore</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myProduct</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myProtocolVersion</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myReading</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArMutex</type>
      <name>myReadingMutex</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myReadingRequested</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myRequestString</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p14</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArUrg &gt;</type>
      <name>mySensorInterpTask</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mySerialNumber</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myStartConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStartingStep</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myStat</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myTryingToConnect</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myVendor</name>
      <anchorfile>classArUrg.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArUtil</name>
    <filename>classArUtil.html</filename>
    <member kind="enumeration">
      <name>BITS</name>
      <anchor>w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT0</name>
      <anchor>w16w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT1</name>
      <anchor>w16w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT2</name>
      <anchor>w16w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT3</name>
      <anchor>w16w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT4</name>
      <anchor>w16w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT5</name>
      <anchor>w16w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT6</name>
      <anchor>w16w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT7</name>
      <anchor>w16w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT8</name>
      <anchor>w16w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT9</name>
      <anchor>w16w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT10</name>
      <anchor>w16w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT11</name>
      <anchor>w16w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT12</name>
      <anchor>w16w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT13</name>
      <anchor>w16w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT14</name>
      <anchor>w16w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIT15</name>
      <anchor>w16w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>REGKEY</name>
      <anchor>w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGKEY_CLASSES_ROOT</name>
      <anchor>w17w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGKEY_CURRENT_CONFIG</name>
      <anchor>w17w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGKEY_CURRENT_USER</name>
      <anchor>w17w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGKEY_LOCAL_MACHINE</name>
      <anchor>w17w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGKEY_USERS</name>
      <anchor>w17w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDirectories</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(char *dest, size_t destLength, const char *baseDir, const char *insideDir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>appendSlash</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>appendSlash</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(char *path, size_t pathLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>atof</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const char *nptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>changeFileTimestamp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(const char *fileName, time_t timestamp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>convertBool</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>creat</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const char *pathname, mode_t mode, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteSet</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(T begin, T end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteSetPairs</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(T begin, T end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>escapeSpaces</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(char *dest, const char *src, size_t maxLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findFile</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findFirstStringInRegistry</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(const char *key, const char *value, char *str, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMax</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(double first, double second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findMax</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(int first, int second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMin</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(double first, double second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findMin</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(int first, int second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixSlashes</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixSlashes</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(char *path, size_t pathLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixSlashesBackward</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(char *path, size_t pathLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixSlashesForward</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(char *path, size_t pathLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>floatIsNormal</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FILE *</type>
      <name>fopen</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e21</anchor>
      <arglist>(const char *path, const char *mode, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>functorPrintf</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e22</anchor>
      <arglist>(ArFunctor1&lt; const char * &gt; *functor, char *str,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getDirectory</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e23</anchor>
      <arglist>(const char *fileName, char *result, size_t resultLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getFileName</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e24</anchor>
      <arglist>(const char *fileName, char *result, size_t resultLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getStringFromFile</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e25</anchor>
      <arglist>(const char *fileName, char *str, size_t strLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getStringFromRegistry</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e26</anchor>
      <arglist>(REGKEY root, const char *key, const char *value, char *str, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>getTime</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOnlyAlphaNumeric</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e28</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStrEmpty</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e29</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>localtime</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e30</anchor>
      <arglist>(struct tm *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>localtime</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e31</anchor>
      <arglist>(const time_t *timep, struct tm *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lower</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e32</anchor>
      <arglist>(char *dest, const char *src, size_t maxLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>matchCase</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e33</anchor>
      <arglist>(const char *baseDir, const char *fileName, char *result, size_t resultLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>open</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e34</anchor>
      <arglist>(const char *pathname, int flags, mode_t mode, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>open</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e35</anchor>
      <arglist>(const char *pathname, int flags, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FILE *</type>
      <name>popen</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e36</anchor>
      <arglist>(const char *command, const char *type, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentDayInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e37</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentHourInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e38</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentMinuteInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e39</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentMonthInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e40</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentSecondInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e41</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>putCurrentYearInString</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e42</anchor>
      <arglist>(char *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFileCloseOnExec</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e43</anchor>
      <arglist>(FILE *file, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFileCloseOnExec</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e44</anchor>
      <arglist>(int fd, bool closeOnExec=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>sizeFile</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e45</anchor>
      <arglist>(std::string fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>sizeFile</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e46</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sleep</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e47</anchor>
      <arglist>(unsigned int ms)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcasecmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e48</anchor>
      <arglist>(const char *str, const char *str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcasecmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e49</anchor>
      <arglist>(const char *str, std::string str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcasecmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e50</anchor>
      <arglist>(std::string str, const char *str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcasecmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e51</anchor>
      <arglist>(std::string str, std::string str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcasequotecmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e52</anchor>
      <arglist>(const std::string &amp;str1, const std::string &amp;str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e53</anchor>
      <arglist>(const char *str, const char *str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e54</anchor>
      <arglist>(const char *str, std::string str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e55</anchor>
      <arglist>(std::string str, const char *str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>strcmp</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e56</anchor>
      <arglist>(std::string str, std::string str2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>stripQuotes</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e57</anchor>
      <arglist>(char *dest, const char *src, size_t destLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeToFile</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>e58</anchor>
      <arglist>(const char *str, FILE *file)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM1</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM10</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM11</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM12</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM13</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM14</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM15</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM16</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM2</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM3</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM4</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM5</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM6</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM7</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM8</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>COM9</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>FALSESTRING</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>TRUESTRING</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::list&lt; std::string &gt;</type>
      <name>splitFileName</name>
      <anchorfile>classArUtil.html</anchorfile>
      <anchor>f0</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArVCC4</name>
    <filename>classArVCC4.html</filename>
    <base>ArPTZ</base>
    <member kind="function">
      <type>void</type>
      <name>addErrorCB</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArFunctor *functor, ArListPos::Pos position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArVCC4</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArRobot *robot, bool inverted=false, CommState commDirection=COMM_UNKNOWN, bool autoUpdate=true, bool disableLED=false, CameraType cameraType=CAMERA_VCC4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>autoFocus</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetFOV</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealPanTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canGetRealZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSetFocus</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectHandler</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>digitalZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int deg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableAutoUpdate</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableIRFilterMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableIRLEDs</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAutoUpdate</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableIRFilterMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableIRLEDs</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>focusFar</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>focusNear</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoUpdate</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDigitalZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMaxZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFOVAtMinZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIRFilterModeEnabled</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIRLEDsEnabled</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegPan</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxNegTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxPanSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosPan</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxTiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinPanSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMinZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPan</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPanSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPower</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRealPanTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRealZoomPos</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haltPanTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haltZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitted</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>packetHandler</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(ArBasePacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pan</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panRel</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>panSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(double pdeg, double tdeg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>panTiltRel</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(double pdeg, double tdeg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>power</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preparePacket</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(ArVCC4Packet *packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remErrorCB</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(ArFunctor *functor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLEDControlMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(int controlMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tiltRel</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(double deg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasError</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>zoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(int deg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArVCC4</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>Error</name>
      <anchor>x21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_ERROR_NONE</name>
      <anchor>x21x18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_ERROR_BUSY</name>
      <anchor>x21x16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_ERROR_PARAM</name>
      <anchor>x21x19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_ERROR_MODE</name>
      <anchor>x21x17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_ERROR_UNKNOWN</name>
      <anchor>x21x20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>camTask</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>invert</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(double before) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processGetPanTiltResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processGetProductNameResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processGetZoomResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ArBasePacket *</type>
      <name>readPacket</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>requestBytes</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(int num=6)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendCameraNameRequest</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendDigitalZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendFocus</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendHaltPanTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendHaltZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendInit</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendIRFilterControl</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendIRLEDControl</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendLEDControlMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendPanSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendPanTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendPower</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendProductNameRequest</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendRealPanTiltRequest</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendRealZoomRequest</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendTiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sendZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setControlMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setDefaultRange</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchState</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b26</anchor>
      <arglist>(State state, int delayTime=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>throwError</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timeout</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>b28</anchor>
      <arglist>(int mSec=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAutoUpdate</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myAutoUpdateCycle</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myBytesLeft</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCameraHasBeenInitted</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myCameraIsInitted</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CameraType</type>
      <name>myCameraType</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CommState</type>
      <name>myCommType</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArDeviceConnection *</type>
      <name>myConn</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDesiredIRFilterMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myDesiredIRLEDsMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDesiredLEDControlMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDigitalZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myDigitalZoomDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myError</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ArFunctor * &gt;</type>
      <name>myErrorCBList</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFocusMode</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFocusModeDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFOVAtMaxZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myFOVAtMinZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaltPanTiltRequested</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myHaltZoomRequested</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myIdleTime</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInitRequested</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myInverted</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIRFilterModeEnabled</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIRLEDsEnabled</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myNextState</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArVCC4Packet</type>
      <name>myPacket</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myPacketBuf</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p28</anchor>
      <arglist>[50]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacketBufLen</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myPacketTime</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myPacketTimeout</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPan</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSent</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSlewDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myPanSlewSent</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPowerState</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myPowerStateDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myPreviousState</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myProductName</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>myProductNameResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p43</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRealPanTiltRequested</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRealZoomRequested</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myRequestProductName</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myResponseReceived</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRobot *</type>
      <name>myRobot</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStateDelayTime</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArTime</type>
      <name>myStateTime</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myStateTimeout</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArFunctorC&lt; ArVCC4 &gt;</type>
      <name>myTaskCB</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTilt</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSent</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSlew</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSlewDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myTiltSlewSent</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myUsingAuxPort</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWaitingOnPacket</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWaitingOnStop</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myWasError</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoom</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoomDesired</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoomResponse</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myZoomSent</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArBasePacket *</type>
      <name>newPacket</name>
      <anchorfile>classArVCC4.html</anchorfile>
      <anchor>p69</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classArVCC4">VCC4CommandDetails</docanchor>
    <docanchor file="classArVCC4">VCC4UnitConversions</docanchor>
    <docanchor file="classArVCC4">VCC4C50iFeatures</docanchor>
  </compound>
  <compound kind="class">
    <name>ArVCC4Commands</name>
    <filename>classArVCC4Commands.html</filename>
    <member kind="enumeration">
      <name>Command</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELIM</name>
      <anchor>w2w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEVICEID</name>
      <anchor>w2w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANSLEW</name>
      <anchor>w2w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILTSLEW</name>
      <anchor>w2w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STOP</name>
      <anchor>w2w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchor>w2w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEWREQ</name>
      <anchor>w2w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANGLEREQ</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILT</name>
      <anchor>w2w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETRANGE</name>
      <anchor>w2w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PANTILTREQ</name>
      <anchor>w2w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFRARED</name>
      <anchor>w2w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRODUCTNAME</name>
      <anchor>w2w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEDCONTROL</name>
      <anchor>w2w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL</name>
      <anchor>w2w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POWER</name>
      <anchor>w2w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTOFOCUS</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOMSTOP</name>
      <anchor>w2w27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAIN</name>
      <anchor>w2w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOCUS</name>
      <anchor>w2w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOM</name>
      <anchor>w2w25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOMREQ</name>
      <anchor>w2w26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IRCUTFILTER</name>
      <anchor>w2w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITALZOOM</name>
      <anchor>w2w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOOTER</name>
      <anchor>w2w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESPONSE</name>
      <anchor>w2w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEADER</name>
      <anchor>w2w10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArVCC4Packet</name>
    <filename>classArVCC4Packet.html</filename>
    <base>ArBasePacket</base>
    <member kind="function">
      <type></type>
      <name>ArVCC4Packet</name>
      <anchorfile>classArVCC4Packet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArTypes::UByte2 bufferSize=30)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>byte2ToBuf</name>
      <anchorfile>classArVCC4Packet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArTypes::Byte4 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizePacket</name>
      <anchorfile>classArVCC4Packet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArVCC4Packet</name>
      <anchorfile>classArVCC4Packet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArVersalogicIO</name>
    <filename>classArVersalogicIO.html</filename>
    <member kind="function">
      <type></type>
      <name>ArVersalogicIO</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *dev=&quot;/dev/amrio&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closeIO</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAnalogValue</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int port, double *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAnalogValueRaw</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int port, int *val)</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDigitalBankDirection</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int bank)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDigitalBankInputs</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int bank, unsigned char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDigitalBankOutputs</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int bank, unsigned char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSpecialControlRegister</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnalogSupported</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lock</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDigitalBankDirection</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int bank, Direction dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDigitalBankOutputs</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int bank, unsigned char val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryLock</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlock</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArVersalogicIO</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myAnalogEnabled</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigitalBank0</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigitalBank1</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigitalBank2</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>myDigitalBank3</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArRetFunctorC&lt; bool, ArVersalogicIO &gt;</type>
      <name>myDisconnectCB</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myEnabled</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myFD</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumBanks</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ArMutex</type>
      <name>myMutex</name>
      <anchorfile>classArVersalogicIO.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArWGS84</name>
    <filename>classArWGS84.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>get1byf</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getA</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getB</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getE</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getEP</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getGM</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getOmega</name>
      <anchorfile>classArWGS84.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>ParamFiles</name>
    <title>Robot Parameter Files</title>
    <filename>ParamFiles</filename>
    <docanchor file="ParamFiles">ParamFileLaserParams</docanchor>
    <docanchor file="ParamFiles">ParamFileGPSParams</docanchor>
    <docanchor file="ParamFiles">ParamFileOtherDeviceParams</docanchor>
    <docanchor file="ParamFiles">ParamFileDeviceParams</docanchor>
  </compound>
  <compound kind="page">
    <name>CommandLineOptions</name>
    <title>Command Line Option Summary</title>
    <filename>CommandLineOptions</filename>
    <docanchor file="CommandLineOptions">ArRobotConnector</docanchor>
    <docanchor file="CommandLineOptions">ArLaserConnector</docanchor>
    <docanchor file="CommandLineOptions">ArGPSConnector</docanchor>
    <docanchor file="CommandLineOptions">ArCompassConnector</docanchor>
  </compound>
  <compound kind="page">
    <name>LaserLogFileFormat</name>
    <title>Laser Scan Log File Format</title>
    <filename>LaserLogFileFormat</filename>
  </compound>
  <compound kind="page">
    <name>MapFileFormat</name>
    <title>Map File Format</title>
    <filename>MapFileFormat</filename>
    <docanchor file="MapFileFormat">MapCustomObjects</docanchor>
  </compound>
</tagfile>
